var dateRangeNFL, data_controller, nflLoadingBar = {
        options: {
            targetEl: "body",
            loadingElID: "loading-bar",
            message: "Loading..."
        },
        init: function() {
            nflLoadingBar.reset()
        },
        reset: function() {
            $(nflLoadingBar.options.targetEl).append('<div id="' + nflLoadingBar.options.loadingElID + '">' + nflLoadingBar.options.message + "</div>"), nflLoadingBar.showLoading()
        },
        hideLoading: function() {
            $("#" + nflLoadingBar.options.loadingElID).fadeOut()
        },
        showLoading: function() {
            $("#" + nflLoadingBar.options.loadingElID).fadeIn()
        }
    },
    meter_use_current_day = !0,
    DataController = {
        options: {
            dateRange: void 0,
            data: void 0
        },
        init: function(e, a) {
            DataController.options.date_range = e, DataController.options.data = ArrestsCacheTable, a(this)
        },
        forEach: function(e, a, o) {
            o = o || !0;
            for (var r = DataController.options.data.length - 1; 0 <= r; r--) {
                var t = DataController.options.data[r];
                o ? this.dateLimit(t, DataController.options.date_range.getStart(), DataController.options.date_range.getEnd()) && e(t) : e(t)
            }
            a()
        },
        incrementMap: function(e, a) {
            return e.hasOwnProperty(a) ? e[a] = e[a] + 1 : e[a] = 1, e
        },
        dateLimit: function(e, a, o) {
            return new Date(e.Date) >= new Date(a) && new Date(e.Date) <= new Date(o)
        },
        getActivePlayerArrests: function(e) {
            e(["no data"])
        },
        getTeams: function(e) {
            for (var a = [], o = [], r = new Map, t = DataController.options.data.length - 1; 0 <= t; t--) {
                var i = DataController.options.data[t];
                a.push({
                    Team: i.Team,
                    Team_preffered_name: i.Team_preffered_name,
                    Team_logo_id: i.Team_logo_id
                })
            }
            for (t = a.length - 1; 0 <= t; t--) {
                var n = a[t];
                r.has(n.Team) || (r.set(n.Team, !0), o.push(n))
            }
            e(o)
        },
        getArrestMeter: function(e) {
            for (var a, o, r, t, i = 0, n = -1, s = 0, _ = 9e9, m = DataController.options.data.length - 1; 0 <= m; m--) {
                var c = DataController.options.data[m];
                this.dateLimit(c, DataController.options.date_range.getStart(), DataController.options.date_range.getEnd()) && (s++, i += c.DaysToLastArrest, meter_use_current_day && (c.daysSince = (a = new Date(c.Date), o = new Date, void 0, r = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate()), t = Date.UTC(o.getFullYear(), o.getMonth(), o.getDate()), Math.floor((t - r) / 864e5))), c.DaysToLastArrest > n && (n = c.DaysToLastArrest), c.DaysSince < _ && (_ = c.DaysSince))
            }
            i /= s, e({
                alltime: {
                    record: Math.floor(n),
                    average: Math.floor(i),
                    raw_average: Math.floor(i)
                },
                current: {
                    daysSince: Math.floor(_),
                    probability: Math.exp(-1 * _) / i,
                    odds: Math.floor(1 / Math.exp(-1 * _ / i))
                }
            })
        },
        getDonutChart: function(o, e, a) {
            for (var r = {}, t = [], i = DataController.options.data.length - 1; 0 <= i; i--) {
                var n = DataController.options.data[i];
                e(n) && this.dateLimit(n, DataController.options.date_range.getStart(), DataController.options.date_range.getEnd()) && (r = this.incrementMap(r, n[o]))
            }
            Object.keys(r).forEach(function(e) {
                var a = {};
                a[o] = e, a.arrest_count = r[e], t.push(a)
            }), a(t.sort(function(e, a) {
                return a.arrest_count - e.arrest_count
            }))
        },
        getOverallChart: function(e, a, o, r, t) {
            for (var i = {
                    Year: "Year",
                    Month: "Month",
                    Day: "Day_of_Week",
                    DayOrder: "Day_of_Week_int",
                    Team: "Team_preffered_name",
                    "Team Code": "Team",
                    Conference: "Team_Conference",
                    Division: "Team_Conference_Division",
                    Position: "Position",
                    Crime: "Crime_category",
                    Season: "Season",
                    SeasonState: "ArrestSeasonState",
                    Measure: "arrest_count"
                }, n = i[a], s = i[e], _ = i[o], m = r, c = {}, d = {}, l = {}, y = DataController.options.data.length - 1; 0 <= y; y--) {
                var T = DataController.options.data[y];
                this.dateLimit(T, DataController.options.date_range.getStart(), DataController.options.date_range.getEnd()) && (c = this.incrementMap(c, T[n] + T[s]), d = this.incrementMap(d, T[n]), l = this.incrementMap(l, T[s]))
            }
            var D = [];
            Object.keys(d).forEach(function(e) {
                D.push({
                    bar: e,
                    arrest_count: d[e]
                })
            }), "DESC" == m && _ == n && D.sort(function(e, a) {
                return a.arrest_count - e.arrest_count
            });
            var g = [];
            Object.keys(l).forEach(function(e) {
                g.push(e)
            });
            var u = ["x"];
            D.forEach(function(e) {
                u.push(e.bar)
            });
            var f = [];
            f.push(u), Object.keys(l).forEach(function(r) {
                var t = [r];
                D.forEach(function(e) {
                    var a = e.bar,
                        o = c[a + r];
                    null == o && (o = 0), t.push(o)
                }), f.push(t)
            }), t({
                columns: f,
                groups: g
            })
        },
        getTopLists: function(e, a, o, r) {
            for (var t = [], i = {}, n = {}, s = {}, _ = [], m = [], c = [], d = DataController.options.data.length - 1; 0 <= d; d--) {
                var l = DataController.options.data[d];
                this.dateLimit(l, DataController.options.date_range.getStart(), DataController.options.date_range.getEnd()) && (i = this.incrementMap(i, l.Category), n = this.incrementMap(n, l.Name), s = this.incrementMap(s, l.Position))
            }
            Object.keys(i).forEach(function(e) {
                var a = {};
                a.Category = e, a.arrest_count = i[e], _.push(a)
            }), Object.keys(n).forEach(function(e) {
                var a = {};
                a.Name = e, a.arrest_count = n[e], m.push(a)
            }), Object.keys(s).forEach(function(e) {
                var a = {};
                a.Position = e, a.arrest_count = s[e], c.push(a)
            });
            var y = function(e, a) {
                return a.arrest_count - e.arrest_count
            };
            t.push(_.sort(y).slice(e, e + 5)), t.push(m.sort(y).slice(e, e + 5)), t.push(c.sort(y).slice(e, e + 5)), r(t)
        },
        getArrests: function(a, e) {
            var o = [],
                r = this;
            r.forEach(function(e) {
                r.dateLimit(e, DataController.options.date_range.getStart(), DataController.options.date_range.getEnd()) && a(e) && o.push(e)
            }, function() {
                e(o)
            })
        }
    },
    mainChartReturned = !1,
    last_start_pos = 0,
    listsReturnCount = 0,
    listsReturned = !1,
    ytdChart = !1,
    mainChartStyleID = 0;

function addChartButtonListeners() {
    $("#mainChartByTeamBtn").click(function() {
        ytdChart = !1, mainChartStyleID = 0, window.location.hash = "ByTeam", changeTopChart(), googleTracking.sendTrackEvent("mainChart", "switchToByTeam")
    }), $("#mainChartByYearBtn").click(function() {
        ytdChart = !0, mainChartStyleID = 1, window.location.hash = "ByYear", changeTopChart(), googleTracking.sendTrackEvent("mainChart", "switchToByYear")
    }), $("#mainChartBySeasonBtn").click(function() {
        ytdChart = !1, mainChartStyleID = 2, window.location.hash = "BySeason", changeTopChart(), googleTracking.sendTrackEvent("mainChart", "switchToBySeason")
    }), $("#mainChartByConfBtn").click(function() {
        ytdChart = !0, mainChartStyleID = 3, window.location.hash = "ByDayOfWeek", changeTopChart(), googleTracking.sendTrackEvent("mainChart", "switchToByDayOfWeek")
    }), $("#mainChartByConfDivBtn").click(function() {
        ytdChart = !0, mainChartStyleID = 4, window.location.hash = "ByDivision", changeTopChart(), googleTracking.sendTrackEvent("mainChart", "switchToByDivision")
    })
}

function renderActivePlayerArrests() {
    data_controller.getActivePlayerArrests(function(e) {
        var a = '<span class="kpi"><span class="kpi-value-large">' + (100 * e[0].percent).toFixed(2) + '%</span><span class="kpi-description-smaller">Active Players Arrested</span><span><span style="display:inline-block;"><span class="kpi-value-small">' + e[0].arrested + '</span><span class="kpi-description-x-small">arrested</span></span><span style="display:inline-block;margin-left:.5em;"><span class="kpi-value-small">' + e[0].active + '</span><span class="kpi-description-x-small">active</span></span></span>';
        $("#activePlayerArrestRate").html(a)
    })
}

function loadTeamLinks(e) {
    $.each(e, function(e, a) {
        $("#bottomTeamLinks").append('<a href="' + getPageLink("team", a.Team) + "\"><span style=\"display:inline-block;width:20px;height:20px;vertical-align: text-bottom;background:url('images/NFLTeamLogos.png') 0px -" + 20 * a.Team_logo_id + 'px;background-size:100%;"></span> ' + a.Team_preffered_name + "</a> ")
    })
}

function loadingFinished() {
    console.log("loadfinish"), setupArrestOMeter(), nflLoadingBar.hideLoading(), mainChartReturned = listsReturned = !1, setupFacebook(), setupTwitter(), $("#newsletterForm").submit(function(e) {
        e.preventDefault(), $.ajax({
            url: "http://patrickmurphywebdesign.com/Projects/emails/emailList.php",
            type: "POST",
            data: {
                email: $("input[name=email]").val()
            }
        }), $("#newsletterForm").html("<p>Thanks for Subscribing! Expect Emails when Players are arrested or when records are broken!</p>"), googleTracking.sendTrackEvent("Email List", "Subscribe")
    }), $("#newsletterForm input[name=email]").focus(function() {
        googleTracking.sendTrackEvent("Email List", "Focus")
    })
}

function setupArrestOMeter() {
    data_controller.getArrestMeter(function(e) {
        var a = e.current.daysSince,
            o = e.alltime.record,
            r = e.alltime.average,
            t = parseInt(a) / o;
        $("#arrest_meter_text").html("It has been <b>" + a + "</b> Days since the last arrest.</p>"), $("#arrest_meter_subtext").html("Average: <b>" + r + "</b> Days | Record W/O arrest: <b>" + o + "</b> Days"), $(".recordHolder").html(o), $(".avgRecord").html(r), $(".meter-fg").animate({
            width: 100 * t + "%"
        }, 1750)
    })
}

function evaluateHash() {
    window.location.hash && (mainChartStyleID = "#ByYear" == window.location.hash ? 1 : "#BySeason" == window.location.hash ? 2 : 0)
}

function changeChartButtonStyle() {
    1 == mainChartStyleID ? ($(".mainChartBtn").removeClass("button-primary"), $("#mainChartByYearBtn").addClass("button-primary")) : 0 == mainChartStyleID ? ($(".mainChartBtn").removeClass("button-primary"), $("#mainChartByTeamBtn").addClass("button-primary")) : 2 == mainChartStyleID ? ($(".mainChartBtn").removeClass("button-primary"), $("#mainChartBySeasonBtn").addClass("button-primary")) : 3 == mainChartStyleID ? ($(".mainChartBtn").removeClass("button-primary"), $("#mainChartByConfBtn").addClass("button-primary")) : 4 == mainChartStyleID && ($(".mainChartBtn").removeClass("button-primary"), $("#mainChartByConfDivBtn").addClass("button-primary"))
}

function changeTopChart() {
    setupChart(), changeChartButtonStyle()
}

function getOverallChartData(e) {
    0 == mainChartStyleID ? data_controller.getOverallChart("Crime", "Team Code", "Team Code", "DESC", e) : 1 == mainChartStyleID ? data_controller.getOverallChart("Crime", "Year", "Year", "ASC", e) : 3 == mainChartStyleID ? data_controller.getOverallChart("Crime", "Day", "Day", "ASC", e) : 2 == mainChartStyleID ? data_controller.getOverallChart("SeasonState", "Season", "Season", "ASC", e) : 4 == mainChartStyleID && data_controller.getOverallChart("Division", "Year", "Year", "ASC", e)
}

function setupChart() {
    void 0 !== stackedBarChart.stackedChart && stackedBarChart.stackedChart.destroy(), getOverallChartData(function(e) {
        stackedBarChart.init({
            data: e,
            targetElement: "#chart",
            targetExpandBtn: "#details_summary_btn",
            hideBtn: "#hideAll_btn",
            showBtn: "#showAll_btn"
        }), (mainChartReturned = !0) === listsReturned && !0 === mainChartReturned && (listsReturned = mainChartReturned = !1, loadingFinished())
    })
}

function getPageLink(e, a) {
    return e.charAt(0).toUpperCase() + e.slice(1) + ".html#" + a
}

function load_top_list(e, t, i, a, n, o) {
    (o = o || !1) && (last_start_pos = 0);
    var s = [];
    0 < e.length ? $.each(e, function(e, a) {
        var o = '<a href="' + getPageLink(t, a[n[0]]) + '">',
            r = "</a>";
        "" != t && detail_page_active || (r = o = ""), s.push("<li id='" + i + e + "'>" + o + "<span>" + a[n[0]] + "</span><span class='value-cell'>" + a[n[1]] + "</span>" + r + "</li>")
    }) : o && s.push('<li class="list-no-data-msg-item">No Data Available for this Date Range</li>'), o ? $(a).html(s.join("")) : $(a).append(s.join(""))
}

function load_top_lists(e, t) {
    e = e || "not first", t = t || !1, $(".list-no-data-msg-item").remove(), "first" != e && googleTracking.sendTrackEvent("TopLists", "Load Next Page");
    dateRangeNFL.getStart(), dateRangeNFL.getEnd();
    data_controller.getTopLists(last_start_pos, dateRangeNFL.getStart(), dateRangeNFL.getEnd(), function(e) {
        var a = e[0],
            o = e[1],
            r = e[2];
        a.length + o.length + r.length <= 0 && 0 == last_start_pos && console.log("no data returned"), load_top_list(a, "crime", "top_crime_", "#top_crimes_list", ["Category", "arrest_count"], t), load_top_list(o, "player", "top_player_", "#top_players_list", ["Name", "arrest_count"], t), load_top_list(r, "position", "top_pos_", "#top_positions_list", ["Position", "arrest_count"], t), listsReturned = !0, last_start_pos += 5, !(listsReturnCount = 0) === mainChartReturned && !0 === listsReturned && (listsReturned = mainChartReturned = !1, loadingFinished())
    })
}

function reload_top_lists() {
    load_top_lists("not first", !(last_start_pos = 0))
}

function setCookieValue(e, a, o) {
    var r = new Date;
    o = o || .5, r.setTime(r.getTime() + 24 * o * 60 * 60 * 1e3);
    var t = "expires=" + r.toUTCString();
    document.cookie = e + "=" + a + "; " + t
}

function getCookieValue(e) {
    for (var a = e + "=", o = document.cookie.split(";"), r = 0; r < o.length; r++) {
        for (var t = o[r];
            " " == t.charAt(0);) t = t.substring(1);
        if (0 == t.indexOf(a)) return t.substring(a.length, t.length)
    }
    return ""
}

function gaEvent(e, a, o, r, t) {
    googleTracking.sendTrackEvent(o, r)
}

function setupFacebook() {
    var e, a, o, r;
    console.log("FB Setup"), window.fbAsyncInit = function() {
        FB.init({
            appId: "563956043742586",
            xfbml: !0,
            version: "v2.4"
        }), FB.Event.subscribe("edge.create", function(e) {
            gaEvent("send", "social", "facebook", "like", e)
        }), FB.Event.subscribe("edge.remove", function(e) {
            gaEvent("send", "social", "facebook", "unlike", e)
        }), FB.Event.subscribe("message.send", function(e) {
            gaEvent("send", "social", "facebook", "send", e)
        })
    }, e = document, a = "facebook-jssdk", r = e.getElementsByTagName("script")[0], e.getElementById(a) || ((o = e.createElement("script")).id = a, o.src = "//connect.facebook.net/en_US/sdk.js", r.parentNode.insertBefore(o, r))
}

function setupTwitter() {
    var e, a, o, r, t;
    console.log("twitter setup"), window.twttr = (e = document, a = "twitter-wjs", r = e.getElementsByTagName("script")[0], t = window.twttr || {}, e.getElementById(a) || ((o = e.createElement("script")).id = a, o.src = "https://platform.twitter.com/widgets.js", r.parentNode.insertBefore(o, r), t._e = [], t.ready = function(e) {
        t._e.push(e)
    }), t), twttr.ready(function(e) {
        e.events.bind("tweet", function(e) {
            if (e) {
                var a = window.location.href;
                e.target && "IFRAME" == e.target.nodeName && (a = extractParamFromUri(e.target.src, "url")), gaEvent("send", "social", "twitter", "tweet", a), console.log("thanks for sharing", a)
            }
        })
    })
}

function update_hash() {
    var e = window.location.pathname.split("/");
    return pageID = window.location.hash || extractParamFromUri(window.location.search, "id") || e.pop() || e.pop() || "#!ID Not Set", pageID = decodeURI(pageID), pageID = pageID.replace("#!", ""), pageID = pageID.replace("#", ""), $("#pageTitle").append(pageID), pageID
}

function extractParamFromUri(e, a) {
    if (!e) return null;
    var o = new RegExp("[\\?&#]" + a + "=([^&#]*)").exec(e);
    return null != o ? decodeURI(unescape(o[1])) : null
}

function saveCanvasAsPNG(e) {
    var a = document.getElementById(e).toDataURL("image/png").replace("image/png", "image/octet-stream");
    window.location.href = a
}
detail_page_active = !0, $(window).load(function() {
    nflLoadingBar.init(), dateRangeController.init(function(e) {
        dateRangeNFL = e, DataController.init(dateRangeNFL, function(e) {
            data_controller = e, evaluateHash(), changeTopChart(), load_top_lists("first"), $("#dateRangeJquery").on("dateRangeChanged", function(e) {
                nflLoadingBar.showLoading(), setupChart(), reload_top_lists()
            }), $("#loadMoreLists").click(load_top_lists), detail_page_active ? data_controller.getTeams(loadTeamLinks) : $("#bottomTeamLinks").hide(), addChartButtonListeners(), $("#newsletterDisplayBtn").click(function() {
                $("#newsletterContainer").css("display", "block"), $("#newsletterDisplayBtn").css("display", "none"), googleTracking.sendTrackEvent("Email List", "MobileShowForm")
            })
        })
    }), detail_page_active && $(".top-list ol li").click(function() {
        return window.location = $(this).find("a").attr("href"), console.log($(this).find("a").attr("href")), !1
    })
}), window.mobileCheck = function() {
    var e, a = !1;
    return e = navigator.userAgent || navigator.vendor || window.opera, (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4))) && (a = !0), a
}, window.mobileAndTabletCheck = function() {
    var e, a = !1;
    return e = navigator.userAgent || navigator.vendor || window.opera, (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4))) && (a = !0), a
};
var isFirstHover = !0,
    stackedBarChart = {
        stackedChart: void 0,
        options: {
            targetElement: "#theElementSelector",
            targetExpandBtn: "#btnSelector",
            showBtn: "#btnSelector",
            hideBtn: "#btnSelector",
            data: {},
            isExpanded: !1,
            customLegend: !0,
            zoomEnabled: !1
        },
        init: function(e) {
            this.options.data = {}, $.extend(!0, this.options, e);
            var a = this;
            console.log("Initialize Chart:  " + this.options.targetElement), a.options.$targetElement = $(this.options.targetElement), a.options.$expandBtnElement = $(this.options.targetExpandBtn), a.options.$showBtnElement = $(this.options.showBtn), a.options.$hideBtnElement = $(this.options.hideBtn), stackedBarChart.options.$expandBtnElement.off("click"), stackedBarChart.options.$expandBtnElement.click(a.toggleExpand), stackedBarChart.options.$hideBtnElement.click(a.hideAllCategories), stackedBarChart.options.$showBtnElement.click(a.showAllCategories), a.renderChart()
        },
        renderChart: function() {
            if ($(document).width() < 800) var e = 20;
            else e = 6;
            stackedBarChart.stackedChart = c3.generate({
                bindto: stackedBarChart.options.targetElement,
                data: {
                    empty: {
                        label: {
                            text: "No Data Available for this Date Range"
                        }
                    },
                    x: "x",
                    columns: stackedBarChart.options.data.columns,
                    groups: [stackedBarChart.options.data.groups],
                    order: "asc",
                    type: "bar",
                    onclick: function(e, a) {
                        void 0 !== mainChartStyleID && 0 == mainChartStyleID && detail_page_active && (googleTracking.sendTrackEvent("mainChart", "teamLink"), setTimeout(function() {
                            window.location.href = "Team.html#" + stackedBarChart.options.data.columns[0][e.index + 1]
                        }, 100))
                    }
                },
                zoom: {
                    enabled: stackedBarChart.options.zoomEnabled
                },
                padding: {
                    bottom: e
                },
                legend: {
                    show: !stackedBarChart.options.customLegend
                },
                axis: {
                    x: {
                        type: "category"
                    }
                },
                color: {
                    pattern: ["#1F77B4", "#FF7F0E", "#2CA02C", "#D62728", "#9467BD", "#8C564B", "#E377C2", "#7F7F7F", "#BCBD22", "#17BECF", "#154F78", "#B0580A", "#248224", "#7D1717"]
                }
            }), stackedBarChart.options.customLegend && stackedBarChart.renderCustomLegend()
        },
        renderCustomLegend: function() {
            $(".customLegend").remove(), d3.select(".chart-container").insert("div", ".chart-options").attr("class", "customLegend").selectAll("span").data(stackedBarChart.options.data.groups).enter().append("span").attr("data-id", function(e) {
                return e
            }).attr("class", function(e) {
                var a = e.replace("/", "");
                return "customLegend-item customLegend-item-" + (a = a.split(" ").join(""))
            }).html(function(e) {
                return '<span class="customLegend-item-color" style="background-color:' + stackedBarChart.stackedChart.color(e) + ';"></span> ' + e
            }).on("mouseover", function(e) {
                stackedBarChart.stackedChart.focus(e), isFirstHover && (isFirstHover = !1, googleTracking.sendTrackEvent("mainChart", "legendMouseover"))
            }).on("mouseout", function(e) {
                stackedBarChart.stackedChart.revert()
            }).on("click", function(e) {
                stackedBarChart.stackedChart.toggle(e);
                var a = e.replace("/", "");
                a = a.split(" ").join("");
                var o = d3.select(".customLegend-item-" + a);
                console.log(o), o.classed("transparent", !o.classed("transparent")), googleTracking.sendTrackEvent("mainChart", "legendClick")
            })
        },
        toggleExpand: function() {
            stackedBarChart.options.$targetElement.toggleClass("expanded"), stackedBarChart.options.isExpanded = !stackedBarChart.options.isExpanded, stackedBarChart.options.isExpanded ? stackedBarChart.options.$expandBtnElement.html("Collapse") : stackedBarChart.options.$expandBtnElement.html("Expand"), googleTracking.sendTrackEvent("mainChart", "expand toggle"), stackedBarChart.renderChart()
        },
        hideAllCategories: function() {
            stackedBarChart.stackedChart.hide(), googleTracking.sendTrackEvent("mainChart", "hideAll"), $(".customLegend-item").addClass("transparent")
        },
        showAllCategories: function() {
            stackedBarChart.stackedChart.show(), googleTracking.sendTrackEvent("mainChart", "showAll"), $(".customLegend-item").removeClass("transparent")
        }
    },
    dateRangeController = {
        start_date: "2000-01-01",
        end_date: "",
        init: function(e) {
            "undefined" != typeof pageID && pageID;
            $("#dateRangeJquery").daterangepicker({
                presetRanges: [{
                    text: "Last 3 Months",
                    dateStart: function() {
                        return moment().subtract("months", 3)
                    },
                    dateEnd: function() {
                        return moment()
                    }
                }, {
                    text: "Last 6 Months",
                    dateStart: function() {
                        return moment().subtract("months", 6)
                    },
                    dateEnd: function() {
                        return moment()
                    }
                }, {
                    text: "Last Year",
                    dateStart: function() {
                        return moment().subtract("years", 1)
                    },
                    dateEnd: function() {
                        return moment()
                    }
                }, {
                    text: "Last 5 Years",
                    dateStart: function() {
                        return moment().subtract("years", 5)
                    },
                    dateEnd: function() {
                        return moment()
                    }
                }, {
                    text: "All Records",
                    dateStart: function() {
                        return moment("2000-01-01")
                    },
                    dateEnd: function() {
                        return moment()
                    }
                }],
                datepickerOptions: {
                    minDate: new Date("2000-01-01"),
                    maxDate: 0
                }
            });
            var a = moment().format("YYYY-MM-DD");
            this.start_date = this.getCookie("start_date") || "2000-01-01", this.end_date = this.getCookie("end_date") || a, $("#dateRangeJquery").daterangepicker("setRange", {
                start: moment(this.start_date).toDate(),
                end: moment(this.end_date).toDate()
            }), $("#dateRangeJquery").on("change", this.changeDateRange), $("#dateRangeJquery").on("open", function() {
                googleTracking.sendTrackEvent("DateRange", "OpenDialog")
            }), e(this)
        },
        open: function() {
            $("#dateRangeJquery").daterangepicker("open")
        },
        close: function() {
            $("#dateRangeJquery").daterangepicker("close")
        },
        resetTime: function(e) {
            googleTracking.sendTrackEvent("DateRange", "Reset"), e = e || !1;
            var a = dateRangeController.getToday();
            dateRangeController.setDates("2000-01-01", a)
        },
        getToday: function() {
            var e, a, o = new Date;
            return e = o.getMonth() < 9 ? "0" + (o.getMonth() + 1) : o.getMonth() + 1, a = o.getDate() < 10 ? "0" + o.getDate() : o.getDate(), o.getFullYear() + "-" + e + "-" + a
        },
        getStart: function() {
            return this.start_date
        },
        getEnd: function() {
            return this.end_date
        },
        changeDateRange: function() {
            var e = JSON.parse($("#dateRangeJquery").val());
            console.log(e);
            var a = e.start,
                o = e.end;
            if (new Date(a) > new Date(o)) {
                var r = a;
                a = o, o = r
            }
            dateRangeController.setDates(a, o)
        },
        setDates: function(e, a) {
            if (dateRangeController.setCookie("start_date", e), dateRangeController.setCookie("end_date", a), dateRangeController.start_date = e, dateRangeController.end_date = a, window.CustomEvent) {
                new Event("dateRangeChanged");
                $("#dateRangeJquery").trigger("dateRangeChanged"), googleTracking.sendTrackEvent("DateRange", "DateChanged")
            }
        },
        setCookie: function(e, a, o) {
            return setCookieValue(e, a, o)
        },
        getCookie: function(e) {
            return getCookieValue(e)
        }
    },
    hashervar = window.location.hash || "",
    pagePath = window.location.pathname + hashervar;
! function(e, a, o, r, t, i, n) {
    e.GoogleAnalyticsObject = t, e.ga = e.ga || function() {
        (e.ga.q = e.ga.q || []).push(arguments)
    }, e.ga.l = 1 * new Date, i = a.createElement("script"), n = a.getElementsByTagName("script")[0], i.async = 1, i.src = "//www.google-analytics.com/analytics.js", n.parentNode.insertBefore(i, n)
}(window, document, 0, 0, "ga"), ga("create", "UA-66360026-1", "auto"), ga("send", "pageview", pagePath);
var googleTracking = {
    tracker: void 0,
    initialize: function(e) {
        googleTracking.tracker = e
    },
    sendTrackEvent: function(e, a) {
        arguments.length < 3 && ga("send", "event", e, a)
    }
};

function loadCSS(e) {
    var a, o, r;
    a = document, o = a.createElement("LINK"), r = a.getElementsByTagName("LINK")[0], o.href = e, o.rel = "stylesheet", r.parentNode.insertBefore(o, r)
}
googleTracking.initialize(ga), $(document).ready(function() {
    $(".donate").click(function() {
        googleTracking.sendTrackEvent("Donate", "Click")
    })
}), loadCSS("css/styles.min.css"), loadCSS("css/vendor/normalize.min.css"), loadCSS("css/vendor/skeleton.min.css"), loadCSS("css/vendor/c3.css"), loadCSS("css/vendor/jquery-ui.min.css"), loadCSS("css/vendor/jquery.comiseo.daterangepicker.css");