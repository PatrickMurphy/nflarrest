*LIBNAME test1 oracle path=DCSPRD user=axm053100 password='' SCHEMA=SYSADM;

*---------------------------------------------------------------------*                                                                     
| LIBRARY                                                             |                                                
|                                                                     |
| SAS MACROS                                                          |
|                                                                     |
|                                                                     |
| FUNCTION                                                            |
|   THIS PROGRAM CREATES CBM001- STUDENT REPORT, WHICH IS SENT TO     |
|   THE THECB IN AUSTIN.  THE COORDINATING BOARD EDITS THE DATA AND   |
|   POSTS THE CB EDIT REPORT ON ITS SERVER FOR ELECTRONIC RETRIEVAL   |
|   BY UTD. THIS PROGRAM ALSO OUTPUT ERROR AND QUESTIONABLE VALUES    |
|   REPORTS, WHICH WILL BE FORWARDED TO ADDMISSION OFFICE FOR FIX/    |
|   REVIEW. IT ALSO PRINT SEVERAL EDITS FOR CHECKING BY OSPA          |                                                      
|                                                                     |
|                                                                     |
|   HEADER AND TRAILER RECORDS ARE ADDED AUTOMATICALLY.               |
|                                                                     |
| APPLICATION SYSTEM                                                  |
|   THECB REPORTING SYSTEM (PUBLIC UNIVERSITIES)                      |
|                                                                     |
| INPUT FILES                                                         |
|   PROGRAM GOES DIRECTLY AGAINST ORACLE DATABASE                     |
|                                                                     |
| PROCESSING (SAS DATA AND PROCEDURE STEPS)                           |
|   ENTER term1, term2,year VALUES BEFORE RUNNING THIS PROGRAM        |
|                                                                     |
| AUTHOR                                                              |
|   ANNA I MOSES, OFFICE OF STRATEGIC PLANNING AND ANALYSIS (OSPA),   | 
|   UNIVERSITY OF TEXAS AT DALLAS,                                    |
|   P.O. BOX. 830688, AD29, RICHARDSON, TX 75083-0688                 |
|                                                                     |
| DATE WRITTEN                                                        |
|  10 /01/2009                                                        |
|                                                                     |
*---------------------------------------------------------------------*;                    
*-----------------------------------------------------------------------------------------------------;


*Proc Pwencode In='';
*Run;

*LIBNAME test1 oracle path=DCSPRD user=axm053100 password='' SCHEMA=SYSADM;
*quit;


*NEED PUT YOUR DATA IN LIBNAME STATEMENT;
LIBNAME test1 oracle path=DCSPRD user= password=" " SCHEMA=SYSADM;
quit;


*ENTER PARMS;
%let term = 2118;*Reporting term(Fall 2010);
%let term1 = 0000;*Previous term for finding flex entry (0000 for Summer!!!!,summer does not have flex entry);
%let year  = 2011;*(Year);
%let TERMCB  = 1; *1-for Fall,2- for Spring, 3- for summer;

*Setting up census date for using it later in a program for regular and flex entry students;
data CensusFind;
set test1.PS_Session_TBL;
keep ACAD_CAREER SESSION_CODE STRM CENSUS_DT;
IF  ACAD_CAREER='GRAD' then output;* There are 2 separate rows for academic career.The only difference one, SESSION_TBL.ACAD_CAREER will be 'GRAD' and for the other it will be 'UGRD',rest data is identica.We need just pick 1 rec; 
run;
*;
proc sort data=CensusFind;
by STRM CENSUS_DT;
RUN;
*;
data CensusFind1;
set CensusFind;
BY STRM;
keep STRM1 RegCensus FeCensusDt CENSUS_DT;
STRM1=STRM;
if STRM="&term" and SESSION_CODE = '1' then RegCensus=CENSUS_DT;*1 is for regular session; 
if STRM="&term1" and last.STRM=1 then FeCensusDt=CENSUS_DT; 
if STRM="&term" and SESSION_CODE = '1' then output;
if STRM="&term1" and last.STRM=1  then output;
run;
*;
proc sort data=CensusFind;
by CENSUS_DT;
run;

PROC PRINT DATA=CensusFind1;
*where ACAD_CAREER='GRAD' and STRM="&term";
*var strm SESSION_CODe CENSUS_DT;
RUN;

*proc contents data=test1.PS_SESSION_TBL;
*run;
*;
*proc contents data= test1.PS_STDNT_ENRL;
*run;
*;
*proc contents data= test1.PS_CLASS_TBL;
*run;
*;
*proc contents data= test1.PS_CLASS_MTG_SE_VW;
*run;
*;
*test1.PS_CLASS_MTG_SE_VW- Another table to consider. EMPLIS should be for student taking course, but need to double check it;
*;
*proc contents data= test1.PS_CRSE_ATTRIBUTES;
*run;
*---------------------------------------------------------------------------------------;
*Working with course attribute "EXCLUDE" to exclude certain courses from reporting to CB;
*---------------------------------------------------------------------------------------;
proc sort data=test1.PS_CLASS_ATTRIBUTE out=Atribt;
by CRSE_ID;
run;
*;
data Atribt1;
set Atribt; 
if CRSE_ATTR='CBRT' and CRSE_ATTR_VALUE='EXCLUDE' then output;
run;
*;
proc sort data=Atribt1;*Final set containing 'EXCLUDE' attribute to merge with main table to delete students that taking those courses;
by CRSE_ID strm;
run;
*;
*data Atribt2;
*set Atribt1;
*by CRSE_ID strm ;
*if last.CRSE_ID =1 then output;
*run; 
*;
* Brining in student's enrollment table;
*data Enrl;
*set test1.PS_STDNT_ENRL;
*run;
*;
*proc sort data= Enrl;
*by EMPLID ENRL_ADD_DT;
*run;
*;
data Enrl;
set test1.PS_STDNT_ENRL;
run;
*;
*proc sort data= Enrl;
*by EMPLID STATUS_DT ENRL_ADD_DT;
*run;
*;
data Enrl1 EnrlFlex;
set Enrl;
if UNT_TAKEN=0 OR GRADING_BASIS_ENRL='AUD' then delete;
if STRM = "&term" and STDNT_ENRL_STATUS='E'  then output Enrl1;
if STRM = "&term1" and STDNT_ENRL_STATUS='E'  then output EnrlFlex;
run;
*;
proc sort data=Enrl1;
by STRM;
run;
*;
*Brining in Courses in wich reported students are enrolled;
data Classtbl;
set test1.PS_CLASS_TBL;
EMPLID1F=EMPLID;
drop EMPLID;*EMPLID on class_tbl are for proffessors teaching courses;
run;
*;
data Classtbla;
set Classtbl;
keep CLASS_NBR STRM START_DT CRSE_ID INSTRUCTION_MODE LOCATION CRSE_OFFER_NBR STRM SESSION_CODE CLASS_SECTION ;
if CLASS_STAT in('A','S') and CLASS_TYPE in ('E','N') then output;*picking active classess;
run;
*;
proc sort data=Classtbla;
by STRM;
run;
*;
data CensusD;
set test1.PS_Session_TBL;
keep ACAD_CAREER SESSION_CODE STRM CENSUS_DT;
IF SESSION_CODE = '1' and ACAD_CAREER='GRAD' then output;* 1 is for regular session and There are 2 separate rows for academic career.The only difference one, SESSION_TBL.ACAD_CAREER will be 'GRAD' and for the other it will be 'UGRD',rest data is identica.We need just pick 1 rec; 
*For summer we have to use SESSION_CODE = 'Z11' !!!!! make sure you change it back in spring and fall;
*IF (SESSION_CODE='Z11' and STRM ="&term" and ACAD_CAREER='GRAD') or (SESSION_CODE='1' and STRM ="&term1" and ACAD_CAREER='GRAD') then output;
run;
*;
proc sort data=CensusD;
by STRM;
run;
*;
data Classtblb;
merge Classtbla(in=x) CensusD(in=y);
by STRM;
if x=1 then output;
run;
*;
*Picking courses and determining Flex entry courses;
data Classtblc ClassFlexE;
set Classtblb;
if STRM ="&term1" and START_DT gt CENSUS_DT then FlexE='1';
if STRM ="&term1" and START_DT gt CENSUS_DT then output ClassFlexE;
if STRM ="&term" and START_DT LE CENSUS_DT then output Classtblc;
run;
*;
*proc print data=Classtblc;
*run;
*;
*from here would need to copy and paste for flex part;
*;
*--------------------------------------------------------------------------------------------------------;
* Picking students that's only enrolled before or on census date for not flex entry once                 ;
*--------------------------------------------------------------------------------------------------------;
data Enrl1a;
merge Enrl1(in=x) CensusD(in=y);
by STRM;
if x=1 then output;
run;
*;
data Enrl2 FlexStudent;
set Enrl1a;
if STRM ="&term" AND ENRL_ADD_DT LE CENSUS_DT AND (ENRL_DROP_DT > CENSUS_DT OR ENRL_DROP_DT="") then output Enrl2;
run;
*--------------------------------------------------------------------------------------------------------;
proc sort data=Enrl2;
by CLASS_NBR STRM SESSION_CODE;
run;
*;
proc sort data=Classtblc;
by CLASS_NBR STRM SESSION_CODE;
run;
*;
data Enrl3;
merge Enrl2(in=x) Classtblc(in=y);*Making sure that we are picking students who are enrolled in only reportable courses, that is why y=1;
by CLASS_NBR STRM SESSION_CODE; 
if y=1 and EMPLID NE "" then output;
run;
*;
* Merging enrollment with Attribute table to delete "EXCLUDE" courses;
proc sort data=Enrl3;
by CRSE_ID;
run;
*;
proc sort data=Atribt1;
by CRSE_ID CLASS_SECTION STRM;*CRSE_OFFER_NBR SESSION_CODE ;
run;
*;

proc sort data=Enrl3;
*by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE ;
by CRSE_ID CLASS_SECTION STRM;
run;
*;
data Enrl4;
merge Enrl3(in=x) Atribt1 (in=y);  
*by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE ;
by CRSE_ID CLASS_SECTION STRM;
if x=1 then output;
run;
*;
data Enrl5;
set Enrl4;
if CRSE_ATTR_VALUE='EXCLUDE' then delete;
run;
*;
proc sort data=Enrl5;
by EMPLID STATUS_DT;
run;
*;
*proc contents data=test1.PS_ADDRESSES;
*run;
*;
data Adress;
set test1.PS_ADDRESSES;
if ADDRESS_TYPE in ('HOME') and EFF_STATUS="A" then output;*"A" is for active status;
run;
*;
proc sort data=Adress;
by EMPLID EFFDT;
run;
*;
data Adress1;
set Adress;
by EMPLID EFFDT;
if last.EMPLID=1 then output;
run;
*;
data Enrl6;*Merging with adress table to exclude students enrolled in online courses only and residing outside Texas;
merge Enrl5(in=x) Adress1 (in=y);
by EMPLID;
if x=1 then output;
run;
*;
*************************************;
*EDIT REPORT                         ;
*************************************;
*WRITING THIS ERROR REPORT OUT;
filename ErrorA 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-Error-HomeAddress.csv';
data _NULL_;
FILE ErrorA DLM=',';
IF _N_=1 THEN DO;
put "Data needs to be fixed. No active Home address is available.";
put "EMPLID";
END;
set Enrl6;
where INSTRUCTION_MODE = '2' AND EFF_STATUS="" ;*going to find missing list of Home addresses where adress is missing or have inactive status of "I";
PUT  EMPLID;
run; 
*------------------------------------------------------------------------------------------------------------------------------------------------------------;
*;
*On 03-30-2010 decission was made to add Residence variable to report or not report distant ed students, logic was added on 03-31-2010;

data ResidX;
set test1.PS_Residency_OFF;
run;
*;
proc sort data=ResidX;
by EMPLID EFFECTIVE_TERM RESIDENCY_DT;
run;
*;
data ResidX1;
set ResidX;
if EFFECTIVE_TERM LE "&term" then output;*DELETING FUTURE EFFECTIVE TERMS;
run;
*;
data ResidX2;
set ResidX1;
keep EMPLID RESIDENCY_DT RESIDENCY;
bY EMPLID;
if last.EMPLID then output;
run;
*;
DATA ENRL6_1;
merge Enrl6(in=x) ResidX2 (in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Enrl7A;
set Enrl6_1;
if INSTRUCTION_MODE = '2' and STATE NE 'TX' AND RESIDENCY NE '1' then NonFResason="OnlineCoursesOnly";* Change made September 2011 in response to Dr Redlinger request;
run;
*;
proc sort data=Enrl7A out=Help1;
by EMPLID NonFResasoN INSTRUCTION_MODE;
run;
*;
data Help2;
set Help1;
by EMPLID;
keep EMPLID INSTRUCTION_MODE1;
INSTRUCTION_MODE1=INSTRUCTION_MODE;
if first.EMPLID then output;*If student is in at least in 1 on campuss class INSTRUCTION_MODE=1 this is going to identify them;
run;
*;
data Enrl7;
merge Enrl7A(in=x) Help2(in=y);
by EMPLID;
if x=1 then do;
if INSTRUCTION_MODE1="1" then NonFResason="";
output;
end;
run;
*;
data Enrl8;
set Enrl7;
keep EMPLID ACAD_CAREER ACAD_PROG CENSUS_DT CLASS_NBR COUNTRY COUNTY CRSE_ATTR CRSE_ATTR_VALUE CRSE_ID EFFDT ENRL_ACTION_LAST ENRL_ADD_DT FlexE LOCATION START_DT
STATE STDNT_ENRL_STATUS STRM NonFResason;
*EmplidFlexEn=EMPLID||FlexE;
by EMPLID STATUS_DT;
if last.EMPLID then output;
run;*Unduplicate enrollment count.; 
*;
*;
*;
*************************************;
*EDIT REPORT                         ;
*************************************;
*WRITING THIS ERROR REPORT OUT;
filename ErrorZ 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-ExcludeStudentsReview.csv';
data test2;
set  Enrl7;
keep EMPLID INSTRUCTION_MODE STATE COUNTRY ACAD_CAREER ACAD_PROG CRSE_ID RESIDENCY NonFResason;
if NonFResason="OnlineCoursesOnly" then output;
*if INSTRUCTION_MODE = '2' AND STATE NE 'TX' and RESIDENCY NE '1' then output;
run;
*;
data _NULL_;
FILE ErrorZ DLM=',';
IF _N_=1 THEN DO;
put "Data needs to be checked.We report those students as nonfunded based that tey are taking online courses only and located outside TX.";
put "EMPLID" "," "INSTRUCTION_MODE" "," "STATE" "," "COUNTRY" "," "ACAD_CAREER" "," "ACAD_PROG" "," "CRSE_ID" "," "RESIDENCY" "," "NonFResason";
END;
set test2;
PUT  EMPLID INSTRUCTION_MODE STATE COUNTRY ACAD_CAREER ACAD_PROG CRSE_ID RESIDENCY NonFResason; 
run; 
*------------------------------------------------------------------------------------------------------------------------------------------------------------;
data testResd;
set enrl7;
keep emplid residency state INSTRUCTION_MODE ADDRESS_TYPE;
if  RESIDENCY = '1' and STATE NE 'TX' and INSTRUCTION_MODE = '2' and ADDRESS_TYPE in ('HOME') then output;
run;
data testResd1;
set testResd;
by emplid;
if last.emplid=1 then output;
run;
filename Errory 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-Residency-HomeStat.csv';
data _NULL_;
FILE Errory DLM=',';
IF _N_=1 THEN DO;
put "Data needs to be checked.Students have Residence=1 (Resident), but their state is not equal TX.";
put "EMPLID" "," "RESIDENCY" "," "STATE" "," "INSTRUCTION_MODE" "," "ADDRESS_TYPE";
END;
set testResd1;
PUT  EMPLID residency state INSTRUCTION_MODE ADDRESS_TYPE; 
run; 
*;
*--------------------------------------------------------------------------------------------------------------------------------------------------------;
* Brining SSN's in. Logic from the speck •	Select NATIONAL_ID from the record PERS_NID OR If does not exist or is ‘999999999’ then go to next step.  ;
* Select EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID  where EXTERNAL_SYSKEY.EXTERNAL_SYSTEM= “CB” ( chosing CB ID from extrernal System_ID table) OR If does not exist then go to next step. ;
* If the value does not exist , then create external system ID by trimming off the first digit of EMPLID, replacing second digit with '9', and keep the last eight EMPLID digits. Go to next step. ;
* Insert row to PS_EXTERNAL_SYSKEY. PS_EXTERNAL_SYSTEM, set column EXTERNAL_SYSTEM = 'CB' and populate EXTERNAL _SYSTEM_ID created in step above. Go to the next step. ;
* Report EXTERNAL _SYSTEM_ID created in step above.
*-----------------------------------------------------------------------------------------------------------------------------------------------------------;
*proc contents data=test1.PS_PERS_NID;
*RUN;
*;
Data SSN;
merge Enrl8 (in=x) test1.PS_PERS_NID (in=y); 
by EMPLID;
if x=1 then output;
run;
*;
*proc contents data=test1.PS_EXTERNAL_SYSTEM;
*run;
*;
data ExternSystID;
set test1.PS_EXTERNAL_SYSTEM;
if EXTERNAL_SYSTEM = 'CB' then output;
run;
*;
proc sort data=ExternSystID;
by EMPLID;
run;
*;

data SSN2A;
merge SSN (IN=X) ExternSystID (in=y);
if x=1 then output; 
by EMPLID;
RUN;
*;
data SSN2B;
set SSN2A;
keep EMPLID NATIONAL_ID1;
if NATIONAL_ID not in ('999999999',"") then NATIONAL_ID1=NATIONAL_ID;
if (NATIONAL_ID in ('999999999',"") AND NATIONAL_ID_TYPE='PR' AND EXTERNAL_SYSTEM = 'CB') then NATIONAL_ID1=EXTERNAL_SYSTEM_ID;
output;
run;
*;
proc sort data=SSN2B nodupkey;
by EMPLID;
run;


PROC FREQ data=Enr19; 
tables national_id1;
run;

*Merging cohort with SSN;
data Enr19; 
merge Enrl8(in=X) SSN2B(in=y);
by EMPLID;
if x=1 then output;
run;
*;
*************************************;
*EDIT                                ;
*************************************;
proc print data=Enr19;
where NATIONAL_ID1 eq "";
var EMPLID NATIONAL_ID1;
title "SSN is missing";
run; 
*WRITING THIS REPORT OUT;
filename ErrorA 'C:\Documents and Settings\axm053100\Desktop\Error\CB1_Error1.csv';
data _NULL_;
FILE ErrorA DLM=',';
IF _N_=1 THEN DO;
put "SSN is missing. External_System_ID was not found either";
put "EMPLID" "," "NATIONAL_ID1";
END;
set Enr19;
where NATIONAL_ID1 eq "";
PUT  EMPLID NATIONAL_ID1;
run; 
*;
*-------------------------------------------------------------------------------------------------------------------------------------;
* WRITING OUT PRELIMINARY ENROLLMENT REPORT                                                                                         ;
*-------------------------------------------------------------------------------------------------------------------------------------;
*WRITING THIS REPORT OUT;
filename Preliml 'C:\Documents and Settings\axm053100\Desktop\Error\cbm001-Enrollment.csv';
data _NULL_;
FILE Preliml;
IF _N_=1 THEN DO;
put "Preliminary Enrollment, No FlexEntry included.";
put "EMPLID" "," "SSN";
END;
set Enr19;
PUT  EMPLID "," NATIONAL_ID1;
run; 
*;
*-------------------------------------------------------------------------------------------------------------------------------------;
* Brining in gender                                                                                                                   :
*-------------------------------------------------------------------------------------------------------------------------------------;
*proc contents data=test1.PS_PERS_DATA_EFFDT ;
*RUN;
proc sort data=test1.PS_PERS_DATA_EFFDT out=GENDER;
by EMPLID EFFDT;
RUN;
*;
data GENDER1;
set GENDER;
keep EMPLID EFFDT SEX; 
by EMPLID EFFDT;
if SEX not in ('M','F') then SEX='X';
if last.EMPLID then output;
run; 
*;
* Merging cohort with gender;
data GenderFinal; 
merge Enr19(in=X) Gender1(in=y);
by EMPLID;
if x=1 then output;
run; 
*;
*************************************;
*EDIT                                ;
*************************************;
proc print data=GenderFinal;
where SEX='X';
var EMPLID SEX;
title "Gender is missing or unknown. Needs to get fixed";
run;
*;
*WRITING THIS REPORT OUT;
filename Error2 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-Error2.csv';
data _NULL_;
FILE Error2 DLM=',';
IF _N_=1 THEN DO;
put "Gender is missing or unknown. Needs to get fixed";
put "EMPLID" "," "SEX";
END;
set GenderFinal;
where SEX='X';
PUT  EMPLID SEX;
run; 
*;
* Gender frequency;
proc freq data=GenderFinal;
table SEX;
title "Gender frequency";
run;

*-----------------------------------------------------------------------------------------------------------------------------------------------;
* Item5- Classification                                                                                                                         ;
*-----------------------------------------------------------------------------------------------------------------------------------------------;
data Classif;
set test1.PS_STDNT_CAR_TERM;
if STRM in ("&term") then output;
run;
*;
proc sort data=Classif;
by EMPLID STRM;
run;
*;
*--------------------------------------------------------------------------------------------------------------------------------------------;
data Classif1; 
set Classif;
Level= ACAD_LEVEL_BOT;
if 	ACAD_LEVEL_BOT='GR' then Level='90';
if 	ACAD_LEVEL_BOT='10' then Level1='1';*1-Freshman to report in Item 5;
if 	ACAD_LEVEL_BOT='20' then Level1='2';*2-Sophmore to report in Item 5;
if 	ACAD_LEVEL_BOT='30' then Level1='3';*3-Juniior to report in Item 5;
if 	ACAD_LEVEL_BOT='40' then Level1='4';*4-Senior to report in Item 5;
if 	ACAD_LEVEL_BOT in ('50','60')then Level1='5';*5-Post-Baccalaureate to report in Item 5;
run;
*;
*change 00-04-2010;
data Progr;
set  test1.PS_ACAD_PROG;
STRM1="&TERM";
run;

proc sort data=Progr;
by STRM1;
RUN;
*;
data Progr1;
merge Progr(in=x) CensusFind1(in=y);
by STRM1;
if x=1 then output;
run;
*;
data ProgfAA;
set Progr1;
ProgRec=EMPLID||ACAD_CAREER||ACAD_PROG||STDNT_CAR_NBR;
*if tdate GE EFFDT1 then output;* deleting future acad_plans;
EFFDT1=EFFDT;
if RegCensus GE EFFDT then output;* deleting future acad_plans;
run;
*;
proc sort data=ProgfAA;
by ProgRec EFFDT EFFSEQ;
run;
*;
data ProgfB;*choosing last reccord for the career;
set ProgfAA;
by ProgRec;
if last.ProgRec=1 then output;
run;

/*
proc print data=ProgfDt;
where emplid="";
run;
*/

data Progf;
*set test1.PS_ACAD_PROG;
set ProgfB;
AcadProgram=EMPLID||ACAD_CAREER||ACAD_PROG||STDNT_CAR_NBR;
if PROG_STATUS="AC" then output;* CHANGE MADE ON 01-12-2009;
run;
*;
data ProgfDt;
set Progf;
if RegCensus GE EFFDT then output;* deleting future acad_plans;
*if tdate GE EFFDT1 then output;* deleting future acad_plans;
run;
*;
proc sort data=ProgfDt;
by AcadProgram EFFDT EFFSEQ;
run;
*;
data Progf1;
set ProgfDt;
by AcadProgram;
if last.AcadProgram=1 then output;
run;
*;
data Progf2;
set Progf1;
if PROG_ACTION in ("COMP","DISC","WADM","DISM","ADRV") then delete;
run;

*;
data Prog;* Getting classification for master's and doctoral students, not defined in ACAD_LEVEL_BOT above;
set Progf2;
if ACAD_PROG ="DOCT" then Highest=5;
if ACAD_PROG = "SPPRO" then Highest=4;
if ACAD_PROG ="MASTR" then Highest=3;
if ACAD_PROG in ("GRAD","CERT","UCERT","UGRD2") then Highest=2;
if ACAD_PROG in ("UGRD","UGNDS") then Highest=1;
if PROG_STATUS="AC" and ADMIT_TERM LE "&term" then output;*AC for active program.then we are going to pick up higherst active one;
AcadProgram=EMPLID||Highest||ACAD_PROG||STDNT_CAR_NBR;
run;
*;
proc sort data=Prog;
*by EMPLID AcadProgram Highest EFFSEQ;
by EMPLID Highest ACAD_PROG EFFSEQ;
run;
*;
data Prog1;
set Prog;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;

data ServIndic;*The service indicator of ‘GDR’ means Doctoral Status Approved.It is another way of identifying doctoral-level students; 
set test1.PS_SRVC_IND_DATA;
if SRVC_IND_CD = 'GDR' and SRVC_IND_ACT_TERM LE "&term" then output;*Fix for flex students later term1!!!!!;
keep EMPLID SRVC_IND_CD SRVC_IND_ACT_TERM;
run; 
*;
proc sort data=ServIndic;
by EMPLID;
run;
*;
*proc contents data=test1.PS_STDNT_ATTR_DTL;
*run;
*;
data StudAtrib;
set test1.PS_STDNT_ATTR_DTL;
run; 
*;
proc sort data=StudAtrib;
by EMPLID EFFDT;
run;
*;
data StudAtrib1;
set StudAtrib;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;

/*

data Progr;
set  test1.PS_ACAD_PROG;
STRM1="&TERM";
run;

proc sort data=Progr;
by STRM1;
RUN;
*;
data Progr1;
merge Progr(in=x) CensusFind1(in=y);
by STRM1;
if x=1 then output;
run;
*;
data ProgfAA;
set Progr1;
ProgRec=EMPLID||ACAD_CAREER||ACAD_PROG||STDNT_CAR_NBR;
*if tdate GE EFFDT1 then output;* deleting future acad_plans;
EFFDT1=EFFDT;
if RegCensus GE EFFDT then output;* deleting future acad_plans;
run;
*/

data AcadPlan_t;
set test1.PS_ACAD_PLAN;
STRM1="&TERM";
run;
*;
proc sort data=AcadPlan_t;
by STRM1;
RUN;
*;
data AcadPlanR;
merge AcadPlan_t(in=x) CensusFind1(in=y);
by STRM1;
if x=1 then output;
run;
*;
data AcadPlan;
set AcadPlanR;
if  RegCensus GE EFFDT then output;* deleting future acad_plans;
run;
*;
data Major;
set test1.PS_ACAD_PLAN_TBL;*brining in this table to distinguish majors from minors. we need to work with student's majors only;
run;
*;
proc sort data=Major;
by ACAD_PLAN EFFDT;
run;
*;
proc sort data=AcadPlan;
by ACAD_PLAN ;
run;
*;
data Major1;
set Major;
keep ACAD_PLAN ACAD_PLAN_TYPE;
by ACAD_PLAN;
if last.ACAD_PLAN=1 then output;
run;
*;
data AcadPlanM;
merge AcadPlan(in=x) Major1(in=y);
by ACAD_PLAN;
if x=1 then output;
run;
*;
data AcadPlanM1;
set AcadPlanM;
if ACAD_PLAN_TYPE="MAJ" then output;
run;
*;
data AcadCareer;
set Prog1;* Brining in Prog1 to find out student's ACAC_CAREER to find out correct AcadPlan;
*keep EMPLID ACAD_CAREER ACAD_CAREERfinal ACAD_PROG Highest;
ACAD_CAREERfinal=ACAD_CAREER;
run;
*;
proc sort data=AcadPlanM1;
by EMPLID ACAD_CAREER STDNT_CAR_NBR EFFDT;
run;
*;
proc sort data=AcadCareer;
by EMPLID ACAD_CAREER STDNT_CAR_NBR EFFDT;
run;
*;
data AcadPlan1;
merge AcadPlanM1(in=x) AcadCareer(in=y);
by EMPLID ACAD_CAREER STDNT_CAR_NBR EFFDT;
if x=1 and y=1 then output;
run;
*;
data AcadPlan2;
set AcadPlan1;
if ACAD_CAREERfinal ne "" then output;
run;
*;
proc sort data=AcadPlan2;
*by EMPLID Highest descending PLAN_SEQUENCE descending STDNT_CAR_NBR EFFSEQ EFFDT;*We need to pick Max of effective sequence, but lowest of PLAN_SEQUENCE;
by EMPLID Highest descending PLAN_SEQUENCE descending STDNT_CAR_NBR EFFDT EFFSEQ ;*This one is according to Jim;
run;
*;
*CHANGED ON 11-24-2009-descending STDNT_CAR_NBR TO match with Jim;
data AcadPlan3;
set AcadPlan2;
by EMPLID;
if last.EMPLID=1 then output;*picking lowerst sequence number-see Item18 in the spec;
run;
*;
data Classif2;
merge Classif1(in=x) Prog1(in=y) ServIndic(in=z) StudAtrib1 (in=t) AcadPlan3 (in=n);
by EMPLID;
if x=1 then output;
run;
*;
*---------------------------------------------------------------------------------------------------;
* Accordint to Jen people with ACAD_PROG="GRAD" are non degree seeking graduate students and should be reported as postbacks. Or if 2 last letters of their ACAD_PLAN="nd"; 
data Classif3;
set Classif2;
AcadPl=substr(ACAD_PLAN,5,2);
if Level='90' then DO;
IF ACAD_PROG in ('MASTR', 'CERT', 'SPEC') then Level1 = '6';
IF ACAD_PROG in ('SPPRO') then Level1 = '8';
END;
IF ACAD_PROG='DOCT' then DO;
IF (ACAD_PROG = 'DOCT' AND STDNT_ATTR='PHD' AND STDNT_ATTR_VALUE='PHM') OR (ACAD_PROG = 'DOCT' AND AcadPl= 'DB' AND SRVC_IND_CD NE 'GDR') THEN Level1="6";
END;
if ACAD_PROG in ('UCERT','UGRD2','GRAD') then Level1 = '5';*5-Post-Baccalaureate to report in Item 5;
run;
*;

data Classif4;
set Classif3;
if (Level='90' AND Level1="") and Level1 ne '5' then  Level1="7";
run; 
*;
data Classif5;
set Classif4;
if ACAD_PROG='UGNDS' then Level1 = '5';*5-Post-Baccalaureate to report in Item 5. According to Jen those conditions override everything;* AND ACAD_PLAN='GRU_ND';
run;
*;
proc sort data=Classif5;
by EMPLID Level1;
run;
*;
data Classif6;*Picking lagest level. Later need to adjust logic for students with different levels!!!!!! HAS TO BE CHANGED LATER;
set Classif5;
by EMPLID;
IF Last.EMPLID then output;
run;
*;
* Merging cohort with Item5-Classification. Level1 is going to be reported in Item5;
data Item5; * Have double classifications;
merge GenderFinal(in=X) Classif6(in=y);
by EMPLID;
if x=1 then output;
run; 
*;
proc print data=Item5;
where Level1="";
var emplid;
run;





*-------------------------------------------------------------------------------------------------------------------------------------;
* Brining in BIRTHDAY                                                                                                                 ;
*-------------------------------------------------------------------------------------------------------------------------------------;
*proc contents data=test1.PS_PERSON;
*RUN;
data BIRTHDAY;
set test1.PS_PERSON;
RUN;
*;

data convert;
 set BIRTHDAY;
 dob=datepart(BIRTHDATE);
format dob mmddyy10. birthdate datetime.;
run;
*;
proc format; *setting format to change date to the CB requirements;
  picture ORADATE
   . = '        '
other='%Y%0m%0d' (datatype=datetime);
run;
*;
data DOB;
set  convert;
format BIRTHDATE oradate.;
run;
*;
*proc print data=DOB(obs=100);
*run;
*;
proc sort data=DOB;
by EMPLID;
run;
*;
data Item6; 
merge Item5(in=X) DOB(in=y);
by EMPLID;
if x=1 then output;
run; 
*;
*;
*;
******************************************************************************************************************************;
*EDIT REPORTS WERE REQUESTED BY DR REDLINGER FOR CONFIRMATION REGARDING DOCTORAL STUDENTS AND DIFFERENT CLASSIFICATION LEVELS ;
******************************************************************************************************************************;
*;
*WRITING THIS REPORT OUT;
filename ClassLev 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-PHM.csv';
data _NULL_;
FILE ClassLev DLM=',';
IF _N_=1 THEN DO;
put "PHD students that have PHM student attribute and will be reported as master students. Needs to be reviewed";
put "EMPLID" "," "ACAD_PROG" "," "STDNT_ATTR_VALUE" "," "Level1";
END;
set Item5;
where ACAD_PROG = 'DOCT' AND STDNT_ATTR='PHD' AND STDNT_ATTR_VALUE='PHM';
PUT  EMPLID ACAD_PROG STDNT_ATTR_VALUE Level1;
run; 
*;
*;

*-----------------------------------------------------------------------------------------------------------------------------------------------;
* Item7- Tuition status                                                                                                                         ;
*-----------------------------------------------------------------------------------------------------------------------------------------------;
data Item7;
set test1.PS_ITEM_SF;
keep EMPLID ITEM_TERM ITEM_AMT WAIVER_CODE BILLING_CAREER ITEM_TERM;
if  ITEM_TERM in ("&term") and EMPLID NE "" then output;
run;
*;
proc sort data=Item7;
by EMPLID;
run;
*;
data Resid;
set test1.PS_Residency_OFF;
run;
*;
proc sort data=Resid;
by EMPLID EFFECTIVE_TERM RESIDENCY_DT;
run;
*;
data ResidZ;
set Resid;
if EFFECTIVE_TERM LE "&term" then output;*DELETING FUTURE EFFECTIVE TERMS;
run;
*;
data ResidOff;
set ResidZ;
keep EMPLID RESIDENCY_DT RESIDENCY ADMISSION_EXCPT;* ACAD_CAREER;
bY EMPLID;
if last.EMPLID then output;
run;
*;
data Item7a;
merge Item7(in=x) ResidOff(in=y);
by EMPLID;
if y=1 then output;
run;
*Merging with cohort to make sure we pick correct logic for acad career;
data Item7b;
keep EMPLID Residency WAIVER_CODE ITEM_AMT ADMISSION_EXCPT; 
merge Item5 (in=x) Item7a(in=y);
by EMPLID;
if BILLING_CAREER NE "" then do;
if x=1 and  BILLING_CAREER=ACAD_CAREER then output;
end;
if BILLING_CAREER eq "" then do;
if x=1 then output;
end;
run;
*;
*Picking Residents, then will need to distinguish between resident tuition regular and Tuition exemption for TX resident;
data Item7c;*first part of residency logic;
set Item7b;
keep EMPLID Residency WAIVER_CODE Waver ITEM_AMT ADMISSION_EXCPT; 
Waver=substr(WAIVER_CODE,1,1);
If Residency='1' and ADMISSION_EXCPT not in ('1403A','1528A','1403C','1528C' )then output;
run;
*;
data Item7e;
set Item7c;
Waver=substr(WAIVER_CODE,1,1);
if Waver='3' then output;
run;
*;
data Item7f;*going to sum ITEM_AMT;
set Item7e;
by EMPLID;
if first.EMPLID=1 then SummAmt=0;
SummAmt + ITEM_AMT;
if last.EMPLID=1 then output;
run;
*;
data Item7g;
set Item7f;
if SummAmt<0 then Item7="3";*Item 7 is going to be reported as Tuition exemption for TX residents;
if SummAmt<0 then output;
run;
*;
data Item7j;*Merging Tuition exemption for residents with rest of residents;
merge Item7c(in=x) Item7g(in=y);
by EMPLID;
if x=1 and y=0 then Item7='1';*Resident tution;
if x=1 then output;
run; 
*;
data Item7k;*Students with tuition status 1 and 3;
set Item7j;
keep EMPLID Residency WAIVER_CODE Item7 ADMISSION_EXCPT Waver; 
by EMPLID;
if first.EMPLID=1 then output;*picking 1 student per record.;
run;
* Going to find out students with tuition=F-100 miles waiver;
data Item7_F_code Item7_E_code Item7_A_code Item7_C_code Item7_N_code;*first part of residency logic;
set Item7b;
if substr(WAIVER_CODE,1,4)='E100' then output Item7_F_code;
else if (substr(WAIVER_CODE,1,1)='E' and substr(WAIVER_CODE,1,4)NE 'E100') then output Item7_E_code;
else if ADMISSION_EXCPT IN ('1403A','1528A')then do;
Item7='A';
output Item7_A_code;*All A tution students;
end;
else if ADMISSION_EXCPT IN ('1403C','1528C')then do;
Item7='C';
output Item7_C_code;*All C tution students;
end;
else if ADMISSION_EXCPT="DISAS" then do;
Item7='N';
output Item7_N_code;*All N tution students- SHOULD NOT HAVE ANY FOR NOW;
end;
run;
*;
* Going to Assign F code if applicable;
data Item7_F_code_a;
set Item7_F_code;
by EMPLID;
if first.EMPLID=1 then SummAmt=0;
SummAmt + ITEM_AMT;
if last.EMPLID=1 then output;
run;
*;
data Item7_F_code_b;
set Item7_F_code_a;
keep EMPLID Residency SummAmt WAIVER_CODE Item7 ADMISSION_EXCPT; 
if SummAmt<0 then Item7="F";*Item 7 is going to be reported as Tuition exemption for TX residents;
if SummAmt<0 then output;
run;
*;
data  Item7_F_code_c;*Going to keep only one student per file;
set Item7_F_code_b;
by EMPLID;
if first.EMPLID=1 then output;
run;
* Going to Assign E code if applicable;
data Item7_E_code_a;
set Item7_E_code;
by EMPLID;
if first.EMPLID=1 then SummAmt=0;
SummAmt + ITEM_AMT;
if last.EMPLID=1 then output;
run;
*;
data Item7_E_code_b;
set Item7_E_code_a;
keep EMPLID Residency SummAmt WAIVER_CODE Item7 ADMISSION_EXCPT ITEM_AMT; 
if SummAmt<0 then Item7="E";*Item 7 is going to be reported as Tuition exemption for TX residents;
if SummAmt<0 then output;
run;
*;
data Item7_E_code_c;
set Item7_E_code_b;
by EMPLID;
if first.EMPLID=1 then output;
run;
*Going to set A code file;
data Item7_A_code_a;
set Item7_A_code;
keep EMPLID Residency WAIVER_CODE Item7 ADMISSION_EXCPT; 
by EMPLID;
if first.EMPLID=1 then output;*Keeping one student per file;
run;
*;
*Going to set C code file;
data Item7_C_code_a;
set Item7_C_code;
keep EMPLID Residency WAIVER_CODE Item7 ADMISSION_EXCPT; 
by EMPLID;
if first.EMPLID=1 then output;*Keeping one student per file;
run;
*;
*Going to set N code file;
data Item7_N_code_a;
set Item7_N_code;
keep EMPLID Residency WAIVER_CODE Item7; 
by EMPLID;
if first.EMPLID=1 then output;*Keeping one student per file;
run;
* Going to concantinate all files for which we determined tuition status for;
data Item7F;
set Item7k Item7_F_code_c Item7_E_code_c Item7_A_code_a Item7_C_code_a Item7_N_code_a;
run;
* Going to merge with cohort file;
proc sort data=Item7F;
by EMPLID descending Item7;* descending Item 7 will allow us to pick letter versus number to report correctly, example E versus 1;
run;
*;
data Item7v;
set Item7F;
by EMPLID ;
if first.EMPLID=1 then output; *picking one record per person. need make sure it picks correct reccord;
run;
*;
data Item7Fl;
merge Item6(in=x) Item7v(in=y);
by EMPLID;
if x=1 and y=0 then Item7="2";
if x=1 then output;
run;
/*
*-----------------------------------------------;
* Printing tuition for Sharell's office review  ;
*-----------------------------------------------;
*proc print data=Item7Fl(obs=100);
*var EMPLID Item7;
*run;
*WRITING THIS REPORT OUT;
filename Errort 'C:\Documents and Settings\axm053100\Desktop\Error\TuitionStatusReview.csv';
data _NULL_;
FILE Errort DLM=',';
IF _N_=1 THEN DO;
put "Please review tuition status.";
put "EMPLID" "," "Item7" ;
END;
set Item7Fl;
PUT EMPLID Item7;
run;
*/ 
*------------------------------------------------------------------------------------------;
/*
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Dr Redlinger request to produce statistics InState/Out of State by Classifcation Level(Freshman, Sophmore, Junior, Senior)                                    ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data ClassLevel;
set Enr22; *final enrollment after classification establish, change name of the temp file later;
Class_Level=Level1;
keep EMPLID Class_Level;
run;
data PrelimInOutState3;
set PrelimInOutState2;
keep EMPLID TXRes;
run;
*;
data ClassByResid;
merge ClassLevel(in=x) PrelimInOutState3(in=y);
by EMPLID;
RUN;
*;
proc freq data=ClassByResid;
table Class_Level*TXRes;
title "Classification level by InState/Out of State frequency";
run;
*/
/*
*Part for the Preliminary enrollment count where we have to distinguish between TX and not TX residents- In-State or Others in the Report to CB;
proc print data=test1.PS_RESIDENCY_OFF (obs=10);
run;
data PrelimInOutState;
set test1.PS_RESIDENCY_OFF;
run;
*;
proc sort data=PrelimInOutState nodup;
by EMPLID  RESIDENCY_DT;
run;
*;
data PrelimInOutState1;
set PrelimInOutState;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
data PrelimInOutState1;
merge Enr20(in=x) PrelimInOutState1 (in=y);
by EMPLID;
if x=1 then output;
RUN;
*;
data PrelimInOutState2;
set PrelimInOutState1;
if COUNTY NE ''  THEN TXRes='Y';*TX resident;
else TXRes='N';
run;
*;
*proc print data= PrelimInOutState2(obs=1000);
*var emplid COUNTY country TXRes;
*run;
*;
proc freq data=PrelimInOutState2;
table TXRes;
title "Frequency for Resident/NotResident for Preliminary Hedcount Enrollment report to THECB";
run;
*;*/
*----------------------------------------------------------------------------------------------------------------------------------------------------;
* Brining in residency                                                                                                                               ;
* Not completed due to issue with EFFECTIVE_TERM=ADMIT_TERM.According to Alison this is data issue,admissions will need to fix that                  ;  
* Residency1 value is one that is going to be reported to the CB                                                                                     ;
*----------------------------------------------------------------------------------------------------------------------------------------------------; 
*proc contents data=test1.PS_RESIDENCY_OFF ;
*RUN;
*proc print data= test1.PS_RESIDENCY_OFF (obs=150);
*var EMPLID RESIDENCY EFFECTIVE_TERM;
*RUN;
*;
data Application;
set test1.PS_ADM_APPL_PROG;
Applic=EMPLID||ACAD_CAREER||ACTION_DT;
if ADMIT_TERM GT "&term" then delete;*deleting applications for future terms;
run;
*;
proc sort data=Application;
by Applic EFFSEQ;
run;
*;
data Application1;
set Application;
keep EMPLID ACAD_CAREER ADMIT_TERM;
by Applic;
if last.Applic=1 then output;*picking latest entry per day per student;
run;
*;
data InAPLtbl;
merge Item6 (in=x) Application1(in=y);*test1.PS_ADM_APPL_PROG(in=y);
by EMPLID ACAD_CAREER;
if x=1 and y=1 then output; *determining students who have their application in the People Soft;
run;
*;
data NotInAPLtbl;
merge Item6 (in=x) Application1(in=y);*test1.PS_ADM_APPL_PROG(in=y);
by EMPLID ACAD_CAREER;
if x=1 and y=0 then output; *determining students who don't have their application in the People Soft;
run;
*;
* Finding out Residency for people that have their aplication data in the People Soft;

data InAPLtbl1;
set InAPLtbl;
keep EMPLID ADMIT_TERM ACAD_CAREER;
run;
*;
data Item8;
merge InAPLtbl1 (in=x) test1.PS_RESIDENCY_OFF (in=y);
by EMPLID ACAD_CAREER;
if x=1 then output;
run;
*;
data Item8a;
set Item8;
if ADMIT_TERM LE EFFECTIVE_TERM then output;* Should be equal to effective_term and not less that equal, but we are using this to be able to work with data;
run;
*;
proc sort data=Item8a;
by EMPLID;
run;
*;
data Item8b;
set Item8a;
by EMPLID;
*if last.EMPLID=1 then output;
run;
*;
proc sort data=Item8b;
by EMPLID ACAD_CAREER descending EFFECTIVE_TERM ;
run;
*;
data Item8cA; *Merging with cohort;
merge Item6 (in=x) Item8b (in=y);
by EMPLID ACAD_CAREER;
IF x=1 and y=1 then output;
run;
*;
proc sort data=Item8cA;
by EMPLID  EFFECTIVE_TERM RESIDENCY_DT;
run;
*;
data Item8c;
set Item8cA;
by EMPLID;
if first.EMPLID=1 then output;* picking earliest date residency for applicant;
run;
*;
*--------------------------------------------------------------------------------------------------------------------------------------------;
* for students who don't have their application data in the People Soft we are going to pick up earliest Residency row                       ;
*--------------------------------------------------------------------------------------------------------------------------------------------;
data NotInAPLtbl1;
set NotInAPLtbl;
keep EMPLID ACAD_CAREER;
run;
*;
data Item8Add;
merge NotInAPLtbl1 (in=x) test1.PS_RESIDENCY_OFF (in=y);
by EMPLID ACAD_CAREER;
if x=1 then output;
run;
*;
data Item8Addx;
set Item8Add;
Flag=EMPLID||ACAD_CAREER;
run;
*;
proc sort data=Item8Addx;
*by EMPLID EFFECTIVE_TERM ACAD_CAREER;
by Flag EFFECTIVE_TERM;
run;
*;
data Item8Add1;
set Item8Addx;
drop FLAG;
by Flag;
if first.Flag then output;*Picking first row -earlierst Residency  for career in the People Soft for students who don't have application data in the People Soft, but in legacy system;
*by EMPLID;
*if first.EMPLID then output;* Picking first row -earlierst Residency in the People Soft for students who don't have application data in the People Soft, but in legacy system;
run;
*;
proc sort data=Item8Addx;
by EMPLID ACAD_CAREER;
run;

data Item8Add2; *Merging with cohort;
merge Item6 (in=x) Item8Add1 (in=y);
by EMPLID ACAD_CAREER;
IF x=1 and y=1 then output;
run;
*;
data Item8ABCD;* Both sets of data together;
set Item8c Item8Add2;
run;
*;
data Item8d;
set Item8ABCD;
run; 
*;
/*
*;
*Part for the Preliminary enrollment count where we have to distinguish between TX and not TX residents- In-State or Others in the Report to CB;
data ResidentNot;
set Item8e;
if COUNTY NE ''  THEN TXRes='Y';*TX resident;
else TXRes='N';
run;
*;
proc freq data=ResidentNot;
table TXRes;
title "Frequency for Resident/NotResident for Preliminary Hedcount Enrollment report to THECB";
run;*/
*----------------------------------------------------------------------------------------------------------------------------------------------;
data Code1 Code2 Code3;*have extra records due to the data inconsistancy!;
set Item8d; 
COUNTY1= substr(COUNTY,1,3);
if  COUNTY NE ''  THEN RESIDENCY1=COUNTY1;*RESIDENCY1 is going to be reported to CB;
if COUNTY NE ''  THEN output Code1;*TX resident;
if (COUNTRY = "USA"  AND COUNTY EQ " ") or (STATE NE "TX" and STATE NE "") THEN output Code2;*Out-of-State resident;
if COUNTRY NE "USA" and COUNTY="" and STATE = "" THEN output Code3;*Foreign country citizen;	
RUN; 
*;
data Code1A;
set Code1;
keep EMPLID RESIDENCY1 acad_career ADMIT_TERM STATE COUNTRY COUNTY1;* UTZ_CC_THECB_CD;
run;
*;
proc sort data=Code2;
by STATE;
run;
*;
Data Code2A;
merge Code2 (in=x) 	test1.PS_UTZ_CC_CB_STATE (in=y);
by STATE;
if x=1 then output;
run;
*;
Data Code2B;
set Code2A;
RESIDENCY1=UTZ_CC_THECB_CD;
keep EMPLID RESIDENCY1 acad_career ADMIT_TERM STATE COUNTRY;*UTZ_CC_THECB_CD;*Residency1 is variable to be reported to CB;
run;
*;
proc sort data=Code2B;
by EMPLID;
run;
*;
proc sort data=Code3;
by COUNTRY;
run;
*;
Data Code3A;
merge Code3 (in=x) 	test1.PS_UTZ_CC_CB_CNTRY (in=y);
by COUNTRY;
if x=1 then output;
run;
*;
proc print data=test1.PS_UTZ_CC_CB_CNTRY(obs=1);
where country="KOR";
run;
*;
proc print data=test1.PS_UTZ_CC_CB_STATE;
where state="NC";
run;
*;
Data Code3B;
set Code3A;
RESIDENCY1=UTZ_CC_THECB_CD;
keep EMPLID RESIDENCY1 acad_career STATE COUNTRY;* UTZ_CC_THECB_CD;
run;
proc sort data=Code3B;
by EMPLID;
run;
*;
data Item8f;	*concantinating;
set Code1A Code2B Code3B;
run;
*;
proc sort data=Item8f nodupkey;
by EMPLID acad_career;
run;
*;
data Item8Final; 
merge Item7Fl(in=X) Item8f(in=y);
by EMPLID;* acad_career; 
if x=1 then do;
if EMPLID="2010413261" then RESIDENCY1="580";*temprorary fix;
output;
end;
run; 


*************************************;
*EDIT                                ;
*************************************;
proc print data=Item8Final;
where RESIDENCY1="";
var EMPLID RESIDENCY1;
title "Residency is missing";
run;
*;
*WRITING THIS REPORT OUT;
filename Error3 'C:\Documents and Settings\axm053100\Desktop\Error\CB1_Error3.csv';
data _NULL_;
FILE Error3 DLM=',';
IF _N_=1 THEN DO;
put "Residency is missing";
put "EMPLID" "," "RESIDENCY1";
END; 
set Item8Final;
where RESIDENCY1="";
PUT  EMPLID LAST_NAME FIRST_NAME RESIDENCY1;
run; 
*;
*/
* Saving temp vile as CSV;
/*filename output1 'C:\Documents and Settings\axm053100\Desktop\Enroll.csv';
data _NULL_;
FILE OUTPUT1 DLM=',';
set Enr22;
PUT  EMPLID	ACAD_PLAN ACAD_PROG ACAD_LEVEL_BOT ENRL_ADD_DT STRM LEVEL1;
run; 
*/

*---------------------------------------------------------------------------------------------------------------------------------------------------------------------;
* ITEM9- TRANSFER STUDENT OR FIRST TIME IN COLLEDGE;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item9;
set test1.PS_STDNT_ENRL;
keep EMPLID ACAD_CAREER TESTVAR STRM;
TESTVAR=EMPLID||ACAD_CAREER;
run;
*;
proc sort data=Item9;
by TESTVAR STRM;
run;
*;
data Item9a;* This is list of been first time at UTD;
set Item9;
STRMFT=STRM;
by TESTVAR;
if first.TESTVAR=1 and STRMFT in ("&term") then output;*STDNT_ENRL- if min enrollment term =reporting term then first time and also check career;
run;
*;
data Item9b;*Merged with cohort. In this list students for whom TESTVAR NE "" are first time at UTD;
*merge Enrl8 (in=x) Item9a (in=y);
merge Item8Final(in=x) Item9a (in=y);
by EMPLID ACAD_CAREER;
if x=1  then output;
run;
*;
data AdmitType;
merge test1.PS_ADM_APPL_DATA (in=x) test1.PS_ADM_APPL_PROG (in=y);
by EMPLID ADM_APPL_NBR;
run; 
*;
proc sort data=AdmitType;
by EMPLID EFFDT EFFSEQ;
run;
*;
/*
data Enrl8C;
*set Enrl8;
set Item8Final;
keep EMPLID FlexE;
run;

data AdmitTypex;
merge AdmitType(in=x) Enrl8C(in=y);
by EMPLID;
if x=1 then output;
run;
*;
*/
data AdmitType1;
set AdmitType;
keep EMPLID ADMIT_TERM ACAD_CAREER ADMIT_TYPE ADM_APPL_NBR PROG_STATUS;
if ADMIT_TERM="&term" then output;
run;
*;
data AdmitType2;
set AdmitType1;
by EMPLID;
if last.EMPLID then output;
run;
*;
data Item9c;
merge Item9b (in=x) AdmitType2 (in=y);
by EMPLID ACAD_CAREER;
if x=1 then output;
run;
*;
data Item9d;
set Item9c;
if STRMFT NE "" AND Admit_type in ("FR","NG","CAP") AND Level1 ne "5" then Item9= '000001';*First time for degree level;
run;
*;

*;
*Now we are going to determine transfer students and report their FICE code;
*;
*The FICE code is on the EXT_ORG_TBL_ADM record.  It can be joined to the student's EXT_ACAD_DATA by the EXT_ORG_ID field;


data ExtOrgId;
set test1.PS_EXT_ACAD_DATA;
if  EXT_CAREER NE "HS" then output;*Deleting High Schoole codes since we don't need them for this item;
run;
*;
proc sort data=ExtOrgId;
by EXT_ORG_ID;
run;
*;
data FICE_1;
set test1.PS_EXT_ORG_TBL_ADM;
run;
*;
proc sort data=FICE_1;
by EXT_ORG_ID EFFDT;
run;
*;
data FICE;*brining FICE codes in;
set FICE_1;
by  EXT_ORG_ID;
if LAST.EXT_ORG_ID=1 then output;*picking last updated record,which displays as first row in the table;
run;
*;
*;
*mering 2 tables above to bring in FICE codes;
data ExtOrgId1;
merge ExtOrgId(in=x) FICE(in=y);
by EXT_ORG_ID;
if x=1 then output;
run;
*;
data EXT_ORG_ID2;
set ExtOrgId1;
if FICE_CD NE "" then output;
run;
*;
proc sort data=EXT_ORG_ID2;
by EMPLID TO_DT;*TO_DT variable will help us pick latest school that student attended;
run;
*;
data EXT_ORG_ID3;
set EXT_ORG_ID2;
keep EMPLID EXT_ORG_ID RECEIVED_DT TO_DT FICE_CD;
by EMPLID;
if last.EMPLID then output;
run;
*;
data EXT_ORG_ID4;
merge  Item9d(in=x) EXT_ORG_ID3(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item9f;*need to bring in ADM_APPL_DATA table;
set EXT_ORG_ID4;
if STRMFT in ("&term") and prog_status = 'AC' AND Admit_type in ("TR") then do;*First semester transfer student.NEED FIND OUT FROM TODD WHERE FICE CODE IS LOCATED;
Transfer='Yes';
Item9= FICE_CD;
end;
run;
*;
data Item9e;
set Item9f;
if Transfer='Yes' and Item9="" then Item9="999999";
run;


*;
/*
*Saving temp vile as CSV WITH list of first time in college Undegraduate only students;
filename output1 'C:\Documents and Settings\axm053100\Desktop\FirstinC.csv';
data _NULL_;
FILE OUTPUT1 DLM=',';
set Item9e;
where Item9= '000001' and Level1 in ('1','2','3','4');
PUT  EMPLID Item9 Level1;
run; 
*/
*-------------------------------------------------------------------------------------------------------------------------------------------;
*Item10A- Semester Credit Hour Load,Current Registration on Campus                                                                          ;                                                                                                                           ;
*-------------------------------------------------------------------------------------------------------------------------------------------;
*Enrl7 is temprorary file created in the begining has all reportable courses and students enrolled in them;
data Item10A_1;
set Enrl7;
LocationA=substr(Location,1,1);
if LocationA="0" AND (ENRL_ADD_DT LE CENSUS_DT) and (ENRL_DROP_DT > CENSUS_DT OR ENRL_DROP_DT="") then output;*0 represents main UTD campus location;
*keep EMPLID ACAD_CAREER STRM CLASS_NBR CRSE_CAREER ENRL_STATUS_REASON ENRL_STATUS_REASON ENRL_ADD_DT UNT_TAKEN;
keep EMPLID UNT_TAKEN FlexE;*FlexE='1';
run;

*;
proc sort data=Item10A_1;
by Emplid;
run;

data Item10A_2;*SCHL is going to be variable that we report in Item10A. IF HAVE MORE RECORDS THAT IN INITIAL ENROLLMENT, CHECK FLEX ENTRY,SOME STUDENTS CAN HAVE 2 ENTRIES ON CB1;
set Item10A_1;
by Emplid;
if first.Emplid=1 then SCHL=0;
SCHL + UNT_TAKEN;
if last.Emplid=1 then output;
run;
*;
data  Item10A_final;*merging with final enrollment file;
merge Item9e (in=x)  Item10A_2(in=y);
by Emplid;
if x=1 then output;
run;
*;
*proc print data=Item10A_final1;
*where schl=.;
*run;
*;
data  Item10A_final1;
set Item10A_final;
if SCHL=. then SCHL=0;*For students who don't have any SCHLoad on campus enfoursing value of 0;
run;

*-------------------------------------------------------------------------------------------------------------------------------------------;
*Item10B- Semester Credit Hour Load,Current Registration off Campus                                                                          ;                                                                                                                           ;
*-------------------------------------------------------------------------------------------------------------------------------------------;
*Enrl7 is temprorary file created in the begining has all reportable courses and students enrolled in them;
data Item10B_1;
set Enrl7;
LocationA=substr(Location,1,1);
*EmplidFlexEn=EMPLID||FlexE;
if LocationA NE "0" AND (ENRL_ADD_DT LE CENSUS_DT) and (ENRL_DROP_DT > CENSUS_DT OR ENRL_DROP_DT="") then output;*0 represents main UTD campus location,not 0 is off campus;
*keep EMPLID ACAD_CAREER STRM CLASS_NBR Location LocationA CRSE_CAREER ENRL_STATUS_REASON ENRL_STATUS_REASON ENRL_ADD_DT UNT_TAKEN;
keep EMPLID UNT_TAKEN FlexE LocationA;*FlexE='1';
run;
*;
proc sort data=Item10B_1;
by Emplid;
run;

data Item10B_2;*SCHLoff is going to be variable that we report in Item10B.IF HAVE MORE RECORDS THAT IN INITIAL ENROLLMENT, CHECK FLEX ENTRY,SOME STUDENTS CAN HAVE 2 ENTRIES ON CB1;
set Item10B_1;
by Emplid;
if first.Emplid=1 then SCHLoff=0;
SCHLoff + UNT_TAKEN;
if last.Emplid=1 then output;
run;
*;
data  Item10B_final;*merging with final enrollment file;
merge Item10A_final1 (in=x)  Item10B_2(in=y);
by Emplid;
if x=1 then output;
run;
*;
data  Item10B_final1;
set Item10B_final;
if SCHLoff=. then SCHLoff=0;*For students who don't have any SCHLoad on campus enfoursing value of 0;
run;
*;

*-------------------------------------------------------------------------------------------------------------------------------------------;
*Item11- Doctoral SCH Funded                                                                                                                ;                                                                                                                           ;
*Item19- Doctoral Funding Code                                                                                                              ;
*-------------------------------------------------------------------------------------------------------------------------------------------;
* Note:This could add for additional records for enrollment since-one report record will be created for each unique CIP alternate funding code per student;
* NEED TO ADD CODE WHEN FINISH INTER-INSTITUTIONAL LOGIC;
data Item11;
set Item5;
keep EMPLID DocS level1;
if Level1 in ("7") then do;
DocS="Y";
output;*Outputing list of doctoral students that enrolled;
end;
run;
*;
/*
proc print data=Item11;
var emplid level1;
where emplid="";
title "Doctoral students with 2 CIP funding codes that are going to be reported twice";
run;
*/
*Merging list of doctoral students with table containing all courses;
data Item11A;*Itme11A has all courses that doctoral students are taking;
merge Item11(in=x) Enrl7(in=y);
by EMPLID;
if x=1 then output;
run;
*;
proc sort data=Item11A;
by CRSE_ID;
run;


*Working with CIP codes tables;
data CIPZ;
set test1.PS_CIP_CODE_TBL;
if EFF_STATUS="A" then output;
run;
*;
proc sort data=CIPZ;
by CIP_CODE EFFDT;
run;
*;
data CIP;
*set test1.PS_CIP_CODE_TBL;
set CIPZ;
keep CIP_CODE EFFDT CIP_ALTERNATIVE_CD;
by CIP_CODE;
if last.CIP_CODE then output;
run;
*;
data CRSCIP;
set test1.ps_crse_offer;
run;
*;
proc sort data=CRSCIP;
by CRSE_ID EFFDT;
run;
*;
data CRSCIP1;
set CRSCIP;
keep CRSE_ID CIP_CODE;
BY CRSE_ID;
if last.CRSE_ID then output;
RUN;
proc sort data=CRSCIP1;
by CIP_CODE;
run;
*;
*Merging 2 tables to have altrenative CIP available;
data CIPCode;
merge CRSCIP1 (IN=X) CIP (in=y);
by CIP_CODE;
if y=1 and CRSE_ID ne "" then output;
run;
*;
proc sort data=CIPCode;
by CRSE_ID;
run;
*;
*Going to bring in CIP code for courses;
data Item11B;
merge Item11A(in=X) CIPCode(in=y);
by CRSE_ID;
if x=1 then output;
run;
*;
proc sort data=Item11B nodup;
by CRSE_ID CLASS_SECTION STRM;* CRSE_OFFER_NBR SESSION_CODE;
run;
*;
proc print data=Item11B;
where CIP_CODE ="" or CIP_ALTERNATIVE_CD="";
VAR crse_ID CIP_CODE CIP_ALTERNATIVE_CD;
Title "Error CIP code is missing for following courses. Let Registrar office know.";
RUN;
*;
data CorsToPick;*Need to bring course attributes in to determine course funding;
set test1.PS_CLASS_ATTRIBUTE;
if (CRSE_ATTR='CLVL' and CRSE_ATTR_VALUE='6') or ( CRSE_ATTR='CBRT' and CRSE_ATTR_VALUE in ('NONFUND','UNFUNDED')) then output;
run;
*;
proc sort data=CorsToPick nodupkey;
*by CRSE_ID CLASS_SECTION STRM;*CRSE_OFFER_NBR SESSION_CODE;
by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE CLASS_SECTION;
run;
*;
data Item11BX;
set Item11B;
drop CRSE_ATTR CRSE_ATTR_VALUE;
RUN;
*;
proc sort data=Item11BX;
*by CRSE_ID CLASS_SECTION STRM;*CRSE_OFFER_NBR SESSION_CODE;
by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE CLASS_SECTION;
run;
*;
*Merging atributes table with table above;
data Item11C;
merge Item11BX(in=x) CorsToPick(in=y);
*by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE;
by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE CLASS_SECTION;
if x=1 then output;
run;
*;
data Item11D;
set Item11C;
if CRSE_ATTR='CBRT' and CRSE_ATTR_VALUE in ('NONFUND','UNFUNDED') then delete;
else if CRSE_ATTR='CLVL' and CRSE_ATTR_VALUE='6' then output;*Picking only doctoral funded level courses;
run;
*;
data Item11Da;
set Item11D;
NOdupl=EMPLID||CRSE_ID||CRSE_OFFER_NBR||SESSION_CODE||CLASS_SECTION;
run;
*;
proc sort data=Item11Da;
by NOdupl;
run;
data Item11Dab;
set Item11Da;
by NOdupl;
if first.NOdupl = 1 then output;
run;
*;
proc sort data=Item11Dab;
by EMPLID;
RUN;
*;
*delete SCH for Audiology students. CB sents error when it is counted;
*if ACAD_PROG in ("SPPRO");
*;
data Item11DabNoAud;
set Item11Dab;
if ACAD_PROG in ("SPPRO") then delete;
run;
* Going to summaraize SCH for doctoral students for doctoral funded courses per student;
data Item11f;*SCHd is going to be variable that we report in Item11. IF HAVE MORE RECORDS THAT IN INITIAL ENROLLMENT, we will need to report some PHD students twise;
set Item11DabNoAud;
DROP CRSE_ID;
by EMPLID;
if first.EMPLID=1 then SCHD=0;
SCHD + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item11e1;
set Item11Dab;
CIPFUND=substr(CIP_ALTERNATIVE_CD,12,2);
Item19=CIPFUND;* Item19 to report in Item19;
IDCip=EMPLID||CIPFUND;*if one person in 2 diffr CIP codes fundings,we will need to report him/her twice and report his second record with 0 SCH;
run;
*;
proc sort data=Item11e1;
by IDCip;
run;
* Going to summaraize SCH for doctoral students for doctoral funded courses by each CIP funding code;
data Item11f1;*SCHd is going to be variable that we report in Item11. IF HAVE MORE RECORDS THAT IN INITIAL ENROLLMENT, we will need to report some PHD students twise;
set Item11e1;
keep EMPLID IDCIP CIPFUND SCHD1 Item19;
by IDCip;
if first.IDCip=1 then SCHD1=0;
SCHD1 + UNT_TAKEN;
if last.IDCip=1 then output;
run;
*;
proc sort data=Item11f1;
by EMPLID;
run;
*;
*----------------------------------------------------------------------------------------------------------------------------;
data Item11t;* going to find out list of PHD students that are going to be reported twice due to funding code;
set Item11f1;
by EMPLID;
if first.EMPLID NE 1 then output;
run;
*;
*-------------------------------------------------------------------------------------------------------------------------------;
*Going merge doctoral students with their alternative CIP codes to include second line for students who needs to be reported twice;
data Item11o;
merge Item11f(in=x) Item11f1(in=y);
by EMPLID;
if x=1 then output;
run;
*;
*Going to set up SCH for doctoral students for second line to "0", since that is how it suppose to be reported;
data Item11o1;
set Item11o;
keep emplid level1 CRSE_ATTR_VALUE CRSE_ATTR UNT_TAKEN SCHD1 IDCip Item19;
by EMPLID;
*if first.EMPLID ne 1 then SCHD=0;*setting second line SCH to 0;
run;
*;
proc print data=Item11t;
title "Doctoral students with 2 CIP funding codes that are going to be reported twice";
run;
*;
*Going merge students who have SCH to be reported in Item11 with the cohort;* NEED TO MERGE WITH FINAL PRIOR COHORT NOT Enrl8 TO MAKE iTEM 11E WORK!!!!!!!;
data Item11p;
merge Item10B_final1(in=x) Item11o1(in=y);
by EMPLID;
IF x=1 then output;
run;
*;
data Item11z;
set Item11p;
by EMPLID;
if first.EMPLID NE 1 then do;* we are going to use this for Items10A,10B,16- see manual;
SecondDoc=1;
SCHL=0;*Items10A=0, see manual for second doctoral;
SCHLoff=0;*Items10B=0, see manual for second doctoral;
FlexE='3';*See explanation in the CB manual;
* For second line of doctoral funded courses all SCH bellow have to be "0";
SCHNF=0;
SCHDevNF1=0;
SCHFund=0;
SCHDevFd=0;
Item26=0;
END;
run;
* Going to identify variable to report in Item19;
data Item11q;*final enrollment to report;
set Item11z;
if SCHD1=. then SCHD1=0;
run;
*;
* Going to test data for sum of SCH on campus and off campus greater than Funded Doctoral. That is an error and needs to be adressed;
*Data Audit;
data test1;
set Item11z;
Total=(SCHL + SCHLoff);
run;
*;
PROC PRINT DATA=test1;
where SCHD1 gt total AND Total gt 0;*"0" appears for second line for PHD students with several funding codes;
var emplid SCHD1 total;
run;

*;
*************************************;
*EDIT                                ;
*************************************;
*WRITING THIS REPORT OUT;
filename Err_za1 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-PHD-SCH.csv';
data _NULL_;
FILE Err_za1 DLM=',';
IF _N_=1 THEN DO;
put "Total Funded Doctoral SCH (Item11) are greater than Total sum of on campus and off campus SCH. CHECK SAS PROGRAM FOR AN ERROR! ";
put "EMPLID" "," "TOTAL SCH on and off campus" "," "FUNDED Doctoral SCH Item11" "," "SCH on campus" "," "SCH off campus";
END;
set test1;
if SCHD1 gt total AND Total gt 0;
PUT  EMPLID Total SCHD1 SCHL SCHLoff;
run; 
*;





/*OLD ETHNICITY LOGIC THAT HAS BEEN REPLACED BY NEW ONE
*-------------------------------------------------------------------------------------------------------------------------------------------;
*Ethnicity MACRO                                                                                                                            ;
*Brining ethnicity in                                                                                                                       ;
*-------------------------------------------------------------------------------------------------------------------------------------------;
data Ethnicity;
set test1.ps_divers_ethnic;
run;
*;
data EthnicityDtl;
set test1.ps_ethnicity_dtl;
run;
*;
proc sort data=EthnicityDtl;
by EMPLID;
run;
*;
proc sort data=Ethnicity;
by EMPLID;
run;
*;
data EthnicityDtla;
merge Ethnicity(in=x) EthnicityDtl(in=y);
by EMPLID;
if x=1 or y=1 then output;
run; 
*;
data EthnicityDt2 Latino Left;
set EthnicityDtla;
if ETHNIC_GRP_CD in ("NOTHISPA","INTL") then delete;
if HISP_LATINO="Y" then HL=3;
else do;
*if ETHNIC_GRP_CD="HISPA" then ET=83;*HISPA will be addressed bellow;
if ETHNIC_GRP_CD="BLACK" then ET=72;*First number is for picking weight and second number is a number to report;
if ETHNIC_GRP_CD="AMIND" then ET=65;
if ETHNIC_GRP_CD="ASIAN" then ET=54;
if ETHNIC_GRP_CD="WHITE" then ET=41;
end;
if HISP_LATINO="Y" then output Latino;
if HISP_LATINO NE "Y" and ET in (72,65,54,41) then output EthnicityDt2;
if HISP_LATINO NE "Y" and ET not in (72,65,54,41) then output Left;
run;* merge with rest to find out notspecified, don't go by "NOTSPEC";
*;
*Going  to pick up 1 record for Latino;
proc sort data=Latino;
by EMPLID LASTUPDDTTM;
run;
*;
data Latino1;
set Latino;
keep EMPLID ETHNIC_GRP_CD HISP_LATINO HL ET;
by EMPLID;
if first.EMPLID=1 then output;*deleting duplicates;
run;
*Now if person is not Hispanic we are going to determine one ethnicity if data is available;
data EthnicityDt3;
set EthnicityDt2;
Level=EMPLID||ET;
run;
*;
proc sort data=EthnicityDt3;
by EMPLID Level;
run;
*;
data EthnicityDt4;
set EthnicityDt3;
keep EMPLID ETHNIC_GRP_CD ET;* HL HISP_LATINO;
by EMPLID;
if last.EMPLID=1 then output;*picking highest level for ethnicity to report;
run;
*Determine ethnicity for students who have additional brackage like VIET for ethnicity variable. Later on if student have no other indicators we are going use those to report on;
data Left1;
set Left;
if ETHNIC_GRP_CD="ARG" then ET1=83;**First number is for picking weight and second number is a number to report. 8 is for Hispanic since Hisp overcomes everything;
if ETHNIC_GRP_CD="BRZ" then ET1=83;
if ETHNIC_GRP_CD="CHN" then ET1=54;
if ETHNIC_GRP_CD="COL" then ET1=83;
if ETHNIC_GRP_CD="CUB" then ET1=83;
if ETHNIC_GRP_CD="ELS" then ET1=83;
if ETHNIC_GRP_CD="GUAT" then ET1=83;
if ETHNIC_GRP_CD="HAWAIIAN" then ET1=54;
if ETHNIC_GRP_CD="HISPA" then ET1=83;
if ETHNIC_GRP_CD="HOND" then ET1=83;
if ETHNIC_GRP_CD="IND" then ET1=54;
if ETHNIC_GRP_CD="IRN" then ET1=54;
if ETHNIC_GRP_CD="KOR" then ET1=54;
if ETHNIC_GRP_CD="MEX" then ET1=83;
if ETHNIC_GRP_CD="OASN" then ET1=54;
if ETHNIC_GRP_CD="OSPN" then ET1=83;
if ETHNIC_GRP_CD="PAK" then ET1=54;
if ETHNIC_GRP_CD="PAN" then ET1=83;
if ETHNIC_GRP_CD="PR" then ET1=83;
if ETHNIC_GRP_CD="VEN" then ET1=83;
if ETHNIC_GRP_CD="VIET" then ET1=54;
run;
*;
data Left2;
set Left1;
Level1=EMPLID||ET1;
run;
*;
proc sort data=Left2;
by EMPLID Level1;
run;
*;
data Left3;
set Left2;
keep EMPLID ETHNIC_GRP_CD ET ET1;* HL HISP_LATINO;
by EMPLID;
if last.EMPLID=1 then output;*picking highest level for ethnicity to report;
run;
*Going merge all 4 files and determine the ethnicity we are going to report if there was one that was chosen;
*first going to pick one row for all ethnicity's mentioned in table to determine notspecified/notreported students;
data AllStud;
set EthnicityDtla;
keep EMPLID HISP_LATINO;
run;
*;
proc sort data=AllStud;
by EMPLID descending HISP_LATINO;
run;
*;
data AllStud1;
set AllStud;
by EMPLID;
if first.EMPLID=1 then output;
run;
*Merging all files together;
data AllEth;
merge AllStud1(in=x) Latino1(in=y) EthnicityDt4(in=z) Left3(in=k);
by EMPLID;
if x=1 then output;
run;
*;
data EthnFin1;
set AllEth;
ET=put(ET,8.);
ET1=put(ET1,8.);
if HL=3 then ethn="3";
else if HL NE 3 and ET not in ("",".") then ethn=substr(left(ET),2,1);
else if HL NE 3 and ET in ("",".") and ET1 not in ("",".")  then ethn=substr(left(ET1),2,1);
else if HL NE 3 and ET in ("",".") and ET1 IN ("",".") then ethn="7";
run;
*Merging ethnicity with our cohort;
data Ethnicity3;
merge Item11q(in=x) EthnFin1(in=y);
by EMPLID;
if x=1 then output;
run;
*;
*Brining in visa table to determine international students;
*;
data Visa;
set test1.PS_VISA_PMT_DATA;
tdate=today();*Extracting today's day to compare with effective day on the student's visa;
EFFDT1=datepart(EFFDT);
STATUS_DT1=datepart(STATUS_DT);
format tdate yymmddp10. EFFDT1 yymmddp10. STATUS_DT1 yymmddp10.;
run;
*;
data Visa1;
set Visa;
keep EMPLID  VISA_PERMIT_TYPE EFFDT STATUS_DT;
if tdate GE EFFDT1 and VISA_WRKPMT_STATUS NE "C" and COUNTRY = "USA" then output;
run;
*;
proc sort data=Visa1;
by EMPLID EFFDT STATUS_DT;
run;
*;
data Visa2;
set Visa1;
drop EFFDT STATUS_DT;
by EMPLID;
if last.EMPLID=1 then output;
run;

*Merging our last cohort with visa table to determine international students;
*proc sort data=Ethnicity3;
*by EMPLID;
*run;
*;
data Ethnicity4;
merge Ethnicity3(in=x) Visa2(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Ethnicity5a;
set Ethnicity4;
if visa_permit_type not in ("","LPR","CR","NR","ASY","PP","RE","TPS") then ethn="6";*values of other's than "" and "LPR" were added on 03-31-2010 given by Sharon;
run;
*;
data Ethnicity5;
set Ethnicity5a;
if ethn="" then ethn="7";
run;

proc freq data=Ethnicity5;
tables ethn;
run;

data test;
set Ethnicity5;
keep emplid ethn visa_permit_type;
run;

data test1;
merge test(in=x) EthnicityDtla(in=y);
by EMPLID;
if x=1 then output;
run;


proc sort data=test1;
by descending visa_permit_type ETHNIC_GRP_CD;
run;
*/


/*
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Dr Redlinger request to produce statistics Ethnincity by Classification                                                                                       ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data ClassEthnicity;
merge Item5(in=x) Ethnicity3(in=y);
by EMPLID;
RUN;
*;
proc freq data=ClassEthnicity;
table ETHN*Level1;
title "Ethnicity by Classification level";
run;
*/
/*
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Dr Redlinger request to produce statistics Gender by Classification                                                                                           ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data GenderClass;
merge GenderFinal (in=x) Item5(in=y);
by EMPLID;
RUN;
*;
proc freq data=GenderClass;
table Sex*Level1;
title "Ethnicity by Classification level";
run;
*/


*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item15- SCH Inter-Institutional State-Funded                                                                                                                  ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*GOING TO FINISH WHEN REGISTRAR OFFICE ENTERS THOSE IN. DISCUSSED WITH TODD OCTOBER 2009;
/*SCH are qulify for state funding IF following:
-  Student not active in Student Group="CB3N" (unfunded due to 30H rule)
-  Student not active in Student Group="CB4N" (unfunded due to 40H rule)
-  Student  does not belong to "3-PEAT" (Modification for tracking 3-PEAT is UTZ_R0003 and UTZ_R009 )
-  Student  is not  "Student in Physical education courses that are not allowed for the state funding" (Modification for tracking SCH for students in such courses will be requested. Details to be determined )

Exclude all developmental courses- CLASS_ATTRIBUTE.CRSE_ATTR = 'DVLP' 
      Exclude classes with Course Attribute is CBRT and the Course Attribute Value is 'NONFUND'*/





*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item18- Major Area of consentration                                                                                                                           ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* AcadPlan3- temp file was created earlier, it has all ACAD_PLAN info for the current term;
data CIPAcadPlan;
set test1.PS_ACAD_PLAN_TBL;
run;
*;
proc sort data=CIPAcadPlan;
by ACAD_PLAN EFFDT;
run;
*;
data CIPAcadPl;
set CIPAcadPlan;
by ACAD_PLAN;
if last.ACAD_PLAN then output;
run;
*;
proc sort data=CIPAcadPl;
by CIP_CODE;
run;
*;
data Item18;
merge CIPAcadPl(in=x) CIP(in=y);*temp CIP file was created earlier, has alternative CIP codes needed for reporING;
by CIP_CODE;
if x=1 and y=1 then output;
run;
*;
proc sort data=Item18;
by ACAD_PLAN;
run;
*;
proc sort data=AcadPlan3;
by ACAD_PLAN;
run;
*;
data Item18A;
merge AcadPlan3(in=x) Item18(in=y);*AcadPlan3 was created earlier as a temp file to keep all acad_plan's;
by ACAD_PLAN;
if x=1 then output;
run;
*;
data Item18B;
set Item18A;
cip1=substr(CIP_ALTERNATIVE_CD,1,2);
cip2=substr(CIP_ALTERNATIVE_CD,4,4);
cip3=substr(CIP_ALTERNATIVE_CD,9,2);
Item18=trim(cip1)||trim(cip2)||trim(cip3);
run;*Item18 is going to be reported in Item18;
*;
proc sort data=Item11q;
by EMPLID;
run;
*;
proc sort data=Item18B;
by EMPLID;
RUN;  
*;
data Item18C;
*merge Ethnicity5(in=x) Item18B(in=y);
merge Item11q(in=x) Item18B(in=y);
by EMPLID;
if x=1 then output;
RUN;
*;
proc print data=Item18C(obs=10);
where Item18="";
VAR emplid ACAD_PLAN cip_code CIP_ALTERNATIVE_CD Item18;
title "Item 18 is missing. Please check";
run;
*;
*************************************;
*EDIT REPORT                         ;
*************************************;
*WRITING THIS ERROR REPORT OUT;
filename ErrorA_X 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-Error-Item18.csv';
data _NULL_;
FILE ErrorA_X DLM=',';
IF _N_=1 THEN DO;
put "Item 18- Major area of concentration is missing. Please check.";
put "EMPLID" "," "ACAD_PLAN" "," "CIP_CODE" "," "CIP_ALTERNATIVE_CD" "," "Item18";
END;
set Item18C;
where Item18="";
PUT  EMPLID ACAD_PLAN cip_code CIP_ALTERNATIVE_CD Item18;
run; 

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item20- Tuition ExemptionWaiver Code                                                                                                                          ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*Going to find students that are going to be reported 21 on Item20;
data Item20;
set Item7_E_code;*this temp file was created to determine "E" code for tuition, we are going here to work with the same file;
If substr(WAIVER_CODE,1,4) in ('EMAA', 'EMCE', 'EMHD', 'EMIT', 'EMPT', 'EMST', 'EMSU') then output;
run;
*;
data Item20A;
set Item20;
by EMPLID;
if first.EMPLID=1 then SummAmt=0;
SummAmt + ITEM_AMT;
if last.EMPLID=1 then output;
run;

data Item20B;
set Item20A;
keep EMPLID Item20;
if SummAmt<0 then Item20="21";
if SummAmt<0 then output;
run;
*;
*Going to find students that are going to be reported 01 on Item20;
data Item20_1;
set Item7e;*this temp file was created to determine "3" code for tuition, we are going here to work with the same file;
If substr(WAIVER_CODE,1,4) in ('3HAZ','3MOR','3HZD') then output;
run;
*;
data Item20A_1;
set Item20_1;
by EMPLID;
if first.EMPLID=1 then SummAmt=0;
SummAmt + ITEM_AMT;
if last.EMPLID=1 then output;
run;
*;
data Item20B_1;
set Item20A_1;
keep EMPLID Item20;
if SummAmt<0 then Item20="01";
if SummAmt<0 then output;
run;
*;
*Going to merge with cohort and assign correct Item20F code to report in Item20;
data Item20Fl;
merge Item18C(in=x) Item20B_1 (in=y) Item20B (in=z);
*merge Item7Fl(in=x) Item20B_1 (in=y) Item20B (in=z);
by EMPLID;
if x=1 then output;
run;
*;
data Item20Fla;
set Item20Fl;
if Item7= 'E' and Item20="21" then Item20F="21";*Item20F to be reported in Item20;
if Item7= '3' and Item20="01" then Item20F="01";
run;


*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item21- SCH load Not State Funded (Undegrad and Grad)                                                                                                         ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*Student group information is on the STDNT_GRPS_HIST record.  If the student has been assigned to a student group, they will have a row on this record;
*Enrl7 is temprorary file created in the begining has all reportable courses and students enrolled in them;
data ThreePeat;
*set test1.PS_UTZ_CB_3PEATDEV;*Todd informed us to change to different table name;
set test1.PS_UTD_CB_3PEATDEV;
run;
*;
proc sort data=ThreePeat;
by descending PROCESS_INSTANCE;
run;
*;
data instance;
set ThreePeat;
keep PROCESS_INSTANCE;
run;
*;
data ThreePeat1;
set instance (firstobs=1 obs=1);* Going to pick highest value for PROCESS_INSTANSE;
*KEEP LastInstance;
LastInstance=PROCESS_INSTANCE;
output;
run;
*;
proc sort data=ThreePeat;
by PROCESS_INSTANCE;
run;
*;
data ThreePeat2;
merge ThreePeat(in=x) ThreePeat1(in=y);
by PROCESS_INSTANCE;
if x=1 and PROCESS_INSTANCE=LastInstance then output;
run;
*;
proc sort data=ThreePeat2;
by EMPLID CRSE_ID CLASS_SECTION;
run;
*;
data ThreePeat1A ThreePeat1B;
set ThreePeat2;
if utd_unfn_type='R' then do;
ThrPEAT='Y';*Yes this is 3-Peat;
output ThreePeat1A;*distinguishing between "R" 3-PEAT students and "P"- PE students;
end;
if utd_unfn_type='P' then do;
PEd='Y';* Yes this is Physycal Education student only;
output ThreePeat1B;*we will have to merge one by courses and another one by EMPLID only;
end;
run;
*;
data ThreePeat1AA;
set ThreePeat1A;
keep EMPLID CRSE_ID CLASS_SECTION  ThrPEAT;
run;
*;
data ThreePeat1BB;
set ThreePeat1B;
keep EMPLID PEd;
run;
*;
* 3-Peat table has 3-Peat courses taking 3 or more times, students only enrolled in the PE;
proc sort data=Enrl7;
by EMPLID CRSE_ID CLASS_SECTION;
run;
*;
data Item21;
merge Enrl7 (in=x) ThreePeat1AA(in=y);*Enrl7 has all courses that currently enrolled students are taking;
by EMPLID CRSE_ID CLASS_SECTION;
if x=1 then output;
run;
*;
data Item21A;
merge Item21 (in=x) ThreePeat1BB(in=y);*Enrl7 has all courses that currently enrolled students are taking;
by EMPLID;
if x=1 then output;
run;
*;
*Going to determine nonfunded courses;
*;
data NotFCors;*Need to bring course attributes in to determine course funding;
*set test1.PS_CRSE_ATTRIBUTES;
set test1.PS_CLASS_ATTRIBUTE;
drop CRSE_ATTR_VALUE CRSE_ATTR;
CRSE_ATTR1=CRSE_ATTR;
CRSE_ATTR_VALUE1=CRSE_ATTR_VALUE;
if CRSE_ATTR='CBRT' and CRSE_ATTR_VALUE in ('NONFUND','UNFUNDED') then output;
run;
*;
data NotFCors1;
set NotFCors;
Corse=CRSE_ID||CLASS_SECTION;
run;
*;
proc sort data=NotFCors1;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;* EFFDT;
run;
*;
proc print data=NotFCors(obs=1);
run;





/*
data NotFCors1a;
set NotFCors1;
*drop STRM;
by Corse;*CRSE_ID;
if last.Corse=1 then output;
run;
*;
data NotFCors1ab;
set NotFCors1a;
drop CRSE_OFFER_NBR SESSION_CODE STRM;
run;
*/

proc sort data=Item21A;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
run;
*;
data Item21B;
merge Item21A(in=x) NotFCors1(in=y);
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
if x=1 then output;
run;
*;
data Item21C;
set Item21B;
if CRSE_ATTR1='CBRT' and CRSE_ATTR_VALUE1 in ('NONFUND','UNFUNDED') then Nonfund="Y";*student enrollend in nonfunded course;
if CRSE_ATTR1='CBRT' and CRSE_ATTR_VALUE1 in ('NONFUND','UNFUNDED') then NonFResason="NonF_CRSE_Atribute";*student enrollend in nonfunded course;
run;
*;
Proc sort data=Item21C nodup;
by EMPLID CRSE_ID;
run;


proc print data=test1.PS_STDNT_GRPS_HIST;
where emplid="";
run;

* Determine unfunded students due to the 30 and 45 hour rule;
data Rule45;
set test1.PS_STDNT_GRPS_HIST;
keep EMPLID STDNT_GROUP Rule45;
if STDNT_GROUP in ("CB3N","CB4N") then do;
Rule45="Y";
output;*"CB3N"-30 hour rule,"CB4N"-45 hour rule- Exceeded limit;
end;
run; 
*;
proc sort data=Rule45;
by EMPLID;
run;
*;
proc freq data=Rule45;
table Rule45;
run;

*MERGE WITH Item21B and then count SCH for those students;
data Item21D;
merge Item21C (in=x) Rule45(in=y);  
by EMPLID;
if x=1 then output;
run;
*;
data Item21D1;*eliminate graduate students from the 30-45 hour rule count;
set Item21D;
if (ACAD_CAREER NE "UGRD" AND ACAD_PROG NE "UGRD") then Rule45="";
run;
*;
* Going to summaraize Not funded SCH;
data Item21F;*going to output file with unfunded lines only to count unfunded SCH in the next step;
set Item21D1;
if ThrPEAT='Y' then NonFResason="3-Peat";
if PEd='Y' then NonFResason="PhEducOnly";
if Rule45="Y" then NonFResason="R_30_45";
if ThrPEAT='Y' or PEd='Y' or Nonfund="Y" or Rule45="Y" or NonFResason="OnlineCoursesOnly" then output;
run;
*;
data Item21FL;*SCHNF is going to be variable that we report in Item21;
set Item21F;
by EMPLID;
if first.EMPLID=1 then SCHNF1=0;
SCHNF1 + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item21Final;
set Item21FL;
keep EMPLID SCHNF1 ThrPEAT PEd Nonfund Rule45 NonFResason;
run;
*;
*Mergind data with final enrollment;
data Item21Enra;
merge Item20Fla(in=x) Item21Final(in=y);
by EMPLID;
*if x=1 and y=0 then SCHNF=0; 
if x=1 then output;
run;
*;
data  Item21Enr;
set  Item21Enra;
if SCHNF1 NE . or SCHNF1 NE 0 then SCHNF=SCHNF1;
run;
*;
*-------------------------------------------------------------------------------------------------------------------------------------------------;
* AUDIT REPORT FOR LAST TIME 3-PEAT TABLE WAS RUN                                                                                                 ;
*-------------------------------------------------------------------------------------------------------------------------------------------------;
*WRITING THIS ERROR REPORT OUT;
filename ErrorA7 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-Error-LastRun3PEAT.csv';
data _NULL_;
FILE ErrorA7 DLM=',';
IF _N_=1 THEN DO;
put "Check last day for 3-PEAT table.If by census date old data- request Registrar office to run the table.";
put "PROCESS_INSTANCE" "," "STRM" "," "DATE_LOADED";
END;
set ThreePeat2;
PUT  PROCESS_INSTANCE STRM DATE_LOADED;
run; 

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item22- SCH Developmental Not State Funded                                                                                                                    ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*Enrl7 is temprorary file created in the begining has all reportable courses and students enrolled in them;
data Developm;* Students in the Developmental corses exceeding 18 hours are in the 3-PEAT table marked as a "D";
*set test1.PS_UTZ_CB_3PEATDEV;
set test1.PS_UTD_CB_3PEATDEV;
run;
*;
proc sort data=Developm;
by descending PROCESS_INSTANCE;
run;
*;
data instance;
set Developm;
keep PROCESS_INSTANCE;
run;
*;
data Developm1;
set instance (firstobs=1 obs=1);* Going to pick highest value for PROCESS_INSTANSE;
LastInstance=PROCESS_INSTANCE;
output;
run;
*;
proc sort data= Developm1;
by PROCESS_INSTANCE;
run;
*;
proc sort data=Developm;
by PROCESS_INSTANCE;
run;
*;
data Developm2;
merge Developm (in=x) Developm1(in=y);
if x=1 and PROCESS_INSTANCE=LastInstance then output;
by PROCESS_INSTANCE;
run;
*;
data Developm3;
set Developm2;
if utd_unfn_type='D' then do;*"D" for the students where development hours are greater than 18- makes them unfunded;
DevNotF='Y';*Yes for not been funded;
output;
end;
run;
*;
data Developm4;*This list has all students that appear in 3PEAT table as a students with exceeded developmental hours(greater that 18);
set Developm3;
keep EMPLID DevNotF;
run;
*;
*-------------------------------------------------------------------------------------------------------------------------------------;
*;
data AtrDev;*Going to have list of all courses that consider Developmental in reporting semester;
set test1.PS_CLASS_ATTRIBUTE ;* picking developmental only courses;
keep CRSE_ID CLASS_SECTION STRM CRSE_ATTR_VALUE1 AllDev SESSION_CODE;
CRSE_ATTR_VALUE1=CRSE_ATTR_VALUE;
if STRM="&term" and CRSE_ATTR = "CBRT" and CRSE_ATTR_VALUE="DVLP" THEN AllDev="Y";*AllDev- will stand for all developmental, funded and nonfunded included flag;
if STRM="&term" and CRSE_ATTR = "CBRT" and CRSE_ATTR_VALUE="DVLP" then output;
run;
*;
proc sort data=Enrl7;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
run;
*;
proc sort data=AtrDev;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
run;
*;
data Item_A22;
merge Enrl7 (in=x) AtrDev(in=y);*Enrl7 has all courses that currently enrolled students are taking;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
if x=1 then output;
run;
*;
proc sort data=Item_A22;
by EMPLID;
run;
*;
data Item_B22;
merge Item_A22(in=x) Developm4(in=y);*Going to determine which Developmental courses are unfunded once;
by EMPLID;
if x=1 then output;
run;
*;
* GOING TO OUTPUT ONLY UNFUNDED DEVELOPMENTAL HOURS TO REPORT IN THIS ITEM;
*;
data Item22A;*going output only students who fall in this category of Development courses where SCH greater than 18-become unfunded;
set Item_B22;
if AllDev="Y" and DevNotF='Y' then output;
run; 
*;
Proc print data=Item22A;
var EMPLID DevNotF;
title "Students who fall in the category due to the greater that 18 hours rule.";
run;
*;
*Summarazing all hours for students above to be reported in Item22;
data Item22B;*SCHDevNF is going to be variable that we report in Item22;
set Item22A;
by EMPLID;
if first.EMPLID=1 then SCHDevNF=0;
SCHDevNF + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item22C;
set Item22B;
keep EMPLID DevNotF AllDev SCHDevNF;*SCHDevNF is going to be variable that we report in Item22;
run;
*;
*Merging item above with final enrollment;
data Item22D;
merge Item21Enr(in=x) Item22C(in=y);
by EMPLID;
if x=1 and y=0 then SCHDevNF=0; 
if x=1 then output;
run;
*;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item23- SCH- Inter-institutionall Load NOT state funded                                                                                                       ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*WE WILL NEED TO FINISH THIS ITEM AFTER BRING IN INTER-INSTITUTIONAL DATA. RIGHT NOW REGISTRAR OFFICE HAVE NOT PUT THOSE IN-CONFERMED WITH TODD;




*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item24- SCH Load state funded                                                                                                                                 ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*We are going to merge all courses table with tables that was created to identify nonfunded courses or students and will remove those before counting hours;

data AllDevelopmental;*Etracting only developmental courses funded and nonfunded, since they not get reported in this item. Will delete below.;
set Item_B22;
keep EMPLID CRSE_ID CLASS_SECTION strm AllDev;
if AllDev="Y" then output;
run;

* Goint to merge Item21d1 that has ALL courses with several nonfunded atribbutes attached to it with the Nonfunded Developmental courses;
data NotFunDel;
merge Item21d1(in=x) AllDevelopmental(in=y);
by EMPLID CRSE_ID CLASS_SECTION strm;
run;
*;
data FundedL;
set NotFunDel;
if ThrPEAT='Y' or PEd='Y' or Nonfund="Y" or Rule45="Y" or  AllDev="Y" or NonFResason="OnlineCoursesOnly" then delete;
run;
*;
proc sort data=FundedL;
by EMPLID;
run;
* Going sum Funded SCH by student;
data Item24D;*SCHDevNF is going to be variable that we report in Item24;
set FundedL;
by EMPLID;
if first.EMPLID=1 then SCHFund=0;*SCHFund is going to be reported in the Item24;
SCHFund + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item24E;
set Item24D;
keep EMPLID SCHFund;*SCHFund is going to be variable that we report in Item22;
run;
*;
*Merging item above with final enrollment;
data Item24F;
merge Item22D(in=x) Item24E(in=y);
by EMPLID;
if x=1 and y=0 then SCHFund=0; 
if x=1 then output;
run;
*;
proc means data=Item24F sum;
var SCHFund;
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item25- SCH Developmental state funded                                                                                                                        ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item25;
set Item_B22;
if AllDev="Y" and DevNotF NE 'Y'  then output;
run;
*;
* Going sum Funded Developmental SCH by student;
data Item25C;*SCHDevFd is going to be variable that we report in Item24;
set Item25;
by EMPLID;
if first.EMPLID=1 then SCHDevFd=0;*SCHFund is going to be reported in the Item24;
SCHDevFd + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item25D;
set Item25C;
keep EMPLID SCHDevFd;*SCHDevNF is going to be variable that we report in Item25;
run;
*;
*Merging item above with final enrollment;
data Item25E;
merge Item24F(in=x) Item25D(in=y);
by EMPLID;
if x=1 and y=0 then SCHDevFd=0; 
if x=1 then output;
run;
*;
proc means data=Item25E ;
var SCHDevFd;
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item26- SCH of Undegraduate Degree Program                                                                                                                    ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item26;
set Item25E;
if Level1 in ("3","4") and ACAD_PROG = 'UGNDS' then Item26=120;*nondegree seeking juniors and seniours;
if Level1 in ("3","4") and ACAD_PROG NE 'UGNDS' then Item26=999;*999 is a flag for the DEGREE seeking juniors and seniours.In the next step we going to find out SCH to report for them;
if Level1 in ("3","4") and ACAD_PROG NE 'UGNDS' then Item26X=999;*999 is a flag1 for people with academic program is missing in UTD_SEM_HRS_TBL table. 
                                                                 We are going default them to 120 hours;
run;
*;
proc sort data=Item26;
by ACAD_PLAN;
run;
*;
data Item26Aa;
set test1.PS_UTD_SEM_HRS_TBL;
by ACAD_PLAN;
if last.ACAD_PLAN=1 then output;
run;
*;
data Item26A;
merge Item26(in=x) Item26Aa(in=y);*UTD_SEM_HRS_TBL is a custom UTD modification to track SCH for undegrad programs;
by ACAD_PLAN;
if x=1 then output;
run;
*;
data Item26Ba;
set Item26A;
if Item26= . then Item26=0;
run;
*;
data Item26B;
set Item26Ba;
if Item26=999 then Item26=UTD_SEM_CR_HRS;
if Item26X=999 and UTD_SEM_CR_HRS=. then Item26=120;* 120 is default value;
run;
*;
*-------------------------------------------------------------------------------------------------------;
* DETERMINING MISSING IN ORION DATA                                                                     ;
*-------------------------------------------------------------------------------------------------------;
data Audit;
set Item26B;
if Level1 in ("3","4") and ACAD_PROG ne 'UGNDS' and UTD_SEM_CR_HRS=. then output;
run;
*;
proc sort data=Audit;
by ACAD_PLAN;
run;
*;
proc means data=Audit NOPRINT;
by ACAD_PLAN;
var UTD_SEM_CR_HRS;
output out=Audit1(drop=_TYPE_ _FREQ_) SUM=UTD_SEM_CR_HRS;
run;
*;
proc print data=Audit1;
title "Data for this academic program is missing in UTD_SEM_HRS_TBL table";
run;

*;
*************************************;
*EDIT                                ;
*************************************;
*WRITING THIS REPORT OUT;
filename Error2_z 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-Error_Misg_hrs.csv';
data _NULL_;
FILE Error2_z DLM=',';
IF _N_=1 THEN DO;
put "Data for this academic program is missing in UTD_SEM_HRS_TBL table";
put "ACAD_PLAN" "," "UTD_SEM_CR_HRS";
END;
set Audit1;
PUT  ACAD_PLAN UTD_SEM_CR_HRS;
run; 
*;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item27- Students affected by Undegraduate Funding Limit                                                                                                       ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Determine unfunded students due to the 30 and 45 hour rule;
data Item27;
set test1.PS_STDNT_GRPS_HIST;
keep EMPLID STDNT_GROUP Item27;
if STDNT_GROUP="CB3L" then Item27="2";
if STDNT_GROUP="CB4L" then Item27="1";
if STDNT_GROUP in ("CB3L","CB4L") then OUTPUT;
*Rule45="Y";
*output;*"CB3N"-30 hour rule,"CB4N"-45 hour rule- Exceeded limit;
*end;
run; 
*;
proc sort data=Item27 nodup;
by EMPLID Item27;
run;
*;
data Item27A;
set Item27;
by EMPLID;
if first.EMPLID then output;*When students belong to 2 student groups at the same time, we are going to report 40 hour rule, before reporting 30hour rule.This came from Todd-Registrar office,see email;
run;
*;
*MERGE WITH enrollment;
proc sort data=Item26B;
by EMPLID;
run;
*;
data Item27B;
merge Item26B(in=x) Item27A(in=y);  
by EMPLID;
if x=1 then output;
run;
*;
data Item27C;
set Item27B;
if Item27="" then Item27="0";
if Item27 ne "" and Level1 in ("5","6","7","8") then Item27="0";*For students who was in student groups, but not undegraduate students anymore-defer them back to "0";
run;

*--------------------------------------------------------------------------------------------------------------------;
* Brining in student's name	Item28, Item29, Item30                                                                   ;
*--------------------------------------------------------------------------------------------------------------------;
*proc contents data=test1.PS_NAMES ;
*RUN;
*;
data NAMES;
set test1.PS_NAMES;
if NAME_TYPE = 'PRI' then output;
run;
*;
proc sort data=NAMES;
by EMPLID EFFDT;
RUN;
*;
data NAMES1;
set NAMES;
keep EMPLID EFFDT EFF_STATUS LAST_NAME FIRST_NAME MIDDLE_NAME NAME_TYPE; 
by EMPLID EFFDT;
if last.EMPLID then output;
run; 
*;
data NAMES2; *MERGE NAMES2 AT THE END WITH THE MAIN TABLE;
set NAMES1;
keep EMPLID EFFDT EFF_STATUS LAST_NAME1 FIRST_NAME1 MIDDLE_NAME MI NAME_TYPE;
MI=	substr(MIDDLE_NAME,1,1);
LNAME=LEFT(LAST_NAME);
FNAME=LEFT(FIRST_NAME);
LAST_NAME1=substr(LNAME,1,20);
FIRST_NAME1=substr(FNAME,1,10);
run;
* Merging cohort wiht names;
data ItemNAMES; 
merge Item27C(in=X) NAMES2(in=y);
by EMPLID;
if x=1 then output;
run; 
*;
*************************************;
*EDIT                                ;
*************************************;
proc print data=ItemNAMES;
where LAST_NAME1 eq "" or  FIRST_NAME1 eq "";
var EMPLID LAST_NAME1 FIRST_NAME1;
title "Last and/or first name is missing";
run;
*WRITING THIS REPORT OUT;
filename Error1 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-Error1a.csv';
data _NULL_;
FILE Error1 DLM=',';
IF _N_=1 THEN DO;
put "Last and/or first name is missing.";
put "EMPLID" "," "LAST_NAME" "," "FIRST_NAME";
END;
set ItemNAMES;
where LAST_NAME1 eq "" or  FIRST_NAME1 eq "";
PUT  EMPLID LAST_NAME1 FIRST_NAME1;
run; 
*;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item31- SCH of students enrolled in dual courses                                                                                                              ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data DualC;
set test1.PS_ADM_APPL_PROG;
if ADMIT_TERM in ("&term") and PROG_ACTION = "ADMT" and PROG_REASON = "UAHS" then do;
DualC="Y";
output;
end;
run; 
*;
*Merging data with enrollment to find out students that will be reported this term;
data DualC1;
merge ItemNAMES(in=x) DualC(in=y);
by EMPLID;
if x=1 and DualC="Y" then output;*Outputing only students enrolled in Dual Credit Courses to count their SCH;
run;
*;
* Going sum Funded Developmental SCH by student;
data DualC2;*SCHDual is going to be variable that we report in Item31;
set DualC1;
by EMPLID;
if first.EMPLID=1 then SCHDual=0;*SCHDual is going to be reported in the Item31;
SCHDual + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data DualC3;
set DualC2;
keep EMPLID SCHDual;*SCHDual is going to be variable that we report in Item31;
run;
*;
*Merging item above with final enrollment;
data Item31;
merge ItemNAMES(in=x) DualC3(in=y);
by EMPLID;
if x=1 and y=0 then SCHDual=0; 
if x=1 then output;
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item32- Restricted Program Admission                                                                                                                          ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item32;
set Item31;*Item31 has all information needed for this item;
IF Acad_Plan="AUD_AUD" then Item32="40";
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item33- Non-degree seeking student                                                                                                                            ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item33;
set Item32;*Item5 has all information needed for this item;
If (ACAD_CAREER="UGRD" and ACAD_PROG = "UGNDS") or (ACAD_CAREER = "GRAD" and ACAD_PROG in ("GRAD","CERT","SPEC")) then Item33="1";
else Item33='0';
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item34- Non-disclosure                                                                                                                                        ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item34;
set test1.PS_PERSON_SA;
keep EMPLID FERPA Item34;
IF FERPA="Y" then do;
Item34="2";
output;* Outputing students that put their FERPA restriction as Yes in the system;
end;
run;
*;
proc sort data=Item34 nodup;
by EMPLID;
run;
*;
proc sort data=Item33;
by EMPLID;
run;
*Merging FERPA data with enrollment;
data Item34A;
merge Item33(in=x) Item34(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item34B;
set Item34A;
if Item34="" then Item34="0";
run;
*;
proc freq data=Item34B;
title "FERPA-Item34 frequency";
table Item34;
run; 

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item35- Graduate SCH of seniors within 12 hours of graduation                                                                                                 ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data CumHrs;
set test1.PS_STDNT_CAR_TERM;
keep EMPLID ACAD_CAREER TOT_PASSD_PRGRSS STRM SCHTotal;
SCHTotal=TOT_PASSD_PRGRSS;
if STRM="&term" then output;
run;
*;
data CumHrs_x;
set CumHrs;
if ACAD_CAREER="UGRD" then output;
run;
*;
proc sort data=CumHrs_x;
by EMPLID STRM;
run;
* Going find out sum ALL SCH by student- not for term, but through their history;
data CumHrs1;*SCHDual is going to be variable that we report in Item31;
set CumHrs_x;
keep EMPLID TOT_PASSD_PRGRSS SCHTotal;*TOT_PASSD_PRGRSS- is "Overall student cumulative SCH";
by EMPLID;
if last.EMPLID=1 then output;*SCHTotal is variable to show total SCH taking by student troughtout their history at UTD;
run;
*;
*Mering Cumulative hourse with Enrl7 containing all students and their courses to be reported;
*;
proc sort data=Enrl7;
by EMPLID;
run;
*;
data Item35;
merge Enrl7(in=x) CumHrs1(in=y);
by EMPLID;
if x=1 then output;
run;
*;
proc sort data=Item35;
by CRSE_ID CLASS_SECTION STRM ;
run;
*;
data GradCors;*Outputing attributes for graduate courses;
*set test1.PS_CRSE_ATTRIBUTES;
set test1.PS_CLASS_ATTRIBUTE;
keep CRSE_ID CLASS_SECTION STRM CRSE_ATTR2 CRSE_ATTR_VALUE2 SESSION_CODE;
CRSE_ATTR2=CRSE_ATTR;
CRSE_ATTR_VALUE2=CRSE_ATTR_VALUE;
if CRSE_ATTR='CLVL' and CRSE_ATTR_VALUE in ("5","6") then output;
run;
*;
proc sort data=GradCors;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;* CRSE_OFFER_NBR SESSION_CODE ;
run;
*;
data Item35A;
merge Item35(in=x) GradCors(in=y);
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;*CRSE_OFFER_NBR SESSION_CODE ;
if x=1 then output;
run;
*;
data Item35B;
set Item35A;
if CRSE_ATTR2='CLVL' and CRSE_ATTR_VALUE2 in ("5","6") then do;* and (Item26-TOT_PASSD_PRGRSS) LE 12;
CrsLevel='A';*Graduate level course;
output;
end;
run;
*;
* merging with nonfunded courses to subtract nonfunded hours later;
data Nonfund;
set Item21f;
keep emplid CRSE_ID CLASS_SECTION strm SESSION_CODE;
run;
*;
proc sort data= Nonfund;
by emplid CRSE_ID CLASS_SECTION strm SESSION_CODE;
run;
*;
proc sort data=Item35B;
by emplid CRSE_ID CLASS_SECTION strm SESSION_CODE;
run; 
*;
data GradNonFund;
merge Item35B(in=x) Nonfund(in=y);
by emplid CRSE_ID CLASS_SECTION strm SESSION_CODE;
if x=1 and y=1 then output;
run;
*;
data GradNonFund1;
set GradNonFund;
keep emplid UNT_TAKEN;
run;
*;
*Going to sum nonfunded graduate level hours by student so I could subtract it later;
data GradNonFund2;
set GradNonFund1;
by EMPLID;
if first.EMPLID=1 then Subtract=0;
Subtract + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data GradNonFund3;
set GradNonFund2;
keep EMPLID Subtract;
run;
*-------------------------------------------------------------------------------------------;
proc sort data=Item35B;
by EMPLID;
run;
*Going to sum SCH for Graduate level courses by students;
data Item35C;
set Item35B;
by EMPLID;
if first.EMPLID=1 then Sum35=0;
Sum35 + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item35D;
set Item35C;
keep EMPLID SCHTotal Sum35;*SCHDevNF is going to be variable that we report in Item25;
run;
*;
* Merging back with cohort to determine hours to be reported in Item35;
data Item35E;
merge Item34b(in=x) Item35D (in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item35F;
set Item35E;
if Level1="4" and (Item26 - SCHTotal) LE 12 then Item35=Sum35;
*Else Item35=0;
run;
*;
data Item35FX;
merge Item35F(in=x) GradNonFund3(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item35G;
set Item35FX;
if Subtract= . then Subtract=0;
if Item35= . then Item35=0;
if Item35>0 then SCHFund=SCHFund- (Item35-Subtract);* minus nonfunded hourse;
if Item35>0 then Item35=Item35-Subtract;* Changed on 11-18-2009;
run;
*;

proc means data=Item35G sum;
var Item35;
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item36- High School Code                                                                                                                                      ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item36;
set Item34b;
if Item9 = "000001" and ACAD_CAREER="UGRD" then output;
run;
*;
data StudORGID;
merge test1.PS_ACAD_HISTORY(in=x) test1.PS_EXT_ORG_TBL(in=y) test1.PS_EXT_ORG_TBL_ADM(in=t) test1.PS_EXT_ORG_SRCH(in=p);
by EXT_ORG_ID;
if x=1 then output; 
run;
*;

proc print data=test1.PS_ACAD_HISTORY;
where emplid="2021115501";
run;

proc print data=test1.PS_EXT_ORG_TBL;
where EXT_ORG_ID in ("");
run;


proc print data=test1.PS_EXT_ORG_TBL_ADM;
where EXT_ORG_ID in ("");
run;


proc print data=test1.PS_EXT_ORG_SRCH;
where EXT_ORG_ID in ("");
run;




proc print data=Item36b;
where emplid in ("");
var Item36;
run;






proc sort data=StudORGID;
by EMPLID EFFDT;
RUN;
*;
data StudORGID1;
set StudORGID;
keep EMPLID EXT_ORG_ID OTH_NAME_SORT_SRCH EXT_ORG_TYPE DESCR DESCRSHORT ATP_CD Item36;
if COUNTRY ne 'USA' then Item36="999999";
else Item36=ATP_CD;
if EXT_ORG_TYPE="HS" and  ATP_CD NE "" then output;
run;
*;
data StudORGID2;
set StudORGID1;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
data Item36A;
merge Item36(in=x) StudORGID2(IN=Y);
BY EMPLID;
if x=1 then output;
run;
*;
/*
proc print data=Item36A(obs=3);
title "High school code is missing for following students. Please advise.";
where ATP_CD eq "";
var EMPLID ATP_CD Item36;
run;
*/
*;
*Merging with Cohort;
data Item36B;
merge Item35G(in=x) Item36A(in=y);
by EMPLID;
if x=1 then output;
run;

*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------;
*Reporting ethnicity under new requirements                                                                                                                                   ;
*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------;
*;
*Brining in visa table to determine international students;
*;
/*
PROC PRINT DATA=test1.PS_VISA_PMT_DATA;
WHERE visa_permit_type="AR1";* in ("ASY","PP","RE","TPS");
RUN;
*;
DATA TEST;
SET test1.PS_VISA_PMT_DATA;
KEEP EMPLID K;
WHERE visa_permit_type="AR1";*  in ("ASY","PP","RE","TPS");
K=visa_permit_type;
RUN;
*;
PROC SORT DATA=TEST;
BY EMPLID;
RUN;

DATA VISA1;
MERGE test1.PS_VISA_PMT_DATA(IN=X) TEST(IN=Y);
BY EMPLID;
IF X=1 THEN OUTPUT;
RUN;

DATA VISA2;
SET VISA1;
IF K="AR1" THEN OUTPUT;
RUN;

PROC PRINT DATA=VISA2;
RUN;



data Enrl;
set test1.PS_STDNT_ENRL;
run;
*;
proc sort data=enrl;
by emplid;
run;


data visa3;
merge visa2(in=x) enrl(in=y);
by emplid;
if x=1 and y=1 then output;
run;

proc freq data=visa3;
tables emplid;
run;



proc print data=test1.PS_STDNT_ENRL;
where emplid in ("");
run;


PROC FREQ DATA=TEST;
TABLES STATUS_DT;
RUN;
*;

*/







data Visa;
set test1.PS_VISA_PMT_DATA;
tdate=today();*Extracting today's day to compare with effective day on the student's visa;
EFFDT1=datepart(EFFDT);
STATUS_DT1=datepart(STATUS_DT);
format tdate yymmddp10. EFFDT1 yymmddp10. STATUS_DT1 yymmddp10.;
run;
*;
data Visa1;
set Visa;
keep EMPLID VISA_PERMIT_TYPE EFFDT STATUS_DT;
if tdate GE EFFDT1 and VISA_WRKPMT_STATUS NE "C" and COUNTRY = "USA" and visa_permit_type NE "AR1" then output;*decission to remove AR1 this way made on 06-04-2011 by Nick,Sharon after discussing with Cristen Casey;
run;
*;
proc sort data=Visa1;
by EMPLID EFFDT STATUS_DT;
run;
*;
data Visa2;
set Visa1;
drop EFFDT STATUS_DT;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
data Visa3;
set Visa2;
*if visa_permit_type not in ("","LPR","CR","NR","ASY","PP","RE","TPS") then International="Y";*values of other's than "" and "LPR" were added on 03-31-2010 given by Sharon;
if visa_permit_type not in ("","LPR","CR","NR") then International="Y";*Logic was changed on 06-04-2011 decission-by Nick,Sharon, after CB Note to exclude "ASY","PP","RE","TPS" from international group;
run;
*;
*Brining in ethnicity tables;
data Ethnicity;
set test1.ps_divers_ethnic;
run;
*;
data EthnicityDtl;
set test1.ps_ethnicity_dtl;
run;

/*
data Refused;
set test1.PS_UTZ_AD_APPDATA2;
run;
proc sort data=Refused;
by EMPLID DTTM_STAMP;
run;
data Refused1;
set Refused;
keep EMPLID UTZ_TCA_ETH_GVN;
by EMPLID;
if last.EMPLID=1 then output;
run;
*/
proc sort data=EthnicityDtl;
by EMPLID  LASTUPDDTTM;
run;
*;
proc sort data=Ethnicity;
by EMPLID;
run;
*;
proc sort data=visa3;
by EMPLID;
run;
*;
data EthnicityDtlZ;
merge Ethnicity(in=x) EthnicityDtl(in=y) Visa3(in=p);*Refused1(in=z);
by EMPLID;
if x=1 or y=1 or p=1 then output;
run; 
*;
data EthnicityDtlZf;
set EthnicityDtlZ;
*if ETHNIC_GRP_CD ="INTL" then delete;*old code that we not using any more and we are relying on visa status;
run;
*;
* First will determine if person is Hispanic or Not or Not responded;
data Item38;
set EthnicityDtlZf;
if International="Y" then Item39E="6";
if International="Y" then Item38="3";
else do;
*if UTZ_TCA_ETH_GVN="N" then Item38="3";
if HISP_LATINO in ("","N") and ETHNIC_GRP_CD in ("","NSPEC","INTL") then Item38="3";
else if HISP_LATINO="Y" then Item38="1";
else if ETHNIC_GRP_CD="HISPA" then Item38="1";
else if ETHNIC_GRP_CD in ("ARG","BRZ","COL","CUB","ELS","GUAT","HOND","MEX","OSPN","PAN","PR","VEN") then Item38="1";
else if HISP_LATINO in ("","N") and ETHNIC_GRP_CD not in ("","NSPEC","INTL") then Item38="2";
end;
run;
*;
proc sort data=Item38;
by EMPLID Item38;
run;
*;
data Item38A;* Going merge this data with rest later;
set Item38;
keep EMPLID Item38 visa_permit_type;
by EMPLID;
*if last.EMPLID=1 then output;
if first.EMPLID=1 then output;*if multiple ethnicity need to choose Hispanic first, if Not then not,otherwise will be Unknown since Item18 can only be 1,2 or 3;
run;
*;
data Item39;
set Item38;
if International NE "Y" then do;
if ETHNIC_GRP_CD="BLACK" then Item39B="2";
if ETHNIC_GRP_CD="AMIND" then Item39D="5";
if ETHNIC_GRP_CD="ASIAN" then Item39C="4";
if ETHNIC_GRP_CD="WHITE" then Item39A="1";
if ETHNIC_GRP_CD="CHN" then Item39C="4";
if ETHNIC_GRP_CD="HAWAIIAN" then Item39G="8";
if ETHNIC_GRP_CD="IND" then Item39C="4";
if ETHNIC_GRP_CD="IRN" then Item39C="4";
if ETHNIC_GRP_CD="KOR" then Item39C="4";
if ETHNIC_GRP_CD="OASN" then Item39C="4";
if ETHNIC_GRP_CD="PAK" then Item39C="4";
if ETHNIC_GRP_CD="VIET" then Item39C="4";
if Item38 in ("2","3") and ETHNIC_GRP_CD in ("","NSPEC","INTL") and Item39E NE "6"  then Item39F="7";
end;
run;
*;
*Going to output data into diffrent tables so we could have one line for a student;

data Item39A Item39B Item39C Item39D Item39E Item39F Item39G;
set Item39;
if Item39A="1" then output Item39A;
if Item39B="2" then output Item39B;
if Item39C="4" then output Item39C;
if Item39D="5" then output Item39D;
if Item39E="6" then output Item39E;
if Item39F="7" then output Item39F;
if Item39G="8" then output Item39G;
run;
*;
data Item39Aa;
set Item39A;
keep EMPLID Item39A;
run;
*;
data Item39Aaaa;
set Item39Aa;
by EMPLID;
if last.EMPLID=1 then output;*geting rid of duplicates;
run;
*;
data Item39Bb;
set Item39B;
keep EMPLID Item39B;
run;
*;
data Item39Bbb;
set Item39Bb;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
data Item39Cc;
set Item39C;
keep EMPLID Item39C;
run;
*;
data Item39Ccc;
set Item39Cc;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
data Item39Dd;
set Item39D;
keep EMPLID Item39D;
run;
*;
data Item39Ddd;
set Item39Dd;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
data Item39Ee;
set Item39E;
keep EMPLID Item39E;
run;
*;
data Item39Eee;
set Item39Ee;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
data Item39Ff;
set Item39F;
keep EMPLID Item39F;
run;
*;
data Item39Fff;
set Item39Ff;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
data Item39Gg;
set Item39G;
keep EMPLID Item39G;
run;
*;
data Item39Ggg;
set Item39Gg;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
data Item39Compl;
merge Item38A(in=y) Item39Aaaa(in=a) Item39Bbb(in=b) Item39Ccc(in=c) Item39Ddd(in=d) Item39Eee(in=e) Item39Fff(in=f) Item39Ggg(in=g);
by EMPLID;
if y=1 or a=1 or b=1 or c=1 or d=1 or e=1 or f=1 or g=1 then output;
run;
*;
*Merging with rest of the data;
data Item39ComplA;
merge Item36B(in=x) Item39Compl(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item39ComplAB;
set Item39ComplA;
if Item38="" then Item38="3";
if Item38 not in ("1") and Item39A="" and Item39B="" and Item39C="" and Item39D="" and Item39E="" and Item39F="" and Item39G= "" then Item39F="7";
if Item39F="7" and (Item39A="1" OR Item39B="2" OR Item39C="4" OR Item39D="5" OR Item39E="6" OR Item39G="8") then Item39F="";
/*Per conversation with Sharon decision was reached June 2010 to adjust logic to mach IPEDS where Item39's will be only for non-Hispanics;
if Item38="1" AND (Item39A NE "" OR Item39B NE "" OR Item39C NE "" OR Item39D NE "" OR Item39E NE "" OR Item39F NE "" OR Item39G NE  "" ) then do;
Item39A = "";
Item39B = "";
Item39C = ""; 
Item39D = "";
Item39E = ""; 
Item39F = ""; 
Item39G = "";
end;
*/
* Have to change the logic based on email from state- CB wants Hispanic people who has not chosen race been reported as unknown-7;
if Item38="1" AND (Item39A EQ "" AND Item39B EQ "" AND Item39C EQ "" AND Item39D EQ "" AND Item39E EQ "" AND Item39F EQ "" AND Item39G EQ  "" ) then Item39F="7";
run;
*;
proc contents data=Item39ComplAB;
run;
*;

proc print data=Item39ComplAB;* To mach note from CB we need to mach it;
where Item39E eq "6" and Item7="A";
var Item39E Item7 VISA_PERMIT_TYPE;
run;




*--------------------------------------------------------------------------------------------------------;
* ITEM17- Remote Campuse-UTD starting fall 2010 CAP programs                                             ;
*--------------------------------------------------------------------------------------------------------;
data CAP;
set test1.PS_STDNT_GRPS_HIST;
keep EMPLID STDNT_GROUP EFFDT;
if STDNT_GROUP in ("CAP") AND EFF_STATUS="A" then OUTPUT;
run; 
*;
proc sort data=CAP;
by EMPLID EFFDT;
run;
*;
data CAP1;
set CAP;
keep EMPLID STDNT_GROUP;
drop EFFDT;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
data Item39ComplABC;
merge Item39ComplAB(in=x) CAP1(in=y);
by EMPLID;
drop STDNT_GROUP;
if STDNT_GROUP="CAP" AND Item9="000001" then Item17="6";*and  Item9='000001' was added Fall 2011 due to 
Sharon’s and Nick’s request after the interpreting manual than CAP students here should be reported only once when first time in college;
if x=1 then output;
run;
*;
*--------------------------------------------------------------------------------------------------------;
* Working only with flex entry data                                                                      ;
*--------------------------------------------------------------------------------------------------------;
data FlexStudent;
set EnrlFlex;
if STRM ="&term1" then FlexStudent="Y";
if STRM ="&term1" then output FlexStudent;
run;
*--------------------------------------------------------------------------------------------------------;
proc sort data=FlexStudent;
by CLASS_NBR STRM SESSION_CODE;
run;
*;
proc sort data=ClassFlexE;
by CLASS_NBR STRM SESSION_CODE;
run;
*;
data EnrlFlexE1;
merge FlexStudent(in=x) ClassFlexE(in=y);*Making sure that we are picking students who are enrolled in only reportable courses, that is why y=1;
by CLASS_NBR STRM SESSION_CODE; 
if y=1 and EMPLID NE "" then output;
run;
*;
data EnrlFlexE1A;
set EnrlFlexE1;
if (ENRL_DROP_DT NE . AND ENRL_DROP_DT GT START_DT) OR (ENRL_DROP_DT EQ . )  then output;* for flex entry students-deleting students that dropped before or on start day of a class;
run;
*;
* Merging enrollment with Attribute table to delete "EXCLUDE" courses;


proc sort data=Atribt1;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
run;
*;
proc sort data=EnrlFlexE1A;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
run;
*;
data EnrlFlexE2;
merge EnrlFlexE1A(in=x) Atribt1 (in=y);  
*by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE ;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
if x=1 then output;
run;
*;
data EnrlFlexE3;
set EnrlFlexE2;
if CRSE_ATTR_VALUE='EXCLUDE' then delete;
run;
*;
proc sort data=EnrlFlexE3;
by EMPLID STATUS_DT;
run;
*;
*proc contents data=test1.PS_ADDRESSES;
*run;
*;
data Adress;
set test1.PS_ADDRESSES;
if ADDRESS_TYPE in ('HOME')then output;
run;
*;
proc sort data=Adress;
by EMPLID EFFDT;
run;
*;
data Adress1;
set Adress;
by EMPLID EFFDT;
if last.EMPLID=1 then output;
run;
*;
data ResidX1_FE;
set ResidX;
if EFFECTIVE_TERM LE "&term1" then output;*DELETING FUTURE EFFECTIVE TERMS;
run;
*;
data ResidX2_FE;
set ResidX1_FE;
keep EMPLID RESIDENCY_DT RESIDENCY;
bY EMPLID;
if last.EMPLID then output;
run;
*;
data EnrlFlexE4;*Merging with adress table to exclude students enrolled in online courses only and residing outside Texas;
merge EnrlFlexE3(in=x) Adress1(in=y) ResidX2_FE(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data EnrlFlexE5A;
set EnrlFlexE4;;
if INSTRUCTION_MODE = '2' and STATE NE 'TX' AND RESIDENCY NE '1' then NonFResason="OnlineCoursesOnly";* Change made September 2011 in response to Dr Redlinger request;
run;
*;
proc sort data=EnrlFlexE5A out=Help1_FE;
by EMPLID NonFResasoN INSTRUCTION_MODE;
run;
*;
data Help2_FE;
set Help1_FE;
by EMPLID;
keep EMPLID INSTRUCTION_MODE1;
INSTRUCTION_MODE1=INSTRUCTION_MODE;
if first.EMPLID then output;*If student is in at least in 1 on campuss class INSTRUCTION_MODE=1 this is going to identify them;
run;
*;
data EnrlFlexE5;
merge EnrlFlexE5A(in=x) Help2_FE(in=y);
by EMPLID;
if x=1 then do;
if INSTRUCTION_MODE1="1" then NonFResason="";
output;
end;
run;
*;
*data EnrlFlexE5;*EnrlFlexE5- has all FE courses and students enrolled in them;
*set EnrlFlexE4;
*if INSTRUCTION_MODE = '2' and STATE NE 'TX' AND RESIDENCY NE '1' then NonFResason="OnlineCoursesOnly";
*run;
*;
data EnrlFlexE6;
set EnrlFlexE5;
keep EMPLID ACAD_CAREER ACAD_PROG CENSUS_DT CLASS_NBR COUNTRY COUNTY CRSE_ATTR CRSE_ATTR_VALUE CRSE_ID EFFDT ENRL_ACTION_LAST ENRL_ADD_DT EmplidFlexEn FlexE LOCATION START_DT
STATE STDNT_ENRL_STATUS STRM NonFResason;
EmplidFlexEn=EMPLID||FlexE;
by EMPLID STATUS_DT;
if last.EMPLID then output;
run;*Unduplicate enrollment count for flex entry students; 
*;

*;
*--------------------------------------------------------------------------------------------------------------------------------------------------------;
* Brining SSN's in. Logic from the speck •	Select NATIONAL_ID from the record PERS_NID OR If does not exist or is ‘999999999’ then go to next step.  ;
* Select EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_ID  where EXTERNAL_SYSKEY.EXTERNAL_SYSTEM= “CB” ( chosing CB ID from extrernal System_ID table) OR If does not exist then go to next step. ;
* If the value does not exist , then create external system ID by trimming off the first digit of EMPLID, replacing second digit with '9', and keep the last eight EMPLID digits. Go to next step. ;
* Insert row to PS_EXTERNAL_SYSKEY. PS_EXTERNAL_SYSTEM, set column EXTERNAL_SYSTEM = 'CB' and populate EXTERNAL _SYSTEM_ID created in step above. Go to the next step. ;
* Report EXTERNAL _SYSTEM_ID created in step above.
*-----------------------------------------------------------------------------------------------------------------------------------------------------------;
*proc contents data=test1.PS_PERS_NID;
*RUN;
*;
Data SSNFe;
merge EnrlFlexE6 (in=x) test1.PS_PERS_NID (in=y); 
by EMPLID;
if x=1 then output;
run;
*;
*proc contents data=test1.PS_EXTERNAL_SYSTEM;
*run;
*;
data SSN2AFe;
merge SSNFe (IN=X) ExternSystID (in=y);
if x=1 then output; *and EXTERNAL_SYSTEM = 'CB' then output;
*if x=1 and EXTERNAL_SYSTEM = 'CB' then output;
by EMPLID;
RUN;
*;
data SSN2BFe;
set SSN2AFe;
keep EMPLID NATIONAL_ID1;
if NATIONAL_ID not in ('999999999',"") then NATIONAL_ID1=NATIONAL_ID;
if (NATIONAL_ID in ('999999999',"") AND NATIONAL_ID_TYPE='PR' AND EXTERNAL_SYSTEM = 'CB') then NATIONAL_ID1=EXTERNAL_SYSTEM_ID;
output;
run;
*;
proc sort data=SSN2BFe nodupkey;
by EMPLID;
run;

*Merging cohort with SSN;
data EnrlFlexE7; 
merge EnrlFlexE6(in=X) SSN2BFe(in=y);
by EMPLID;
if x=1 then output;
run;
*;
/*
*-------------------------------------------------------------------------------------------------------------------------------------;
* WRITING OUT PRELIMINARY NODUPLICATES REPORT                                                                                         ;
*-------------------------------------------------------------------------------------------------------------------------------------;
*WRITING THIS REPORT OUT;
filename Preliml 'C:\Documents and Settings\axm053100\Desktop\Enrl.csv';
data _NULL_;
FILE Preliml;
IF _N_=1 THEN DO;
put "Preliminary Enrollment,Fall 2009";
put "EMPLID" "," "SSN";
END;
set Enr19;
PUT  EMPLID "," NATIONAL_ID1;
run; 
*;
*/

*-------------------------------------------------------------------------------------------------------------------------------------;
* Brining in gender for Flex Entry students                                                                                           ;
*-------------------------------------------------------------------------------------------------------------------------------------;
*proc contents data=test1.PS_PERS_DATA_EFFDT ;
*RUN;
proc sort data=test1.PS_PERS_DATA_EFFDT out=GENDER;
by EMPLID EFFDT;
RUN;
*;
data GENDER1Fe;
set GENDER;
keep EMPLID EFFDT SEX; 
by EMPLID EFFDT;
if SEX not in ('M','F') then SEX='X';
if last.EMPLID then output;
run; 
*;
* Merging cohort with gender;
data GenderFinalFe; 
merge EnrlFlexE7(in=X) Gender1Fe(in=y);
by EMPLID;
if x=1 then output;
run; 
*;
*************************************;
*EDIT                                ;
*************************************;
proc print data=GenderFinalFe;
where SEX='X';
var EMPLID SEX;
title "Gender is missing or unknown. Needs to get fixed";
run;
*;
*WRITING THIS REPORT OUT;
filename Error2 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-Error2Fe.csv';
data _NULL_;
FILE Error2 DLM=',';
IF _N_=1 THEN DO;
put "Gender is missing or unknown for Flex Entry Student. Needs to get fixed";
put "EMPLID" "," "SEX";
END;
set GenderFinal;
where SEX='X';
PUT  EMPLID SEX;
run; 
*;
* Gender frequency;
proc freq data=GenderFinalFe;
table SEX;
title "Gender frequency";
run;
*;
*-----------------------------------------------------------------------------------------------------------------------------------------------;
* Item5- Classification for Flex Entry Students                                                                                                 ;
*-----------------------------------------------------------------------------------------------------------------------------------------------;
data ClassifFle;
set test1.PS_STDNT_CAR_TERM;
if STRM in ("&term1") then output;
run;
*;
proc sort data=ClassifFle;
by EMPLID STRM;
run;
*;
*--------------------------------------------------------------------------------------------------------------------------------------------;
data ClassifFle1; 
set ClassifFle;
Level= ACAD_LEVEL_BOT;
if 	ACAD_LEVEL_BOT='GR' then Level='90';
if 	ACAD_LEVEL_BOT='10' then Level1='1';*1-Freshman to report in Item 5;
if 	ACAD_LEVEL_BOT='20' then Level1='2';*2-Sophmore to report in Item 5;
if 	ACAD_LEVEL_BOT='30' then Level1='3';*3-Juniior to report in Item 5;
if 	ACAD_LEVEL_BOT='40' then Level1='4';*4-Senior to report in Item 5;
if 	ACAD_LEVEL_BOT in ('50','60')then Level1='5';*5-Post-Baccalaureate to report in Item 5;
run;
*;
*change 00-04-2010;
data ProgrFle;
set  test1.PS_ACAD_PROG;
STRM1="&TERM1";
run;
*;
proc sort data=ProgrFle;
by STRM1;
RUN;
*;
data ProgrFle1;
merge ProgrFle(in=x) CensusFind1(in=y);
by STRM1;
if x=1 then output;
run;
*;
data ProgrFle1AA;
set ProgrFle1;
ProgRec=EMPLID||ACAD_CAREER||ACAD_PROG||STDNT_CAR_NBR;
*if tdate GE EFFDT1 then output;* deleting future acad_plans;
EFFDT1=EFFDT;
if FeCensusDt GT EFFDT1 then output;* deleting future acad_plans;
run;
*;
proc sort data=ProgrFle1AA;
by ProgRec EFFDT EFFSEQ;
run;
*;
data ProgfFleB;*choosing last reccord for the career;
set ProgrFle1AA;
by ProgRec;
if last.ProgRec=1 then output;
run;

/*
proc print data=ProgfDt;
where emplid="2010166679";
run;
*/
data ProgfFle;
*set test1.PS_ACAD_PROG;
set ProgfFleB;
AcadProgram=EMPLID||ACAD_CAREER||ACAD_PROG||STDNT_CAR_NBR;
if PROG_STATUS in ("AC","CM") and EMPLID NE "2011648121" then output;* had to add "CM" for completed due that some flex students complete programs by the time we report them;
run;
*;
data ProgfDtFle;
set ProgfFle;
if FeCensusDt GT EFFDT1 then output;* deleting future acad_plans;
*if tdate GE EFFDT1 then output;* deleting future acad_plans;
run;
*;
proc sort data=ProgfDtFle;
by AcadProgram EFFDT EFFSEQ;
run;
*;
data ProgfFle1;
set ProgfDtFle;
by AcadProgram;
if last.AcadProgram=1 then output;
run;
*;
data ProgfFle2;
set ProgfFle1;
if PROG_ACTION in ("DISC","WADM","DISM","ADRV")  and EMPLID NE "2011648121" then delete;*we had to remove "COMP" from list due to that some flex entry by time of reporting completed their degree;
run;
*;
data ProgFle;* Getting classification for master's and doctoral students, not defined in ACAD_LEVEL_BOT above;
set ProgfFle2;
if ACAD_PROG ="DOCT" then Highest=5;
if ACAD_PROG = "SPPRO" then Highest=4;
if ACAD_PROG ="MASTR" then Highest=3;
if ACAD_PROG in ("GRAD","CERT","UCERT","UGRD2") then Highest=2;
if ACAD_PROG in ("UGRD","UGNDS") then Highest=1;
if PROG_STATUS in ("AC","CM") and ADMIT_TERM LE "&term1" then output;*AC for active program.CM is for completed for flex enrys.then we are going to pick up higherst active one;
AcadProgram=EMPLID||Highest||ACAD_PROG||STDNT_CAR_NBR;
run;
*;
proc sort data=ProgFle;
*by EMPLID AcadProgram Highest EFFSEQ;
by EMPLID Highest ACAD_PROG EFFSEQ;
run;
*;
data ProgFle1;
set ProgFle;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;

data ServIndicFle;*The service indicator of ‘GDR’ means Doctoral Status Approved.It is another way of identifying doctoral-level students; 
set test1.PS_SRVC_IND_DATA;
if SRVC_IND_CD = 'GDR' and SRVC_IND_ACT_TERM LE "&term1" then output;*Fix for flex students later term1!!!!!;
keep EMPLID SRVC_IND_CD SRVC_IND_ACT_TERM;
run; 
*;
proc sort data=ServIndicFle;
by EMPLID;
run;
*;
*proc contents data=test1.PS_STDNT_ATTR_DTL;
*run;
*;
*;
* Per decission Dr Redlinger and Jim Michaleck changing logic to compare EFFDT of this student attribute with census date 07-02-2010;
data StudAtribAFle;
set test1.PS_STDNT_ATTR_DTL;
STRM1="&TERM1";
run; 
*;
data StudAtribBFle;
merge StudAtribAFle(in=x) CensusFind1(in=y);
by STRM1;
if x=1 then output;
run;
*;
data StudAtribCFle;
set StudAtribBFle;
EFFDT1=EFFDT;
if FeCensusDt GE EFFDT then output;* deleting changes that happenned after census date;
run;
*;
proc sort data=StudAtribCFle;
by EMPLID EFFDT;
run;
*;
data StudAtribFle1;
set StudAtribCFle;
drop INSTITUTION STRM1 SESSION_CODE CENSUS_DT RegCensus FeCensusDt EFFDT1;
by EMPLID;
if last.EMPLID=1 then output;
run;
*-----------------------------------------------------------------------------------------------------;
/*
data StudAtribFle;
set test1.PS_STDNT_ATTR_DTL;
run; 
*;
proc sort data=StudAtribFle;
by EMPLID EFFDT;
run;
*;
data StudAtribFle1;
set StudAtribFle;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;
*/

data AcadPlan_tFle;
set test1.PS_ACAD_PLAN;
STRM1="&TERM1";
run;
*;
proc sort data=AcadPlan_tFle;
by STRM1 EFFDT;
RUN;
*;
data AcadPlanRFle;
merge AcadPlan_tFle(in=x) CensusFind1(in=y);
by STRM1;
if x=1 then output;
run;
*;
data AcadPlanFle;
set AcadPlanRFle;
if FeCensusDt GT EFFDT then output;* deleting future acad_plans;
run;
*;
data MajorFle;
set test1.PS_ACAD_PLAN_TBL;*brining in this table to distinguish majors from minors. we need to work with student's majors only;
run;
*;
proc sort data=MajorFle;
by ACAD_PLAN EFFDT;
run;
*;
proc sort data=AcadPlanFle;
by ACAD_PLAN ;
run;
*;
data Major1Fle;
set MajorFle;
keep ACAD_PLAN ACAD_PLAN_TYPE;
by ACAD_PLAN;
if last.ACAD_PLAN=1 then output;
run;
*;
data AcadPlanMFle;
merge AcadPlanFle(in=x) Major1Fle(in=y);
by ACAD_PLAN;
if x=1 then output;
run;
*;
data AcadPlanMFle1;
set AcadPlanMFle;
if ACAD_PLAN_TYPE="MAJ" then output;
run;
*;
data AcadCareerFle;
set ProgFle1;* Brining in Prog1 to find out student's ACAC_CAREER to find out correct AcadPlan;
*keep EMPLID ACAD_CAREER ACAD_CAREERfinal ACAD_PROG Highest;
ACAD_CAREERfinal=ACAD_CAREER;
run;
*;
proc sort data=AcadPlanMFle1;
by EMPLID ACAD_CAREER STDNT_CAR_NBR EFFDT;
run;
*;
proc sort data=AcadCareerFle;
by EMPLID ACAD_CAREER STDNT_CAR_NBR EFFDT;
run;
*;
data AcadPlanFle1;
merge AcadPlanMFle1(in=x) AcadCareerFle(in=y);
by EMPLID ACAD_CAREER STDNT_CAR_NBR;* EFFDT;
if x=1 and y=1 then output;
run;
*;
data AcadPlanFle2;
set AcadPlanFle1;
if ACAD_CAREERfinal ne "" then output;
run;
*;
proc sort data=AcadPlanFle2;
*by EMPLID Highest descending PLAN_SEQUENCE descending STDNT_CAR_NBR EFFSEQ EFFDT;*We need to pick Max of effective sequence, but lowest of PLAN_SEQUENCE;
by EMPLID Highest descending PLAN_SEQUENCE descending STDNT_CAR_NBR   EFFDT EFFSEQ ;*This one is according to Jim;
run;
*;
*CHANGED ON 11-24-2009-descending STDNT_CAR_NBR TO match with Jim;
data AcadPlanFle3;
set AcadPlanFle2;
by EMPLID;
if last.EMPLID=1 then output;*picking lowerst sequence number-see Item18 in the spec;
run;
*;
data ClassifFle2;
merge ClassifFle1(in=x) ProgFle1(in=y) ServIndicFle(in=z) StudAtribFle1 (in=t) AcadPlanFle3 (in=n);
by EMPLID;
if x=1 then output;
run;
*;
*---------------------------------------------------------------------------------------------------;
* Accordint to Jen people with ACAD_PROG="GRAD" are non degree seeking graduate students and should be reported as postbacks. Or if 2 last letters of their ACAD_PLAN="nd"; 
data ClassifFle3;
set ClassifFle2;
AcadPl=substr(ACAD_PLAN,5,2);
if Level='90' then DO;
IF ACAD_PROG in ('MASTR', 'CERT', 'SPEC') then Level1 = '6';
IF ACAD_PROG in ('SPPRO') then Level1 = '8';
END;
IF ACAD_PROG='DOCT' then DO;
IF (ACAD_PROG = 'DOCT' AND STDNT_ATTR='PHD' AND STDNT_ATTR_VALUE='PHM') OR (ACAD_PROG = 'DOCT' AND AcadPl= 'DB' AND SRVC_IND_CD NE 'GDR') THEN Level1="6";
END;
if ACAD_PROG in ('UCERT','UGRD2','GRAD') then Level1 = '5';*5-Post-Baccalaureate to report in Item 5;
run;*after that need to find out regarding double degrees people. Merge Error report with whole file and overwrite level if necissary;
*;
data ClassifFle4;
set ClassifFle3;
if (Level='90' AND Level1="") and Level1 ne '5' then  Level1="7";
run; 
*;
data ClassifFle5;
set ClassifFle4;
if ACAD_PROG='UGNDS' then Level1 = '5';*5-Post-Baccalaureate to report in Item 5. According to Jen those conditions override everything;* AND ACAD_PLAN='GRU_ND';
run;
*;
proc sort data=ClassifFle5;
by EMPLID Level1;
run;
*;
data ClassifFle6;*Picking lagest level. ;
set ClassifFle5;
by EMPLID;
IF Last.EMPLID then output;
run;
*;
* Merging cohort with Item5-Classification. Level1 is going to be reported in Item5;
data Item5Fe; * Have double classifications;
merge GenderFinalFe(in=X) ClassifFle6(in=y);
by EMPLID;
if x=1 then output;
run; 
*;
*;
*;
*;
******************************************************************************************************************************;
*EDIT REPORTS WERE REQUESTED BY DR REDLINGER FOR CONFIRMATION REGARDING DOCTORAL STUDENTS AND DIFFERENT CLASSIFICATION LEVELS ;
******************************************************************************************************************************;
*;
*WRITING THIS REPORT OUT;
filename ClasLevF 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-PHM-Flex.csv';
data _NULL_;
FILE ClasLevF DLM=',';
IF _N_=1 THEN DO;
put "Flex entry PHD students that have PHM student attribute and will be reported as master students. Needs to be reviewed";
put "EMPLID" "," "ACAD_PROG" "," "STDNT_ATTR_VALUE" "," "Level1";
END;
set Item5Fe;
where ACAD_PROG = 'DOCT' AND STDNT_ATTR='PHD' AND STDNT_ATTR_VALUE='PHM';
PUT  EMPLID ACAD_PROG STDNT_ATTR_VALUE Level1;
run; 
*;
*;
*-------------------------------------------------------------------------------------------------------------------------------------;
* Brining in BIRTHDAY for flex entry students                                                                                         ;
*-------------------------------------------------------------------------------------------------------------------------------------;
*proc contents data=test1.PS_PERSON;
*RUN;
/*
data BIRTHDAY;
set test1.PS_PERSON;
RUN;
*;
data convert;
 set BIRTHDAY;
 dob=datepart(BIRTHDATE);
format dob mmddyy10. birthdate datetime.;
run;
*;
proc format; *setting format to change date to the CB requirements;
  picture ORADATE
   . = '        '
other='%Y%0m%0d' (datatype=datetime);
run;
*;
data DOB;
set  convert;
format BIRTHDATE oradate.;
run;
*;
*proc print data=DOB(obs=100);
*run;
*;
proc sort data=DOB;
by EMPLID;
run;
*;*/
data Item6Fe; 
merge Item5Fe(in=X) DOB(in=y);
by EMPLID;
if x=1 then output;
run; 

*-----------------------------------------------------------------------------------------------------------------------------------------------;
* Item7- Tuition status for flex entry students                                                                                                 ;
*-----------------------------------------------------------------------------------------------------------------------------------------------;
data Item7Fe;
set test1.PS_ITEM_SF;
keep EMPLID ITEM_TERM ITEM_AMT WAIVER_CODE BILLING_CAREER;
if  ITEM_TERM in ("&term1") and EMPLID NE "" then output;
run;
*;
proc sort data=Item7Fe;
by EMPLID;
run;
*;
/*
data Resid;
set test1.PS_Residency_OFF;
run;
*;
proc sort data=Resid;
by EMPLID EFFECTIVE_TERM RESIDENCY_DT;
run;
*;
*/
data ResidZ_Fe;
set Resid;
if EFFECTIVE_TERM LE "&term1" then output;*DELETING FUTURE EFFECTIVE TERMS;
run;
*;
data ResidOff_Fe;
*set test1.PS_Residency_OFF;
set ResidZ_Fe;
keep EMPLID RESIDENCY_DT RESIDENCY ADMISSION_EXCPT;* ACAD_CAREER;
bY EMPLID;
if last.EMPLID then output;
run;
*;
data Item7FeA;
merge Item7Fe(in=x) ResidOff_Fe(in=y);
by EMPLID;
if y=1 then output;
run;
*;
*Merging with cohort to make sure we pick correct logic for acad career;
data Item7Feb;
keep EMPLID Residency WAIVER_CODE ITEM_AMT ADMISSION_EXCPT; 
merge Item5Fe (in=x) Item7FeA(in=y);
by EMPLID;
if BILLING_CAREER NE "" then do;
if x=1 and  BILLING_CAREER=ACAD_CAREER then output;
end;
if BILLING_CAREER eq "" then do;
if x=1 then output;
end;
run;
*;
*Picking Residents, then will need to distinguish between resident tuition regular and Tuition exemption for TX resident;
data Item7FeC;*first part of residency logic;
set Item7FeB;
keep EMPLID Residency WAIVER_CODE Waver ITEM_AMT ADMISSION_EXCPT; 
Waver=substr(WAIVER_CODE,1,1);
If Residency='1' and ADMISSION_EXCPT not in ('1403A','1528A','1403C','1528C' )then output;
run;
*;
data Item7FeE;
set Item7FeC;
Waver=substr(WAIVER_CODE,1,1);
if Waver='3' then output;
run;
*;
data Item7FeF;*going to sume ITEM_AMT;
set Item7FeE;
by EMPLID;
if first.EMPLID=1 then SummAmt=0;
SummAmt + ITEM_AMT;
if last.EMPLID=1 then output;
run;
*;
data Item7FeG;
set Item7FeF;
if SummAmt<0 then Item7="3";*Item 7 is going to be reported as Tuition exemption for TX residents;
if SummAmt<0 then output;
run;
*;
data Item7FeJ;*Merging Tuition exemption for residents with rest of residents;
merge Item7FeC(in=x) Item7FeG(in=y);
by EMPLID;
if x=1 and y=0 then Item7='1';*Resident tution;
if x=1 then output;
run; 
*;
data Item7FeK;*Students with tuition status 1 and 3;
set Item7FeJ;
keep EMPLID Residency WAIVER_CODE Item7 ADMISSION_EXCPT Waver; 
by EMPLID;
if first.EMPLID=1 then output;*picking 1 student per record.;
run;
* Going to find out students with tuition=F-100 miles waiver;
data Item7_F_code_FE Item7_E_code_FE Item7_A_code_FE Item7_C_code_FE Item7_N_code_FE;*first part of residency logic;
set Item7Feb;
if substr(WAIVER_CODE,1,4)='E100' then output Item7_F_code_FE;
else if (substr(WAIVER_CODE,1,1)='E' and substr(WAIVER_CODE,1,4)NE 'E100') then output Item7_E_code_FE;
else if ADMISSION_EXCPT IN ('1403A','1528A')then do;
Item7='A';
output Item7_A_code_FE;*All A tution students;
end;
else if ADMISSION_EXCPT IN ('1403C','1528C')then do;
Item7='C';
output Item7_C_code_FE;*All C tution students;
end;
else if ADMISSION_EXCPT="DISAS" then do;
Item7='N';
output Item7_N_code_FE;*All N tution students- SHOULD NOT HAVE ANY FOR NOW;
end;
run;
*;
* Going to Assign F code if applicable;
data Item7_F_code_a_FE;
set Item7_F_code_FE;
by EMPLID;
if first.EMPLID=1 then SummAmt=0;
SummAmt + ITEM_AMT;
if last.EMPLID=1 then output;
run;
*;
data Item7_F_code_b_FE;
set Item7_F_code_a_FE;
keep EMPLID Residency SummAmt WAIVER_CODE Item7 ADMISSION_EXCPT; 
if SummAmt<0 then Item7="F";*Item 7 is going to be reported as Tuition exemption for TX residents;
if SummAmt<0 then output;
run;
*;
data  Item7_F_code_c_FE;*Going to keep only one student per file;
set Item7_F_code_b_FE;
by EMPLID;
if first.EMPLID=1 then output;
run;
* Going to Assign E code if applicable;
data Item7_E_code_a_FE;
set Item7_E_code_FE;
by EMPLID;
if first.EMPLID=1 then SummAmt=0;
SummAmt + ITEM_AMT;
if last.EMPLID=1 then output;
run;
*;
data Item7_E_code_b_FE;
set Item7_E_code_a_FE;
keep EMPLID Residency SummAmt WAIVER_CODE Item7 ADMISSION_EXCPT ITEM_AMT; 
if SummAmt<0 then Item7="E";*Item 7 is going to be reported as Tuition exemption for TX residents;
if SummAmt<0 then output;
run;
*;
data Item7_E_code_c_FE;
set Item7_E_code_b_FE;
by EMPLID;
if first.EMPLID=1 then output;
run;
*Going to set A code file;
data Item7_A_code_a_FE;
set Item7_A_code_FE;
keep EMPLID Residency WAIVER_CODE Item7 ADMISSION_EXCPT; 
by EMPLID;
if first.EMPLID=1 then output;*Keeping one student per file;
run;
*;
*Going to set C code file;
data Item7_C_code_a_FE;
set Item7_C_code_FE;
keep EMPLID Residency WAIVER_CODE Item7 ADMISSION_EXCPT; 
by EMPLID;
if first.EMPLID=1 then output;*Keeping one student per file;
run;
*;
*Going to set N code file;
data Item7_N_code_a_FE;
set Item7_N_code_FE;
keep EMPLID Residency WAIVER_CODE Item7; 
by EMPLID;
if first.EMPLID=1 then output;*Keeping one student per file;
run;
* Going to concantinate all files for which we determined tuition status for;
data Item7F_FE;
set Item7FeK Item7_F_code_c_FE Item7_E_code_c_FE Item7_A_code_a_FE Item7_C_code_a_FE Item7_N_code_a_FE;
run;
* Going to merge with cohort file;
proc sort data=Item7F_FE;
by EMPLID descending Item7;* descending Item 7 will allow us to pick letter versus number to report correctly, example E versus 1;
run;
*;
data Item7v_FE;
set Item7F_FE;
by EMPLID ;
if first.EMPLID=1 then output; *picking one record per person. need make sure it picks correct reccord;
run;
*;
data Item7Fl_FE;
merge Item6fE(in=x) Item7v_FE(in=y);
by EMPLID;
if x=1 and y=0 then Item7="2";
if x=1 then output;
run;
*;
*----------------------------------------------------------------------------------------------------------------------------------------------------;
* Brining in residency  FOR FLEX ENTRY STUDENTS                                                                                                      ;
* Residency1 value is one that is going to be reported to the CB                                                                                     ;
*----------------------------------------------------------------------------------------------------------------------------------------------------; 
*proc contents data=test1.PS_RESIDENCY_OFF ;
*RUN;
*proc print data= test1.PS_RESIDENCY_OFF (obs=150);
*var EMPLID RESIDENCY EFFECTIVE_TERM;
*RUN;
*;
data Application_Fe;
set test1.PS_ADM_APPL_PROG;
Applic=EMPLID||ACAD_CAREER||ACTION_DT;
if ADMIT_TERM GT "&term1" then delete;*deleting applications for future terms;
run;
*;
proc sort data=Application_Fe;
by Applic EFFSEQ;
run;
*;
data Application1_Fe;
set Application_Fe;
keep EMPLID ACAD_CAREER ADMIT_TERM;
by Applic;
if last.Applic=1 then output;*picking latest entry per day per student;
run;
*;
data InAPLtblFe;
merge Item6Fe (in=x) Application1_Fe(in=y);
by EMPLID ACAD_CAREER;
if x=1 and y=1 then output; *determining students who have their application in the People Soft;
run;
*;
data NotInAPLtblFe;
merge Item6Fe (in=x) Application1_Fe(in=y);
by EMPLID ACAD_CAREER;
if x=1 and y=0 then output; *determining students who don't have their application in the People Soft;
run;
*;
* Finding out Residency for people that have their aplication data in the People Soft;
data InAPLtbl1Fe;
set InAPLtblFe;
keep EMPLID ADMIT_TERM;
run;
*;
data Item8Fe;
merge InAPLtbl1Fe (in=x) test1.PS_RESIDENCY_OFF (in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item8aFe;
set Item8Fe;
if ADMIT_TERM LE EFFECTIVE_TERM then output;* Should be equal to effective_term and not less that equal, but we are using this to be able to wrok with data;
run;
*;
proc sort data=Item8aFe;
by EMPLID;
run;
*;
data Item8bFe;
set Item8aFe;
by EMPLID;
*if last.EMPLID=1 then output;
run;
*;
proc sort data=Item8bFe;
by EMPLID ACAD_CAREER descending EFFECTIVE_TERM;
run;
*;
data Item8cAFe; *Merging with cohort;
merge Item6Fe (in=x) Item8bFe (in=y);
by EMPLID ACAD_CAREER;
IF x=1 and y=1 then output;
run;
*;
proc sort data=Item8cAFe;
by EMPLID EFFECTIVE_TERM RESIDENCY_DT;
run;
*;
data Item8cFE;
set Item8cAFe;
by EMPLID;
if first.EMPLID=1 then output;
run;

*--------------------------------------------------------------------------------------------------------------------------------------------;
* for students who don't have their application data in the People Soft we are going to pick up earliest Residency row                       ;
*--------------------------------------------------------------------------------------------------------------------------------------------;
data NotInAPLtbl1Fe;
set NotInAPLtblFe;
keep EMPLID ACAD_CAREER;
run;
*;
data Item8AddFe;
merge NotInAPLtbl1Fe (in=x) test1.PS_RESIDENCY_OFF (in=y);
by EMPLID ACAD_CAREER;
if x=1 then output;
run;
*;
data Item8AddFex;
set Item8AddFe;
Flag=EMPLID||ACAD_CAREER;
run;
*;
proc sort data=Item8AddFex;
by FLAG EFFECTIVE_TERM;
*by EMPLID EFFECTIVE_TERM ACAD_CAREER;
run;
*;
data Item8Add1Fe;
set Item8AddFeX;
drop FLAG;
by FLAG;
if first.FLAG then output;* Picking first row -earlierst Residency in the People Soft for students who don't have application data in the People Soft, but in legacy system;
run;
*;
data Item8Add2Fe; *Merging with cohort;
merge Item6Fe (in=x) Item8Add1Fe (in=y);
by EMPLID ACAD_CAREER;
IF x=1 and y=1 then output;
run;
*;
data Item8ABCDFe;* Both sets of data together;
set Item8cFe Item8Add2Fe;
run;
*;
data Item8dFe;
set Item8ABCDFe;
run; 
*;
/*
*;
*Part for the Preliminary enrollment count where we have to distinguish between TX and not TX residents- In-State or Others in the Report to CB;
data ResidentNot;
set Item8e;
if COUNTY NE ''  THEN TXRes='Y';*TX resident;
else TXRes='N';
run;
*;
proc freq data=ResidentNot;
table TXRes;
title "Frequency for Resident/NotResident for Preliminary Hedcount Enrollment report to THECB";
run;*/
*----------------------------------------------------------------------------------------------------------------------------------------------;
data Code1Fe Code2Fe Code3Fe;*have extra records due to the data inconsistancy!;
set Item8dFe; 
COUNTY1= substr(COUNTY,1,3);
if  COUNTY NE ''  THEN RESIDENCY1=COUNTY1;*RESIDENCY1 is going to be reported to CB;
if COUNTY NE ''  THEN output Code1Fe;*TX resident;
if (COUNTRY = "USA"  AND COUNTY EQ " ") or (STATE NE "TX" and STATE NE "") THEN output Code2Fe;*Out-of-State resident;
if COUNTRY NE "USA" and COUNTY="" and STATE = "" THEN output Code3Fe;*Foreign country citizen;	
RUN; 
*;
data Code1AFe;
set Code1Fe;
keep EMPLID RESIDENCY1 acad_career ADMIT_TERM STATE COUNTRY COUNTY1;* UTZ_CC_THECB_CD;
run;
*;
proc sort data=Code2Fe;
by STATE;
run;
*;
Data Code2AFe;
merge Code2Fe (in=x) 	test1.PS_UTZ_CC_CB_STATE (in=y);
by STATE;
if x=1 then output;
run;
*;
Data Code2BFe;
set Code2AFe;
RESIDENCY1=UTZ_CC_THECB_CD;
keep EMPLID RESIDENCY1 acad_career ADMIT_TERM STATE COUNTRY;*UTZ_CC_THECB_CD;*Residency1 is variable to be reported to CB;
run;
*;
proc sort data=Code2BFe;
by EMPLID;
run;
*;
proc sort data=Code3Fe;
by COUNTRY;
run;
*;
Data Code3AFe;
merge Code3Fe(in=x) test1.PS_UTZ_CC_CB_CNTRY (in=y);
by COUNTRY;
if x=1 then output;
run;
*;
proc print data=test1.PS_UTZ_CC_CB_CNTRY(obs=1);
where country="IND";
run;
*;
Data Code3BFe;
set Code3AFe;
RESIDENCY1=UTZ_CC_THECB_CD;
keep EMPLID RESIDENCY1 acad_career STATE COUNTRY;* UTZ_CC_THECB_CD;
run;
proc sort data=Code3BFe;
by EMPLID;
run;
*;
data Item8fFe;	*concantinating;
set Code1AFe Code2BFe Code3BFe;
run;
*;
proc sort data=Item8fFe nodupkey;
by EMPLID acad_career;
run;
*;
data Item8Final_FE; 
merge Item7Fl_FE(in=X) Item8fFe(in=y);
by EMPLID;* acad_career; 
if x=1 then output;
run; 

*************************************;
*EDIT                                ;
*************************************;
proc print data=Item8Final_FE;
where RESIDENCY1="";
var EMPLID RESIDENCY1;
title "Residency is missing";
run;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------------;
* ITEM9- TRANSFER STUDENT OR FIRST TIME IN COLLEDGE FOR FLEX ENTRY STUDENTS                                                                                           ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------------;
/*
data Item9_FE;
set test1.PS_STDNT_ENRL;
keep EMPLID ACAD_CAREER TESTVAR STRM;
TESTVAR=EMPLID||ACAD_CAREER;
run;
*;
proc sort data=Item9_FE;
by TESTVAR STRM;
run;
*;
*/
data Item9a_FE;* This is list of been first time at UTD;
set Item9;
STRMFT=STRM;
by TESTVAR;
if first.TESTVAR=1 and STRMFT in ("&term1") then output;*STDNT_ENRL- if min enrollment term =reporting term then first time and also check career;
run;
*;
data Item9b_FE;*Merged with cohort. In this list students for whom TESTVAR NE "" are first time at UTD;
merge Item8Final_FE(in=x) Item9a_FE (in=y);
by EMPLID ACAD_CAREER;
if x=1  then output;
run;
*;
data AdmitType_FE;
merge test1.PS_ADM_APPL_DATA (in=x) test1.PS_ADM_APPL_PROG (in=y);
by EMPLID ADM_APPL_NBR;
run; 
*;
proc sort data=AdmitType_FE;
by EMPLID EFFDT EFFSEQ;
run;
*;
data Enrl8C_FE;
set Item8Final_FE;
keep EMPLID FlexE;
run;
*;
data AdmitTypex_FE;
merge AdmitType_FE(in=x) Enrl8C_FE(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data AdmitType1_FE;
set AdmitTypex_FE;
keep EMPLID ADMIT_TERM ACAD_CAREER ADMIT_TYPE ADM_APPL_NBR PROG_STATUS;
*if (ADMIT_TERM="&term" and FlexE NE "1") OR (ADMIT_TERM="&term1" and FlexE='1') then output;* Need to distinguish first term for Flen Entry and not Flex Entry students;
if (ADMIT_TERM="&term1" and FlexE='1') then output; 
run;
*;
data AdmitType2_FE;
set AdmitType1_FE;
by EMPLID;
if last.EMPLID then output;
run;
*;
data Item9c_FE;
merge Item9b_FE (in=x) AdmitType2_FE (in=y);
by EMPLID ACAD_CAREER;
if x=1 then output;
run;
*;
data Item9d_FE;
set Item9c_FE;
if STRMFT NE "" AND Admit_type in ("FR","NG") AND Level1 ne "5" then Item9= '000001';*First time for degree level;
run;
*;
*;
*Now we are going to determine transfer students and report their FICE code;
*;
*The FICE code is on the EXT_ORG_TBL_ADM record.  It can be joined to the student's EXT_ACAD_DATA by the EXT_ORG_ID field;
/*
data ExtOrgId;
set test1.PS_EXT_ACAD_DATA;
if  EXT_CAREER NE "HS" then output;*Deleting High Schoole codes since we don't need them for this item;
run;
*;
proc sort data=ExtOrgId;
by EXT_ORG_ID;
run;
*;
data FICE;*brining FICE codes in;
set test1.PS_EXT_ORG_TBL_ADM;
by  EXT_ORG_ID EFFDT;
if first.EXT_ORG_ID=1 then output;*picking last updated record,which displays as first row in the table;
run;
*;
*/
*mering 2 tables above to bring in FICE codes;
/*
data ExtOrgId1_FE;
merge ExtOrgId_FE(in=x) FICE(in=y);
by EXT_ORG_ID;
if x=1 then output;
run;
*;
data EXT_ORG_ID2_FE;
set ExtOrgId1_FE;
if FICE_CD NE "" then output;
run;
*;
proc sort data=EXT_ORG_ID2_FE;
by EMPLID TO_DT;*TO_DT variable will help us pick latest school that student attended;
run;
*;
data EXT_ORG_ID3_FE;
set EXT_ORG_ID2_FE;
keep EMPLID EXT_ORG_ID RECEIVED_DT TO_DT FICE_CD;
by EMPLID;
if last.EMPLID then output;
run;
*;
*/
data EXT_ORG_ID4_FE;
merge  Item9d_FE(in=x) EXT_ORG_ID3(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item9f_FE;*need to bring in ADM_APPL_DATA table;
set EXT_ORG_ID4_FE;
if STRMFT in ("&term1") and prog_status = 'AC' AND Admit_type in ("TR") then do;*First semester transfer student.NEED FIND OUT FROM TODD WHERE FICE CODE IS LOCATED;
Transfer='Yes';
Item9= FICE_CD;
end;
run;
*;
data Item9e_FE;
set Item9f_FE;
if Transfer='Yes' and Item9="" then Item9="999999";
run;
*;
*-------------------------------------------------------------------------------------------------------------------------------------------;
*Item10A- Semester Credit Hour Load,Current Registration on Campus for FLEX ENTRY STUDENTS                                                  ;                                                                                                                           ;
*-------------------------------------------------------------------------------------------------------------------------------------------;
*Enrl7 is temprorary file created in the begining has all reportable courses and students enrolled in them;
data Item10A_1_FE;
*set Enrl7;* SHOULD USE DIFFERENT THAT Enrl7 file check above;* REDO ONE ABOVE TO exclude flex entry;
set EnrlFlexE5;
LocationA=substr(Location,1,1);
if LocationA="0" then output;*0 represents main UTD campus location, for flex entry we are picking all students regardless of census date;
*keep EMPLID ACAD_CAREER STRM CLASS_NBR CRSE_CAREER ENRL_STATUS_REASON ENRL_STATUS_REASON ENRL_ADD_DT UNT_TAKEN;
keep Emplid EMPLID UNT_TAKEN;* FlexE;*FlexE='1';
run;

*NEED SUMMARIZE UNITS_TAKEN by student. need to CONSIDER FLEX ENTRY-If student in FE course and not in FE it will be 2 diffr rows. CREATE VAR EMPLID||FLEXENTRY OR USE EMPLID||STRM COMBINATION;
proc sort data=Item10A_1_FE;
by Emplid;
run;

data Item10A_2_FE;*SCHL is going to be variable that we report in Item10A. IF HAVE MORE RECORDS THAT IN INITIAL ENROLLMENT, CHECK FLEX ENTRY,SOME STUDENTS CAN HAVE 2 ENTRIES ON CB1;
set Item10A_1_FE;
by Emplid;
if first.Emplid=1 then SCHL=0;
SCHL + UNT_TAKEN;
if last.Emplid=1 then output;
run;
*;
data  Item10A_final_FE;*merging with final enrollment file;
merge Item9e_FE (in=x)  Item10A_2_FE(in=y);
by Emplid;
if x=1 then output;
run;
*;
*proc print data=Item10A_final1;
*where schl=.;
*run;
*;
data  Item10A_final1_FE;
set Item10A_final_FE;
if SCHL=. then SCHL=0;*For students who don't have any SCHLoad on campus enfoursing value of 0;
run;

*-------------------------------------------------------------------------------------------------------------------------------------------;
*Item10B- Semester Credit Hour Load,Current Registration off Campus-for Flex Entry courses                                                  ;                                                                                                                           ;
*-------------------------------------------------------------------------------------------------------------------------------------------;
*EnrlFlexE5 is temprorary file created prior and has all reportable courses and students enrolled in them for flex entry;
data Item10B_1_FE;
set EnrlFlexE5;
LocationA=substr(Location,1,1);
*EmplidFlexEn=EMPLID||FlexE;
if LocationA NE "0" AND (ENRL_ADD_DT LE CENSUS_DT) and (ENRL_DROP_DT > CENSUS_DT OR ENRL_DROP_DT="") then output;*0 represents main UTD campus location,not 0 is off campus;
*keep EMPLID ACAD_CAREER STRM CLASS_NBR Location LocationA CRSE_CAREER ENRL_STATUS_REASON ENRL_STATUS_REASON ENRL_ADD_DT UNT_TAKEN;
keep EMPLID UNT_TAKEN FlexE LocationA;*FlexE='1';
run;
*;
*NEED SUMMARIZE UNITS_TAKEN by student. need to CONSIDER FLEX ENTRY-If student in FE course and not in FE it will be 2 diffr rows. CREATE VAR EMPLID||FLEXENTRY OR USE EMPLID||STRM COMBINATION;
proc sort data=Item10B_1_FE;
by Emplid;
run;

data Item10B_2_FE;*SCHLoff is going to be variable that we report in Item10B.IF HAVE MORE RECORDS THAT IN INITIAL ENROLLMENT, CHECK FLEX ENTRY,SOME STUDENTS CAN HAVE 2 ENTRIES ON CB1;
set Item10B_1_FE;
by Emplid;
if first.Emplid=1 then SCHLoff=0;
SCHLoff + UNT_TAKEN;
if last.Emplid=1 then output;
run;
*;
data  Item10B_final_FE;*merging with final enrollment file;
merge Item10A_final1_FE (in=x)  Item10B_2_FE(in=y);
by Emplid;
if x=1 then output;
run;
*;
data  Item10B_final1_FE;
set Item10B_final_FE;
if SCHLoff=. then SCHLoff=0;*For students who don't have any SCHLoad on campus enfoursing value of 0;
run;
*;
*-------------------------------------------------------------------------------------------------------------------------------------------;
*Item11- Doctoral SCH Funded-for Flex entry courses                                                                                         ;                                                                                                                           ;
*Item19- Doctoral Funding Code-for Flex entry courses                                                                                       ;
*-------------------------------------------------------------------------------------------------------------------------------------------;
* Note:This could add for additional records for enrollment since-one report record will be created for each unique CIP alternate funding code per student;
* NEED TO ADD CODE WHEN FINISH INTER-INSTITUTIONAL LOGIC;
data Item11_FE;
set Item5Fe;
keep EMPLID DocS level1;
if Level1 in ("7") then do;
DocS="Y";
output;*Outputing list of doctoral students that enrolled in Flex entry courses;
end;
run;
*;
/*
proc print data=Item11;
var emplid level1;
where emplid="2010001312";
title "Doctoral students with 2 CIP funding codes that are going to be reported twice";
run;
*/
*Merging list of doctoral students with table containing all courses;
data Item11A_Fe;*Itme11A has all courses that doctoral flex entry students are taking;
merge Item11_FE(in=x) EnrlFlexE5(in=y);
by EMPLID;
if x=1 then output;
run;
*;
proc sort data=Item11A_FE;
by CRSE_ID;
run;


/*
*Working with CIP codes tables;
data CIP;
set test1.PS_CIP_CODE_TBL;
keep CIP_CODE EFFDT CIP_ALTERNATIVE_CD;
by CIP_CODE;
if last.CIP_CODE then output;
run;
*;
data CRSCIP;
set test1.ps_crse_offer;
run;
*;
proc sort data=CRSCIP;
by CRSE_ID EFFDT;
run;
*;
data CRSCIP1;
set CRSCIP;
keep CRSE_ID CIP_CODE;
BY CRSE_ID;
if last.CRSE_ID then output;
RUN;
proc sort data=CRSCIP1;
by CIP_CODE;
run;
*;
*Merging 2 tables to have altrenative CIP available;
data CIPCode;
merge CRSCIP1 (IN=X) CIP (in=y);
by CIP_CODE;
if y=1 and CRSE_ID ne "" then output;
run;
*;
proc sort data=CIPCode;
by CRSE_ID;
run;
*;*/
*Going to bring in CIP code for courses;
data Item11B_FE;
merge Item11A_FE(in=X) CIPCode(in=y);
by CRSE_ID;
if x=1 then output;
run;
*;
proc sort data=Item11B_FE nodup;
by CRSE_ID CLASS_SECTION STRM;* CRSE_OFFER_NBR SESSION_CODE;
run;
*;
proc print data=Item11B_FE;
where CIP_CODE ="" or CIP_ALTERNATIVE_CD="";
VAR crse_ID CIP_CODE CIP_ALTERNATIVE_CD;
Title "Error CIP code is missing for following courses. Let Registrar office know.";
RUN;
*;
/*
data CorsToPick;*Need to bring course attributes in to determine course funding;
set test1.PS_CLASS_ATTRIBUTE;
if (CRSE_ATTR='CLVL' and CRSE_ATTR_VALUE='6') or ( CRSE_ATTR='CBRT' and CRSE_ATTR_VALUE='NONFUND')then output;
run;
*;
proc sort data=CorsToPick nodupkey;
by CRSE_ID CLASS_SECTION STRM;*CRSE_OFFER_NBR SESSION_CODE;
run;
*;*/

* CHANGING SEPTERMBER 2011 AFTER ISSUE DISCOVERED!!!;
data Item11BX_FE;
set Item11B_FE;
drop CRSE_ATTR CRSE_ATTR_VALUE;
RUN;
*;

proc sort data=CorsToPick nodupkey;
*by CRSE_ID CLASS_SECTION STRM;*CRSE_OFFER_NBR SESSION_CODE;
by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE CLASS_SECTION;
run;
*;
proc sort data= Item11BX_FE;
*by CRSE_ID CLASS_SECTION STRM;*CRSE_OFFER_NBR SESSION_CODE;
by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE CLASS_SECTION;
run;
*;
*Merging atributes table with table above;
data Item11C_FE;
merge Item11BX_FE(in=x) CorsToPick(in=y);
*by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE;
*by CRSE_ID CLASS_SECTION;*CRSE_OFFER_NBR SESSION_CODE;
by CRSE_ID STRM CRSE_OFFER_NBR SESSION_CODE CLASS_SECTION;
if x=1 then output;
run;
*;
data Item11D_FE;
set Item11C_FE;
if CRSE_ATTR='CBRT' and CRSE_ATTR_VALUE in ('NONFUND','UNFUNDED') then delete;
else if CRSE_ATTR='CLVL' and CRSE_ATTR_VALUE='6' then output;*Picking only doctoral funded level courses;
run;
*;
data Item11Da_FE;
set Item11D_FE;
NOdupl=EMPLID||CRSE_ID||CRSE_OFFER_NBR||SESSION_CODE||CLASS_SECTION;
run;
*;
proc sort data=Item11Da_FE;
by NOdupl;
run;
data Item11Dab_FE;
set Item11Da_FE;
by NOdupl;
if first.NOdupl = 1 then output;
run;
*;
proc sort data=Item11Dab_FE;
by EMPLID;
RUN;
*;
*delete SCH for Audiology students. CB sents error when it is counted;
*if ACAD_PROG in ("SPPRO");
data Item11DabNoAud_FE;
set Item11Dab_FE;
if ACAD_PROG in ("SPPRO") then delete;
run;
* Going to summaraize SCH for doctoral students for doctoral funded courses per student;
data Item11f_FE;*SCHd is going to be variable that we report in Item11. IF HAVE MORE RECORDS THAT IN INITIAL ENROLLMENT, we will need to report some PHD students twise;
set Item11DabNoAud_FE;
DROP CRSE_ID;
by EMPLID;
if first.EMPLID=1 then SCHD=0;
SCHD + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item11e1_FE;
set Item11Dab_FE;
CIPFUND=substr(CIP_ALTERNATIVE_CD,12,2);
Item19=CIPFUND;* Item19 to report in Item19;
IDCip=EMPLID||CIPFUND;*if one person in 2 diffr CIP codes fundings,we will need to report him/her twice and report his second record with 0 SCH;
run;
*;
proc sort data=Item11e1_FE;
by IDCip;
run;
* Going to summaraize SCH for doctoral students for doctoral funded courses by each CIP funding code;
data Item11f1_FE;*SCHd is going to be variable that we report in Item11. IF HAVE MORE RECORDS THAT IN INITIAL ENROLLMENT, we will need to report some PHD students twise;
set Item11e1_FE;
keep EMPLID IDCIP CIPFUND SCHD1 Item19;
by IDCip;
if first.IDCip=1 then SCHD1=0;
SCHD1 + UNT_TAKEN;
if last.IDCip=1 then output;
run;
*;
proc sort data=Item11f1_FE;
by EMPLID;
run;
*;
*----------------------------------------------------------------------------------------------------------------------------;
data Item11t_FE;* going to find out list of PHD students that are going to be reported twice due to funding code;
set Item11f1_FE;
by EMPLID;
if first.EMPLID NE 1 then output;
run;
*;
*-------------------------------------------------------------------------------------------------------------------------------;
*Going merge doctoral students with their alternative CIP codes to include second line for students who needs to be reported twice;
data Item11o_FE;
merge Item11f_FE(in=x) Item11f1_FE(in=y);
by EMPLID;
if x=1 then output;
run;
*;
*Going to set up SCH for doctoral students for second line to "0", since that is how it suppose to be reported;
data Item11o1_FE;
set Item11o_FE;
keep emplid level1 CRSE_ATTR_VALUE CRSE_ATTR UNT_TAKEN SCHD1 IDCip Item19;
by EMPLID;
*if first.EMPLID ne 1 then SCHD=0;*setting second line SCH to 0;
run;
*;
proc print data=Item11t_FE;
title "Doctoral students with 2 CIP funding codes that are going to be reported twice";
run;
*;
*Going merge students who have SCH to be reported in Item11 with the cohort;* NEED TO MERGE WITH FINAL PRIOR COHORT NOT Enrl8 TO MAKE iTEM 11E WORK!!!!!!!;
data Item11p_FE;
merge Item10B_final1_FE(in=x) Item11o1_FE(in=y);
by EMPLID;
IF x=1 then output;
run;
*;
data Item11z_FE;
set Item11p_FE;
by EMPLID;
if first.EMPLID NE 1 then do;* we are going to use this for Items10A,10B,16- see manual;
SecondDoc=1;
SCHL=0;*Items10A=0, see manual for second doctoral;
SCHLoff=0;*Items10B=0, see manual for second doctoral;
FlexE='3';*See explanation in the CB manual;
* For second line of doctoral funded courses all SCH bellow have to be "0";
SCHNF=0;
SCHDevNF1=0;
SCHFund=0;
SCHDevFd=0;
Item26=0;
END;
run;
* Going to identify variable to report in Item19;
data Item11q_FE;*final enrollment to report;
set Item11z_FE;
if SCHD1=. then SCHD1=0;
run;
*;
*Data Audit;
data test;
set Item11z_FE;
Total=(SCHL + SCHLoff);
run;
*;
PROC PRINT DATA=test;
where SCHD1 gt total AND Total gt 0;*"0" appears for second line for PHD students with several funding codes;
var emplid SCHD1 total;
run;

*;
*************************************;
*EDIT                                ;
*************************************;
*WRITING THIS REPORT OUT;
filename Err2_za 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-PHD-SCH-FlEn.csv';
data _NULL_;
FILE Err2_za DLM=',';
IF _N_=1 THEN DO;
put "Total Funded Doctoral SCH (Item11) for Flex Entry Students are greater than Total sum of on campus and off campus SCH. CHECK SAS PROGRAM FOR AN ERROR! ";
put "EMPLID" "," "TOTAL SCH on and off campus" "," "FUNDED Doctoral SCH Item11" "," "SCH on campus" "," "SCH off campus";
END;
set test;
if SCHD1 gt total AND Total gt 0;
PUT  EMPLID Total SCHD1 SCHL SCHLoff;
run; 
*;
*;
*;
/*OLD ETHNICITY VERSION THAT HAS BEEN REPLACED BY NEW ONE-FALL 2010
*-------------------------------------------------------------------------------------------------------------------------------------------;
*Ethnicity MACRO                                                                                                                            ;
*Brining ethnicity in for flex entry students                                                                                               ;
*-------------------------------------------------------------------------------------------------------------------------------------------;
*Merging ethnicity with our cohort;
data Ethnicity3_FE;
merge Item11q_FE(in=x) EthnFin1(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Ethnicity4_FE;
merge Ethnicity3_FE(in=x) Visa2(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Ethnicity5a_FE;
set Ethnicity4_FE;
if visa_permit_type not in ("","LPR","CR","NR","ASY","PP","RE","TPS") then ethn="6";
run;
*;
data Ethnicity5_FE;
set Ethnicity5a_FE;
if ethn="" then ethn="7";
run;
*;
proc freq data=Ethnicity5_FE;
tables ethn;
run;
*/
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item15- SCH Inter-Institutional State-Funded- FOR FLEX ENTRY STUDENTS                                                                                         ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*GOING TO FINISH WHEN REGISTRAR OFFICE ENTERS THOSE IN. DISCUSSED WITH TODD OCTOBER 2009;
/*SCH are qulify for state funding IF following:
-  Student not active in Student Group="CB3N" (unfunded due to 30H rule)
-  Student not active in Student Group="CB4N" (unfunded due to 40H rule)
-  Student  does not belong to "3-PEAT" (Modification for tracking 3-PEAT is UTZ_R0003 and UTZ_R009 )
-  Student  is not  "Student in Physical education courses that are not allowed for the state funding" (Modification for tracking SCH for students in such courses will be requested. Details to be determined )

Exclude all developmental courses- CLASS_ATTRIBUTE.CRSE_ATTR = 'DVLP' 
      Exclude classes with Course Attribute is CBRT and the Course Attribute Value is 'NONFUND'*/









*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item18- Major Area of consentration-FOR FLEX ENTRY STUDENTS                                                                                                   ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* AcadPlanFle3- temp file was created earlier, it has all ACAD_PLAN info for the current term;
/*
data CIPAcadPlan;
set test1.PS_ACAD_PLAN_TBL;
run;
*;
proc sort data=CIPAcadPlan;
by ACAD_PLAN EFFDT;
run;
*;
data CIPAcadPl;
set CIPAcadPlan;
by ACAD_PLAN;
if last.ACAD_PLAN then output;
run;
*;
proc sort data=CIPAcadPl;
by CIP_CODE;
run;
*;
data Item18;
merge CIPAcadPl(in=x) CIP(in=y);*temp CIP file was created earlier, has alternative CIP codes needed for reporING;
by CIP_CODE;
if x=1 and y=1 then output;
run;
*;
proc sort data=Item18;
by ACAD_PLAN;
run;
*;
*/
proc sort data=AcadPlanFle3;
by ACAD_PLAN;
run;
*;
data Item18A_FE;
merge AcadPlanFle3(in=x) Item18(in=y);*AcadPlanFle3 was created earlier as a temp file to keep all acad_plan's;
by ACAD_PLAN;
if x=1 then output;
run;
*;
data Item18B_FE;
set Item18A_FE;
cip1=substr(CIP_ALTERNATIVE_CD,1,2);
cip2=substr(CIP_ALTERNATIVE_CD,4,4);
cip3=substr(CIP_ALTERNATIVE_CD,9,2);
Item18=trim(cip1)||trim(cip2)||trim(cip3);
run;*Item18 is going to be reported in Item18;
*;
proc sort data=Item11q_FE;
by EMPLID;
run;
*;
proc sort data=Item18B_FE;
by EMPLID;
RUN;  
*;
data Item18C_FE;
*merge Ethnicity5_FE(in=x) Item18B_FE(in=y);
merge Item11q_FE(in=x) Item18B_FE(in=y);
by EMPLID;
if x=1 then output;
RUN;
*;
proc print data=Item18C_FE;
where Item18="";
VAR emplid ACAD_PLAN cip_code CIP_ALTERNATIVE_CD Item18;
title "Item 18 is missing. Please check";
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item20- Tuition ExemptionWaiver Code- FOR FLEX ENTRY STUDENTS                                                                                                 ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*Going to find students that are going to be reported 21 on Item20;
data Item20_FE;
set Item7_E_code_FE;*this temp file was created to determine "E" code for tuition, we are going here to work with the same file;
If substr(WAIVER_CODE,1,4) in ('EMAA', 'EMCE', 'EMHD', 'EMIT', 'EMPT', 'EMST', 'EMSU') then output;
run;
*;
data Item20A_FE;
set Item20_FE;
by EMPLID;
if first.EMPLID=1 then SummAmt=0;
SummAmt + ITEM_AMT;
if last.EMPLID=1 then output;
run;

data Item20B_FE;
set Item20A_FE;
keep EMPLID Item20;
if SummAmt<0 then Item20="21";
if SummAmt<0 then output;
run;
*;
*Going to find students that are going to be reported 01 on Item20;
data Item20_1_FE;
set Item7FeE;*this temp file was created to determine "3" code for tuition, we are going here to work with the same file;
If substr(WAIVER_CODE,1,4) in ('3HAZ','3MOR','3HZD') then output;
run;
*;
data Item20A_1_FE;
set Item20_1_FE;
by EMPLID;
if first.EMPLID=1 then SummAmt=0;
SummAmt + ITEM_AMT;
if last.EMPLID=1 then output;
run;
*;
data Item20B_1_FE;
set Item20A_1_FE;
keep EMPLID Item20;
if SummAmt<0 then Item20="01";
if SummAmt<0 then output;
run;
*;
*Going to merge with cohort and assign correct Item20F code to report in Item20;
data Item20Fl_FE;
merge Item18C_FE(in=x) Item20B_1_FE (in=y) Item20B_FE (in=z);
*merge Item7Fl(in=x) Item20B_1 (in=y) Item20B (in=z);
by EMPLID;
if x=1 then output;
run;
*;
data Item20Fla_FE;
set Item20Fl_FE;
if Item7= 'E' and Item20="21" then Item20F="21";*Item20F to be reported in Item20;
if Item7= '3' and Item20="01" then Item20F="01";
run;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item21- SCH load Not State Funded (Undegrad and Grad) FOR FLEX ENTRY STUDENTS                                                                                 ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*Student group information is on the STDNT_GRPS_HIST record.  If the student has been assigned to a student group, they will have a row on this record;
data ThreePeat_FE;
*set test1.PS_UTZ_CB_3PEATDEV;*Todd informed us to change to different table name;
set test1.PS_UTD_CB_3PEATDEV;
if STRM="&term1" then output;
run;
*;
proc sort data=ThreePeat_FE;
by descending PROCESS_INSTANCE;
run;
*;
data instance_FE;
set ThreePeat_FE;
keep PROCESS_INSTANCE;
run;
*;
data ThreePeat1_FE;
set instance_FE (firstobs=1 obs=1);* Going to pick highest value for PROCESS_INSTANSE;
*KEEP LastInstance;
LastInstance=PROCESS_INSTANCE;
output;
run;
*;
proc sort data=ThreePeat_FE;
by PROCESS_INSTANCE;
run;
*;
data ThreePeat2_FE;
merge ThreePeat_FE(in=x) ThreePeat1_FE(in=y);
by PROCESS_INSTANCE;
if x=1 and PROCESS_INSTANCE=LastInstance then output;
run;
*;
proc sort data=ThreePeat2_FE;
by EMPLID CRSE_ID CLASS_SECTION;
run;
*;
data ThreePeat1A_FE ThreePeat1B_FE;
set ThreePeat2_FE;
if utd_unfn_type='R' then do;
ThrPEAT='Y';*Yes this is 3-Peat;
output ThreePeat1A_FE;*distinguishing between "R" 3-PEAT students and "P"- PE students;
end;
if utd_unfn_type='P' then do;
PEd='Y';* Yes this is Physycal Education student only;
output ThreePeat1B_FE;*we will have to merge one by courses and another one by EMPLID only;
end;
run;
*;
data ThreePeat1AA_FE;
set ThreePeat1A_FE;
keep EMPLID CRSE_ID CLASS_SECTION  ThrPEAT;
run;
*;
data ThreePeat1BB_FE;
set ThreePeat1B_FE;
keep EMPLID PEd;
run;
*;
proc sort data=EnrlFlexE5;
by EMPLID CRSE_ID CLASS_SECTION;
run;
*;
data Item21_FE;
merge EnrlFlexE5 (in=x) ThreePeat1AA_FE(in=y);*EnrlFlexE5 has all courses that currently enrolled FLEX ENTRY students are taking;
by EMPLID CRSE_ID CLASS_SECTION;
if x=1 then output;
run;
*;
data Item21A_FE;
merge Item21_FE (in=x) ThreePeat1BB_FE(in=y);
by EMPLID;
if x=1 then output;
run;
*;
*Going to determine nonfunded courses;
*;
/*
data NotFCors;*Need to bring course attributes in to determine course funding;
*set test1.PS_CRSE_ATTRIBUTES;
set test1.PS_CLASS_ATTRIBUTE;
if CRSE_ATTR='CBRT' and CRSE_ATTR_VALUE='NONFUND' then output;
run;
*;
data NotFCors1;
set NotFCors;
Corse=CRSE_ID||CLASS_SECTION;
run;
*;
proc sort data=NotFCors1;
by Corse STRM;* EFFDT;
run;
*;
data NotFCors1a;
set NotFCors1;
*drop STRM;
by Corse;*CRSE_ID;
if last.Corse=1 then output;
run;
*;
data NotFCors1ab;
set NotFCors1a;
drop CRSE_OFFER_NBR SESSION_CODE STRM;
run;
*/

proc sort data=Item21A_FE;
by CRSE_ID CLASS_SECTION SESSION_CODE;
run;
*;
data Item21B_FE;
merge Item21A_FE(in=x) NotFCors1(in=y);
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
if x=1 then output;
run;
*;
data Item21C_FE;
set Item21B_FE;
if CRSE_ATTR1='CBRT' and CRSE_ATTR_VALUE1 in ('NONFUND','UNFUNDED') then Nonfund="Y";*student enrollend in nonfunded course;
if CRSE_ATTR1='CBRT' and CRSE_ATTR_VALUE1 in ('NONFUND','UNFUNDED') then NonFResason="NonF_CRSE_Atribute";*student enrollend in nonfunded course;
run;
*;
Proc sort data=Item21C_FE nodup;
by EMPLID CRSE_ID;
run;
*;
* Determine unfunded students due to the 30 and 45 hour rule;
data Census_FE;
set CensusFind1;
keep STRM1 FeCensusDt;
if STRM1="&term1" then output;
run;
*;
data Rule45_FE;
set test1.PS_STDNT_GRPS_HIST;
drop INSTITUTION LASTUPDOPRID SCC_LASTUPDTYPE COMMENTS;
if STDNT_GROUP in ("CB3N","CB4N") then do;
Rule45="Y";
STRM1="&term1";*adding this variable to merge with census date data;
output;*"CB3N"-30 hour rule,"CB4N"-45 hour rule- Exceeded limit;
end;
run; 
*;
data Rule45_A_FE;*need to add data regarding the census date to choose correct reccords from student groups;
merge Rule45_FE(in=x) Census_FE(in=y);
by STRM1;
run;
*;
data Rule45_B_FE;
set Rule45_A_FE;
drop STRM1;
if STDNT_GROUP in ("CB3N","CB4N") and EFFDT <= FeCensusDt then output;
run;
*;
proc sort data=Rule45_B_FE;
by EMPLID;
run;
*;
proc sort data=Item21C_FE;
by EMPLID;
run;
*;
*;
proc freq data=Rule45_FE;
table Rule45;
run;
*;
*MERGE WITH Item21B and then count SCH for those students;
data Item21D_FE;
merge Item21C_FE (in=x) Rule45_B_FE(in=y);  
by EMPLID;
if x=1 then output;
run;
*;
data Item21D1_FE;*eliminate graduate students from the 30-45 hour rule count;
set Item21D_FE;
if (ACAD_CAREER NE "UGRD" AND ACAD_PROG NE "UGRD") then Rule45="";
run;
*;
* Going to summaraize Not funded SCH;
data Item21F_FE;*going to output file with unfunded lines only to count unfunded SCH in the next step;
set Item21D1_FE;
if ThrPEAT='Y' then NonFResason="3-Peat";
if PEd='Y' then NonFResason="PhEducOnly";
if Rule45="Y" then NonFResason="R_30_45";
if ThrPEAT='Y' or PEd='Y' or Nonfund="Y" or Rule45="Y" or NonFResason="OnlineCoursesOnly" then output;
run;
*;
*;
data Item21FL_FE;*SCHNF is going to be variable that we report in Item21;
set Item21F_FE;
by EMPLID;
if first.EMPLID=1 then SCHNF1=0;
SCHNF1 + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item21Final_FE;
set Item21FL_FE;
keep EMPLID SCHNF1 ThrPEAT PEd Nonfund Rule45 NonFResason;
run;
*;
*Mergind data with final enrollment;
data Item21Enra_FE;
merge Item20Fla_FE(in=x) Item21Final_FE(in=y);
by EMPLID;
*if x=1 and y=0 then SCHNF=0; 
if x=1 then output;
run;
*;
data  Item21Enr_FE;
set  Item21Enra_FE;
if SCHNF1 NE . or SCHNF1 NE 0 then SCHNF=SCHNF1;
run;
*;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item22- SCH Developmental Not State Funded -FOR FLEX ENTRY STUDENTS                                                                                           ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*EnrlFlexE5 is temprorary file created in the begining has all reportable courses and students enrolled in them;
/*
data Developm;* Students in the Developmental corses exceeding 18 hours are in the 3-PEAT table marked as a "D";
set test1.PS_UTZ_CB_3PEATDEV;
run;
*;
proc sort data=Developm;
by PROCESS_INSTANCE;
run;
*;
data Developm1;
set Developm;
keep LastInstance PROCESS_INSTANCE;*Going to find out number of last run to eliminate all previous records in the table;
by PROCESS_INSTANCE;
if last.PROCESS_INSTANCE then do;
LastInstance=PROCESS_INSTANCE;*picking data from last run;
output;
end;
run;
*;
data Developm2;
merge Developm (in=x) Developm1(in=y);
if x=1 and PROCESS_INSTANCE=LastInstance then output;
by PROCESS_INSTANCE;
run;
*;
data Developm3;
set Developm2;
if utz_unfn_type='D' then do;*"D" for the students where development hours are greater than 18- makes them unfunded;
DevNotF='Y';*Yes for not been funded;
output;
end;
run;
*;
data Developm4;
set Developm3;
keep EMPLID DevNotF;
run;
*;
*/
data Developm_FE;* Students in the Developmental corses exceeding 18 hours are in the 3-PEAT table marked as a "D";
*set test1.PS_UTZ_CB_3PEATDEV;
set test1.PS_UTD_CB_3PEATDEV;
if STRM="&term1" then output;
run;
*;
proc sort data=Developm_FE;
by descending PROCESS_INSTANCE;
run;
*;
data instance_FE;
set Developm_FE;
keep PROCESS_INSTANCE;
run;
*;
data Developm1_FE;
set instance_FE (firstobs=1 obs=1);* Going to pick highest value for PROCESS_INSTANSE;
LastInstance=PROCESS_INSTANCE;
output;
run;
*;
proc sort data=Developm1_FE;
by PROCESS_INSTANCE;
run;
*;
proc sort data=Developm_FE;
by PROCESS_INSTANCE;
run;
*;
data Developm2_FE;
merge Developm_FE (in=x) Developm1_FE(in=y);
if x=1 and PROCESS_INSTANCE=LastInstance then output;
by PROCESS_INSTANCE;
run;
*;
data Developm3_FE;
set Developm2_FE;
if utd_unfn_type='D' then do;*"D" for the students where development hours are greater than 18- makes them unfunded;
DevNotF='Y';*Yes for not been funded;
output;
end;
run;
*;
data Developm4_FE;*This list has all students that appear in 3PEAT table as a students with exceeded developmental hours(greater that 18);
set Developm3_FE;
keep EMPLID DevNotF;
run;
*;
*-------------------------------------------------------------------------------------------------------------------------------------;
*;
*;
data AtrDev_FE;*Going to have list of all courses that consider Developmental in reporting semester;
set test1.PS_CLASS_ATTRIBUTE ;* picking developmental only courses;
keep CRSE_ID CLASS_SECTION STRM CRSE_ATTR_VALUE1 AllDev SESSION_CODE;
CRSE_ATTR_VALUE1=CRSE_ATTR_VALUE;
if STRM="&term1" and CRSE_ATTR = "CBRT" and CRSE_ATTR_VALUE="DVLP" THEN AllDev="Y";*AllDev- will stand for all developmental, funded and nonfunded included flag;
if STRM="&term1" and CRSE_ATTR = "CBRT" and CRSE_ATTR_VALUE="DVLP" then output;
run;
*;
proc sort data=EnrlFlexE5;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
run;
*;
proc sort data=AtrDev_FE;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
run;
*;
data Item_A22_FE;
merge EnrlFlexE5 (in=x) AtrDev_FE(in=y);*EnrlFlexE5 has all courses that currently enrolled students are taking in flex entry courses;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
if x=1 then output;
run;
*;
proc sort data=Item_A22_FE;
by EMPLID;
run;
*;
data Item_B22_FE;
merge Item_A22_FE(in=x) Developm4_FE(in=y);*Going to determine which Developmental courses are unfunded once;
by EMPLID;
if x=1 then output;
run;

* GOING TO OUTPUT ONLY UNFUNDED DEVELOPMENTAL HOURS TO REPORT IN THIS ITEM;
data Item22A_FE;*going output only students who fall in this category of Development courses where SCH greater than 18-become unfunded;
set Item_B22_FE;
if AllDev="Y" and DevNotF='Y' then output;
run; 
*;
*Summarazing all hours for students above to be reported in Item22;
data Item22B_FE;*SCHDevNF is going to be variable that we report in Item22;
set Item22A_FE;
by EMPLID;
if first.EMPLID=1 then SCHDevNF=0;
SCHDevNF + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item22C_FE;
set Item22B_FE;
keep EMPLID DevNotF SCHDevNF;*SCHDevNF is going to be variable that we report in Item22;
run;
*;
*Merging item above with final enrollment;
data Item22D_FE;
merge Item21Enr_FE(in=x) Item22C_FE(in=y);
by EMPLID;
if x=1 and y=0 then SCHDevNF=0; 
if x=1 then output;
run;
*;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item23- SCH- Inter-institutionall Load NOT state funded                                                                                                       ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*WE WILL NEED TO FINISH THIS ITEM AFTER BRING IN INTER-INSTITUTIONAL DATA. RIGHT NOW REGISTRAR OFFICE HAVE NOT PUT THOSE IN-CONFERMED WITH TODD;






*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item24- SCH Load state funded- for Flex entry students                                                                                                        ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
*We are going to merge all courses table with tables that was created to identify nonfunded courses or students and will remove those before counting hours;

data AllDevelopmental_FE;*Etracting only developmental courses funded and nonfunded, since they not get reported in this item. Will delete below.;
set Item_B22_FE;
keep EMPLID CRSE_ID CLASS_SECTION strm AllDev SESSION_CODE;
if AllDev="Y" then output;
run;
* Goint to merge Item21d1_FE that has ALL courses with several nonfunded atribbutes attached to it with the Nonfunded Developmental courses;
data NotFunDel_FE;
merge Item21d1_FE(in=x) AllDevelopmental_FE(in=y);
by EMPLID CRSE_ID CLASS_SECTION strm SESSION_CODE;
run;
*;
data FundedL_FE;
set NotFunDel_FE;
if ThrPEAT='Y' or PEd='Y' or Nonfund="Y" or Rule45="Y" or  AllDev="Y" or NonFResason="OnlineCoursesOnly" then delete;
run;
*;
proc sort data=FundedL_FE;
by EMPLID;
run;
* Going sum Funded SCH by student;
data Item24D_FE;*SCHDevNF is going to be variable that we report in Item24;
set FundedL_FE;
by EMPLID;
if first.EMPLID=1 then SCHFund=0;*SCHFund is going to be reported in the Item24;
SCHFund + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item24E_FE;
set Item24D_FE;
keep EMPLID SCHFund;*SCHFund is going to be variable that we report in Item22;
run;
*;
*Merging item above with final enrollment;
data Item24F_FE;
merge Item22D_FE(in=x) Item24E_FE(in=y);
by EMPLID;
if x=1 and y=0 then SCHFund=0; 
if x=1 then output;
run;
*;
proc means data=Item24F_FE sum;
var SCHFund;
run;
*;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item25- SCH Developmental state funded- for Flex entries                                                                                                      ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;

data Item25_FE;
set Item_B22_FE;
if AllDev="Y" and DevNotF NE 'Y'  then output;
run;
*;
* Going sum Funded Developmental SCH by student;
data Item25C_FE;*SCHDevFd is going to be variable that we report in Item24;
set Item25_FE;
by EMPLID;
if first.EMPLID=1 then SCHDevFd=0;*SCHFund is going to be reported in the Item24;
SCHDevFd + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item25D_FE;
set Item25C_FE;
keep EMPLID SCHDevFd;*SCHDevNF is going to be variable that we report in Item25;
run;
*;
*Merging item above with final enrollment;
data Item25E_FE;
merge Item24F_FE(in=x) Item25D_FE(in=y);
by EMPLID;
if x=1 and y=0 then SCHDevFd=0; 
if x=1 then output;
run;
*;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item26- SCH of Undegraduate Degree Program FOR FLEX ENTRY                                                                                                     ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item26_FE;
set Item25E_FE;
if Level1 in ("3","4") and ACAD_PROG = 'UGNDS' then Item26=120;*nondegree seeking juniors and seniours;
if Level1 in ("3","4") and ACAD_PROG NE 'UGNDS' then Item26=999;*999 is a flag for the DEGREE seeking juniors and seniours.In the next step we going to find out SCH to report for them;
if Level1 in ("3","4") and ACAD_PROG NE 'UGNDS' then Item26X=999;*999 is a flag1 for people with 2 active degrees.We are going default them to 120 hours;
run;
*;
proc sort data=Item26_FE;
by ACAD_PLAN;
run;
*;
/*
data Item26Aa;
set test1.PS_UTD_SEM_HRS_TBL;
by ACAD_PLAN;
if last.ACAD_PLAN=1 then output;
run;
*;
*/
data Item26A_FE;
merge Item26_FE(in=x) Item26Aa(in=y);*UTD_SEM_HRS_TBL is a custom UTD modification to track SCH for undegrad programs;
by ACAD_PLAN;
if x=1 then output;
run;
*;
data Item26Ba_FE;
set Item26A_FE;
if Item26= . then Item26=0;
run;
*;
data Item26B_FE;
set Item26Ba_FE;
if Item26=999 then Item26=UTD_SEM_CR_HRS;
if Item26X=999 and UTD_SEM_CR_HRS=. then Item26=120;* 120 is default value;
run;
*;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item27- Students affected by Undegraduate Funding Limit- FOR FLEX ENTRY                                                                                       ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Determine unfunded students due to the 30 and 45 hour rule;
/*
data Item27;
set test1.PS_STDNT_GRPS_HIST;
keep EMPLID STDNT_GROUP Item27;
if STDNT_GROUP="CB3L" then Item27="2";
if STDNT_GROUP="CB4L" then Item27="1";
if STDNT_GROUP in ("CB3L","CB4L") then OUTPUT;
*Rule45="Y";
*output;*"CB3N"-30 hour rule,"CB4N"-45 hour rule- Exceeded limit;
*end;
run; 
*;
proc sort data=Item27 nodup;
by EMPLID Item27;
run;
*;
data Item27A;
set Item27;
by EMPLID;
if first.EMPLID then output;*When students belong to 2 student groups at the same time, we are going to report 40 hour rule, before reporting 30hour rule.This came from Todd-Registrar office,see email;
run;
*;
*/
*MERGE WITH enrollment;
proc sort data=Item26B_FE;
by EMPLID;
run;
*;
data Item27B_FE;
merge Item26B_FE(in=x) Item27A(in=y);  
by EMPLID;
if x=1 then output;
run;
*;
data Item27C_FE;
set Item27B_FE;
if Item27="" then Item27="0";
if Item27 ne "" and Level1 in ("5","6","7","8") then Item27="0";*For students who was in student groups, but not undegraduate students anymore-defer them back to "0";
run;
*--------------------------------------------------------------------------------------------------------------------;
* Brining in student's name	Item28, Item29, Item30- FOR FLEX ENTRYS                                                  ;
*--------------------------------------------------------------------------------------------------------------------;
/*
data NAMES;
set test1.PS_NAMES;
if NAME_TYPE = 'PRI' then output;
run;
*;
proc sort data=NAMES;
by EMPLID EFFDT;
RUN;
*;
data NAMES1;
set NAMES;
keep EMPLID EFFDT EFF_STATUS LAST_NAME FIRST_NAME MIDDLE_NAME NAME_TYPE; 
by EMPLID EFFDT;
if last.EMPLID then output;
run; 
*;
data NAMES2; *MERGE NAMES2 WITH THE MAIN TABLE;
set NAMES1;
keep EMPLID EFFDT EFF_STATUS LAST_NAME1 FIRST_NAME1 MIDDLE_NAME MI NAME_TYPE;
MI=	substr(MIDDLE_NAME,1,1);
LNAME=LEFT(LAST_NAME);
FNAME=LEFT(FIRST_NAME);
LAST_NAME1=substr(LNAME,1,20);
FIRST_NAME1=substr(FNAME,1,10);
run;
*/
* Merging cohort wiht names;
data ItemNAMES_FE; 
merge Item27C_FE(in=X) NAMES2(in=y);
by EMPLID;
if x=1 then output;
run; 

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item31- SCH of students enrolled in dual courses- FOR FLEX ENTRY                                                                                              ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;

data DualC_FE;
set test1.PS_ADM_APPL_PROG;
if ADMIT_TERM in ("&term1") and PROG_ACTION = "ADMT" and PROG_REASON = "UAHS" then do;
DualC="Y";
output;
end;
run; 
*;

*Merging data with enrollment to find out students that will be reported this term;
data DualC1_FE;
merge ItemNAMES_FE(in=x) DualC_FE(in=y);
by EMPLID;
if x=1 and DualC="Y" then output;*Outputing only students enrolled in Dual Credit Courses to count their SCH;
run;
*;
* Going sum Funded Developmental SCH by student;
data DualC2_FE;*SCHDual is going to be variable that we report in Item31;
set DualC1_FE;
by EMPLID;
if first.EMPLID=1 then SCHDual=0;*SCHDual is going to be reported in the Item31;
SCHDual + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data DualC3_FE;
set DualC2_FE;
keep EMPLID SCHDual;*SCHDual is going to be variable that we report in Item31;
run;
*;
*Merging item above with final enrollment;
data Item31_FE;
merge ItemNAMES_FE(in=x) DualC3_FE(in=y);
by EMPLID;
if x=1 and y=0 then SCHDual=0; 
if x=1 then output;
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item32- Restricted Program Admission FOR FLEX ENTRY                                                                                                           ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item32_FE;
set Item31_FE;*Item31 has all information needed for this item;
IF Acad_Plan="AUD_AUD" then Item32="40";
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item33- Non-degree seeking student FOR FLEX ENTRY                                                                                                             ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item33_FE;
set Item32_FE;*Item5 has all information needed for this item;
If (ACAD_CAREER="UGRD" and ACAD_PROG = "UGNDS") or (ACAD_CAREER = "GRAD" and ACAD_PROG in ("GRAD","CERT","SPEC")) then Item33="1";
else Item33='0';
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item34- Non-disclosure -FOR FLEX ENTRY                                                                                                                        ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
/*
data Item34;
set test1.PS_PERSON_SA;
keep EMPLID FERPA Item34;
IF FERPA="Y" then do;
Item34="2";
output;* Outputing students that put their FERPA restriction as Yes in the system;
end;
run;
*;
proc sort data=Item34 nodup;
by EMPLID;
run;
*;
*/
proc sort data=Item33_FE;
by EMPLID;
run;
*Merging FERPA data with enrollment;
data Item34A_FE;
merge Item33_FE(in=x) Item34(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item34B_FE;
set Item34A_FE;
if Item34="" then Item34="0";
run;
*;
proc freq data=Item34B_FE;
title "FERPA-Item34 frequency";
table Item34;
run; 

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item35- Graduate SCH of seniors within 12 hours of graduation for flex entry students                                                                         ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data CumHrs_FE;
set test1.PS_STDNT_CAR_TERM;
keep EMPLID ACAD_CAREER TOT_PASSD_PRGRSS STRM SCHTotal;
SCHTotal=TOT_PASSD_PRGRSS;
if STRM="&term1" then output;
run;
*;
data CumHrs_x_FE;
set CumHrs_FE;
if ACAD_CAREER="UGRD" then output;
run;
*;
proc sort data=CumHrs_x_FE;
by EMPLID STRM;
run;
*;
* Going find out sum ALL SCH by student- not for term, but through their history;
data CumHrs1;*SCHDual is going to be variable that we report in Item31;
set CumHrs_x_FE;
keep EMPLID TOT_PASSD_PRGRSS SCHTotal;*TOT_PASSD_PRGRSS- is "Overall student cumulative SCH";
by EMPLID;
if last.EMPLID=1 then output;*SCHTotal is variable to show total SCH taking by student troughtout their history at UTD;
run;
*;
*/
*Mering Cumulative hourse with EnrlFlexE5 containing all FLEX ENTRY students and their courses to be reported;
*;
proc sort data=EnrlFlexE5;
by EMPLID;
run;
*;
data Item35_FE;
merge EnrlFlexE5(in=x) CumHrs1(in=y);
by EMPLID;
if x=1 then output;
run;
*;
proc sort data=Item35_FE;
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;
run;
*;
/*
data GradCors;*Outputing attributes for graduate courses;
*set test1.PS_CRSE_ATTRIBUTES;
set test1.PS_CLASS_ATTRIBUTE;
keep CRSE_ID CLASS_SECTION STRM CRSE_ATTR1 CRSE_ATTR_VALUE1;
CRSE_ATTR1=CRSE_ATTR;
CRSE_ATTR_VALUE1=CRSE_ATTR_VALUE;
if CRSE_ATTR='CLVL' and CRSE_ATTR_VALUE in ("5","6") then output;
run;
*;
proc sort data=GradCors;
by CRSE_ID CLASS_SECTION STRM;* CRSE_OFFER_NBR SESSION_CODE ;
run;
*;
*/
data Item35A_FE;
merge Item35_FE(in=x) GradCors(in=y);
by CRSE_ID CLASS_SECTION STRM SESSION_CODE;*CRSE_OFFER_NBR SESSION_CODE ;
if x=1 then output;
run;
*;
data Item35B_FE;
set Item35A_FE;
if CRSE_ATTR2='CLVL' and CRSE_ATTR_VALUE2 in ("5","6") then do;* and (Item26-TOT_PASSD_PRGRSS) LE 12;
CrsLevel='A';*Graduate level course;
output;
end;
run;
*;
* merging with nonfunded courses to subtract nonfunded hours later;
data Nonfund_FE;
set Item21f_FE;
keep emplid CRSE_ID CLASS_SECTION strm SESSION_CODE;
run;
*;
proc sort data= Nonfund_FE;
by emplid CRSE_ID CLASS_SECTION strm SESSION_CODE;
run;
*;
proc sort data=Item35B_FE;
by emplid CRSE_ID CLASS_SECTION strm SESSION_CODE;
run; 
*;
data GradNonFund_FE;
merge Item35B_FE(in=x) Nonfund_FE(in=y);
by emplid CRSE_ID CLASS_SECTION strm SESSION_CODE;
if x=1 and y=1 then output;
run;
*;
data GradNonFund1_FE;
set GradNonFund_FE;
keep emplid UNT_TAKEN;
run;
*;
*Going to sum nonfunded graduate level hours by student so I could subtract it later;
data GradNonFund2_FE;
set GradNonFund1_FE;
by EMPLID;
if first.EMPLID=1 then Subtract=0;
Subtract + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data GradNonFund3_FE;
set GradNonFund2_FE;
keep EMPLID Subtract;
run;
*-------------------------------------------------------------------------------------------;
proc sort data=Item35B_FE;
by EMPLID;
run;
*Going to sum SCH for Graduate level courses by students;
data Item35C_FE;
set Item35B_FE;
by EMPLID;
if first.EMPLID=1 then Sum35=0;
Sum35 + UNT_TAKEN;
if last.EMPLID=1 then output;
run;
*;
data Item35D_FE;
set Item35C_FE;
keep EMPLID SCHTotal Sum35;*SCHDevNF is going to be variable that we report in Item25;
run;
*;
* Merging back with cohort to determine hours to be reported in Item35;
data Item35E_FE;
merge Item34b_FE(in=x) Item35D_FE (in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item35F_FE;
set Item35E_FE;
if Level1="4" and (Item26 - SCHTotal) LE 12 then Item35=Sum35;
*Else Item35=0;
run;
*;
data Item35FX_FE;
merge Item35F_FE(in=x) GradNonFund3_FE(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item35G_FE;
set Item35FX_FE;
if Subtract= . then Subtract=0;
if Item35= . then Item35=0;
if Item35>0 then SCHFund=SCHFund- (Item35-Subtract);* minus nonfunded hourse;
if Item35>0 then Item35=Item35-Subtract;* Changed on 11-18-2009;
run;
*;
proc means data=Item35G_FE sum;
var Item35;
run;




*;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Item36- High School Code FOR FLEX ENTRY                                                                                                                       ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item36_FE;
set Item34b_FE;
if Item9 = "000001" and ACAD_CAREER="UGRD" then output;
run;
*;
/*
data StudORGID;
merge test1.PS_ACAD_HISTORY(in=x) test1.PS_EXT_ORG_TBL(in=y) test1.PS_EXT_ORG_TBL_ADM(in=t) test1.PS_EXT_ORG_SRCH(in=p);
by EXT_ORG_ID;
if x=1 then output; 
run;
*;
proc sort data=StudORGID;
by EMPLID EFFDT;
RUN;
*;
data StudORGID1;
set StudORGID;
keep EMPLID EXT_ORG_ID OTH_NAME_SORT_SRCH EXT_ORG_TYPE DESCR DESCRSHORT ATP_CD Item36;
if COUNTRY ne 'USA' then Item36="999999";
else Item36=ATP_CD;
if EXT_ORG_TYPE="HS" and  ATP_CD NE "" then output;
run;
*;
data StudORGID2;
set StudORGID1;
by EMPLID;
if last.EMPLID=1 then output;
run;
*;*/
data Item36A_FE;
merge Item36_FE(in=x) StudORGID2(IN=Y);
BY EMPLID;
if x=1 then output;
run;
*;
/*
proc print data=Item36A(obs=3);
title "High school code is missing for following students. Please advise.";
where ATP_CD eq "";
var EMPLID ATP_CD Item36;
run;
*/
*;
*Merging with Cohort;
data Item36B_FE;
merge Item35G_FE(in=x) Item36A_FE(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item36B1_FE;
set Item36B_FE;
FlexE='1';
run;
*;
*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------;
*Reporting ethnicity under new requirements for flex entry students                                                                                                           ;
*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------;
*Merging ethnicity data with flex entry data;
data Item39ComplA_FE;
merge Item36B1_FE(in=x) Item39Compl(in=y);
by EMPLID;
if x=1 then output;
run;
*;
data Item39ComplAB_FE;
set Item39ComplA_FE;
if Item38="" then Item38="3";
if Item38 not in ("1") and Item39A="" and Item39B="" and Item39C="" and Item39D="" and Item39E="" and Item39F="" and Item39G= "" then Item39F="7";
if Item39F="7" and (Item39A="1" OR Item39B="2" OR Item39C="4" OR Item39D="5" OR Item39E="6" OR Item39G="8") then Item39F="";

/*Per conversation with Sharon decision was reached June 2010 to adjust logic to mach IPEDS where Item39's will be only for non-Hispanics;
if Item38="1" AND (Item39A NE "" OR Item39B NE "" OR Item39C NE "" OR Item39D NE "" OR Item39E NE "" OR Item39F NE "" OR Item39G NE  "" ) then do;
Item39A = "";
Item39B = "";
Item39C = ""; 
Item39D = "";
Item39E = ""; 
Item39F = ""; 
Item39G = "";
end;
*/
* Have to change the logic based on email from state- CB wants Hispanic people who has not chosen race been reported as unknown-7;
if Item38="1" AND (Item39A EQ "" AND Item39B EQ "" AND Item39C EQ "" AND Item39D EQ "" AND Item39E EQ "" AND Item39F EQ "" AND Item39G EQ  "" ) then Item39F="7";
run;

*--------------------------------------------------------------------------------------------------------;
* ITEM17- Remote Campuse-UTD starting fall 2010 CAP programs for Flex Entry                              ;
*--------------------------------------------------------------------------------------------------------;
data Item39ComplABC_FE;
merge Item39ComplAB_FE(in=x) CAP1(in=y);
by EMPLID;
drop STDNT_GROUP;
if STDNT_GROUP="CAP" AND Item9="000001" then Item17="6";*and  Item9='000001' was added Fall 2011 due to 
Sharon’s and Nick’s request after the interpreting manual than CAP students here should be reported only once when first time in college;
if x=1 then output;
run;
*;

*-------------------------------------------------------------------------------------------------------------------------------------;
* WRITING OUT Flex Entry list                                                                                                         ;
*-------------------------------------------------------------------------------------------------------------------------------------;
*WRITING THIS REPORT OUT;
data Flexnodup;
set Item39ComplA_FE;
keep emplid NATIONAL_ID1;
run;
*;
proc sort data=Flexnodup nodupkey;
by emplid;
run;
*;
filename Prelim2 'C:\Documents and Settings\axm053100\Desktop\Error\EnrollFlexEntrynt.csv';
data _NULL_;
FILE Prelim2;
IF _N_=1 THEN DO;
put "List of FlexEntry on CBM001";
put "EMPLID" "," "SSN";
END;
set Flexnodup;
PUT  EMPLID "," NATIONAL_ID1;
run; 
*;
*;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* CONCANTINATING REGULAR FILE WITH FLEX ENTRY FILE                                                                                                              ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data FinalCB1;
set Item39ComplABC Item39ComplABC_FE;
run;
*;
proc sort data=FinalCB1;
by EMPLID;
run;

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* WRITING FILE OUT TO SUBMIT TO CB                                                                                                                              ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item36Bform;
set FinalCB1;
if SCHD1=. then SCHD1=0;
if SCHNF=. then  SCHNF=0;
if Level1="7" and Item19="" then Item19="00";
*--------------------------------------------------------------------------------------------------------------------------------;
*hardcoding people below by Dr Redlinger request-only for Fall 2011 (updated based on Jim's report on 09-26-2011);
if EMPLID="" then Item18="26010100";*STEM is going to be primary plan;



*--------------------------------------------------------------------------------------------------------------------------------;
format SCHL Z2.0 SCHLoff Z2.0 SCHD1 Z2.0 SCHNF Z2.0 SCHDevNF Z2.0 SCHFund Z2.0 SCHDevFd Z2.0 SCHDual Z2.0 Item26 Z3.0 Item35 Z2.0;
run;
*;
*;
filename output1 "C:\Documents and Settings\axm053100\Desktop\CBM001.txt";
data _NULL_;
FILE OUTPUT1;
IF _N_=1 THEN DO;
RN=_N_;
format RN Z5.;
put @1 "HY2K" @5 "009741" @11 "CBM001" @17 "&termcb" @18 "&year" @22 "C" @23 "0124" @27 "LAWRENCE REDLINGER" @46 "REDLING@UTDALLAS.EDU";
END; 
SET Item36Bform END=EOF;
put @1 '1' @2 '009741' @8 NATIONAL_ID1 @17 SEX @18 Level1 @19 BIRTHDATE @27 Item7 @28 RESIDENCY1 @31 Item9 @37 SCHL @39 SCHLoff @41 SCHD1 @44 "&termCB" @45 "&year"
@49 "00" @51 FlexE @52 Item17 @53 Item18 @61 Item19 @63 Item20F @65 SCHNF @67 SCHDevNF @69 "00" @71 SCHFund @73 SCHDevFd @75 Item26 @78 Item27 @79 LAST_NAME1 @99 FIRST_NAME1 @109 MI
@110 SCHDual @112 Item32 @114 Item33 @115 Item34 @116 Item35 @118 Item36 @133 Item38 @134 Item39A @135 Item39B @136 Item39C @137 Item39D @138 Item39E @139 Item39F @140 Item39G;
IF EOF=1 THEN DO;
put @1 'EOF1' @5 _N_;
END;
run;
*;
*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------;
*;
*---------------------------------------------;
*unknown ethnicity list                       ;
*---------------------------------------------;
data EthUnkn;
set Item36Bform;
if Item38 eq "3" and Item39F eq "7" and Item39E ne "6" then output;
run;
*;
data EthUnk1;
merge EthUnkn(in=x) Visa3(in=y);
by emplid;
if x=1 then output;
run;
*;
proc print data=EthUnk1;
var emplid VISA_PERMIT_type Item38  Item39A Item39B Item39C Item39D Item39E Item39F Item39G International;
run;
*;
filename ErrorA1 'C:\Documents and Settings\axm053100\Desktop\Error\CBM001-Ethnicity_Unknown.csv';
data _NULL_;
FILE ErrorA1 DLM=',';
IF _N_=1 THEN DO;
put "Preliminary CBM001-Fall 2010- Ethnicity unknown ";
put "EMPLID" "," "FIRST_NAME" "," "LAST_NAME" "," "VISA_PERMIT_TYPE" "," "Item38" "," "Item39A" "," "Item39B" "," "Item39C" "," "Item39D" "," "Item39E" "," "Item39F" "," "Item39G"
"," "International";
END;
set EthUnk1;
put EMPLID FIRST_NAME1 LAST_NAME1 VISA_PERMIT_type Item38  Item39A Item39B Item39C Item39D Item39E Item39F Item39G International;
*var emplid Item38 Item39A Item39B Item39C Item39D Item39E Item39F Item39G;
run; 
*;
*;
*;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* WRITING FILE OUT EXACT CBM001 WITH EMPLID                                                                                                                      ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item36Bform;
set FinalCB1;
if SCHD1=. then SCHD1=0;
if SCHNF=. then  SCHNF=0;
if Level1="7" and Item19="" then Item19="00";
*-------------------------------------------------------------------------;
*hardcoding people below by Dr Redlinger request-only for Fall 2011 (updated based on Jim's report on 09-26-2011);
if EMPLID="" then Item18="26010100";*STEM is going to be primary plan;


*------------------------------------------------------------------------------;
* Going to check by code below if student is in nonfunded program              ;
*------------------------------------------------------------------------------;
if ACAD_PLAN in ("UGS_NF","HCMGMSNF","MBA_NDNF","MIMSNDNF","MSPMNDNF","MAS_MSNF","MEDMNDNF","EMGTNDNF","MBA_MBANF","MIMSMANF","MSPMMSNF",
"HCMGNDNF","MEDMMSNF","MEDMMSNF" , "MEDMNDNF","AIM_MSNF","ACCTMSNF","SYSMMSNF") then NonFResason="NF_Program";
*------------------------------------------------------------------------------;
format SCHL Z2.0 SCHLoff Z2.0 SCHD1 Z2.0 SCHNF Z2.0 SCHDevNF Z2.0 SCHFund Z2.0 SCHDevFd Z2.0 SCHDual Z2.0 Item26 Z3.0 Item35 Z2.0;
run;
*;
*;
filename output1 "C:\Documents and Settings\axm053100\Desktop\CBM001withEMPLID.txt";
data _NULL_;
FILE OUTPUT1;
IF _N_=1 THEN DO;
RN=_N_;
format RN Z5.;
put @1 "HY2K" @5 "009741" @11 "CBM001" @17 "&termcb" @18 "&year" @22 "C" @23 "0124" @27 "LAWRENCE REDLINGER" @46 "REDLING@UTDALLAS.EDU";
END; 
SET Item36Bform END=EOF;
put @1 '1' @2 '009741' @8 NATIONAL_ID1 @17 SEX @18 Level1 @19 BIRTHDATE @27 Item7 @28 RESIDENCY1 @31 Item9 @37 SCHL @39 SCHLoff @41 SCHD1 @44 "&termCB" @45 "&year"
@49 "00" @51 FlexE @52 Item17 @53 Item18 @61 Item19 @63 Item20F @65 SCHNF @67 SCHDevNF @69 "00" @71 SCHFund @73 SCHDevFd @75 Item26 @78 Item27 @79 LAST_NAME1 @99 FIRST_NAME1 @109 MI
@110 SCHDual @112 Item32 @114 Item33 @115 Item34 @116 Item35 @118 Item36 @133 Item38 @134 Item39A @135 Item39B @136 Item39C @137 Item39D @138 Item39E @139 Item39F @140 Item39G @143 EMPLID @160 ACAD_PLAN @170 NonFResason;
IF EOF=1 THEN DO;
put @1 'EOF1' @5 _N_;
END;
run;
*;
proc print data=Item36Bform;
where RESIDENCY1="";
var emplid;
run;
*;
*;
*;
*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------;
*ADDITIONAL Data Audit implemented September 2011;
data test12;
set Item36Bform;
TotalSCHOffOn=(SCHL + SCHLoff);
TotalSCH=(SCHNF + SCHDevNF + SCHFund + SCHDevFd + Item35);
run;
*;
PROC PRINT DATA=test12;
where TotalSCHOffOn ne TotalSCH AND TotalSCHOffOn gt 0;*"0" appears for second line for PHD students with several funding codes;
var emplid TotalSCHOffOn TotalSCH SCHD1 SCHNF SCHDevNF SCHFund SCHDevFd;
run;

*NEED TEST AND COMPLEETE THIS EDIT;
*************************************;
*EDIT  1                             ;
*************************************;
*WRITING THIS REPORT OUT;
filename ErzaB 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-SCH-1.csv';
data _NULL_;
FILE ErrzaB DLM=',';
IF _N_=1 THEN DO;
put "Total SCH ON and OFF campus not equal to sum of funded and nonfunded SCH. CHECK SAS PROGRAM FOR AN ERROR! ";
put "EMPLID" "," "TOTAL SCH on and off campus" "," "Total Sum of SCH" "," "DoctoralFunded" "," "Item21" "," "Item22" "," "Item24" "," "Item25"
"," "Item35";
END;
set test12;
IF TotalSCHOffOn gt TotalSCH AND TotalSCHOffOn gt 0;
PUT  EMPLID TotalSCHOffOn TotalSCH SCHD1 SCHNF SCHDevNF SCHFund SCHDevFd Item35;
run; 
*;
*ADDITIONAL DATA AUDITS;
data testF;
set Item36Bform;
Total=(SCHL + SCHLoff);
run;
*;
PROC PRINT DATA=testF;
where SCHD1 gt total AND Total gt 0;*"0" appears for second line for PHD students with several funding codes;
var emplid SCHD1 total;
run;
*;
*************************************;
*EDIT  2                             ;
*************************************;
*WRITING THIS REPORT OUT;
filename Err12 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-PHD-SCH-Comb.csv';
data _NULL_;
FILE Err12 DLM=',';
IF _N_=1 THEN DO;
put "Total Funded Doctoral SCH (Item11) for Not Flex and Flex Entry Students are greater than Total sum of on campus and off campus SCH. CHECK SAS PROGRAM FOR AN ERROR! ";
put "EMPLID" "," "TOTAL SCH on and off campus" "," "FUNDED Doctoral SCH Item11" "," "SCH on campus" "," "SCH off campus";
END;
set testF;
if SCHD1 gt total AND Total gt 0;
PUT  EMPLID Total SCHD1 SCHL SCHLoff;
run; 
*;
*************************************;
*EDIT  3                             ;
*************************************;
data testF1;
set testF;
by EMPLID;
if first.EMPLID=1 then do;
Total1=0;
SCHD1F=0;
SCHD1F + SCHD1;
Total1 + Total;
if last.EMPLID=1 then output;
end;
run;
*;
proc print data=testf1;
Title "Auditing PHD students. Error for Doctoral Funded SCH to be greater than total SCH(on and off campus)";
where SCHD1 gt 0 AND SCHD1 GT Total1;
var emplid Total1 SCHD1F;
run;
*WRITING THIS REPORT OUT;
filename Err12t 'C:\Documents and Settings\axm053100\Desktop\Error\CB1-SCH-ErrorPhD.csv';
data _NULL_;
FILE Err12t DLM=',';
IF _N_=1 THEN DO;
put "Auditing PHD students. Error for Doctoral Funded SCH to be greater than total SCH(on and off campus)";
put "EMPLID" "," "TOTAL SCH on and off campus" "," "TOTAL FUNDED Doctoral SCH Item11";
END;
set testF1;
where SCHD1 gt 0 AND SCHD1 GT Total1;
PUT  emplid Total1 SCHD1F;
run; 
*;

/*
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* Brining in frozen file's ID's- frozen file is the file chosen by Dr Redlinger to be final CBM001 file. We are going to merge it with the actual data that we  ;
* pull fromt the system today to get fresh details                                                                                                              ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;

filename filrF 'E:\Anna\CBM001\Fall 2010\09-29-2010-FINAL\CBM001withEMPLID_UPDATED_FinalDrR.TXT';

*-----------------------------------------------------------------------------*
| PROCESS CBM001 frozen FILE FOR comparison                                   |
*-----------------------------------------------------------------------------*;
data tempFr;
infile filrF MISSOVER;
input @1 c $1. @;
if c='H' or c='E' then delete;
else input @8 SSN $9. @17 gender $1. @18 Item5 $1. @19 Item6 8. @027 Item7 $1. @028 Item8 $3.
      @031 Item9  $6. @037 Item10A 2. @039 Item10B 2. @041 Item11 2. @043 Item12 $1. @044 SEMESTER 1.
      @045 YEAR 4. @049 Item15 2. @051 Item16 $1. @052 Item17 $1. @053 Item18 $8. @061 Item19 $2.
      @063 Item20 $2. @065 Item21 $2. @067 Item22 2. @069 Item23 2. @071 Item24 2. @073 Item25 2. @075 Item26 3.
      @078 Item27 $1. @079 Item28 $20. @099 Item29 $10. @109 Item30 $1. @110 Item31 2. @112 Item32 $2.
      @114 Item33 1. @115 Item34 1. @ 116 Item35 2. @118 Item36 2. @124 Item37 $9. @143 EMPLID $10.;
run;
*;
data tempFr1;
set tempFr;
lengtH EMPLID1 $11.;
keep EMPLID1 SSN;
EMPLID1=EMPLID;
run;
*;
proc sort data=tempFr1;
by EMPLID1;
run;
*;
data CB1_ORACLE;
set Item36Bform;
EMPLID1=EMPLID;
run;
*;
proc sort data=CB1_ORACLE;
by EMPLID1;
run;
*;

proc contents data=CB1_ORACLE;
run;

data Final Added Lost;
merge tempFr1(in=x) CB1_ORACLE(in=y);
by EMPLID1;
if x=1 then output Final;
if x=0 and y=1 then output Added;
if x=1 and y=0 then output Lost;
run;



data test;
set Final;
keep emplid;
run;

proc sort data=test nodup;
by emplid;
run;


*Writing out updated CBM001 file to send to the state;
filename output1 "C:\Documents and Settings\axm053100\Desktop\CBM001.txt";
data _NULL_;
FILE OUTPUT1;
IF _N_=1 THEN DO;
RN=_N_;
format RN Z5.;
put @1 "HY2K" @5 "009741" @11 "CBM001" @17 "&termcb" @18 "&year" @22 "C" @23 "0124" @27 "LAWRENCE REDLINGER" @46 "REDLING@UTDALLAS.EDU";
END; 
SET Final END=EOF;
put @1 '1' @2 '009741' @8 NATIONAL_ID1 @17 SEX @18 Level1 @19 BIRTHDATE @27 Item7 @28 RESIDENCY1 @31 Item9 @37 SCHL @39 SCHLoff @41 SCHD1 @44 "&termCB" @45 "&year"
@49 "00" @51 FlexE @52 Item17 @53 Item18 @61 Item19 @63 Item20F @65 SCHNF @67 SCHDevNF @69 "00" @71 SCHFund @73 SCHDevFd @75 Item26 @78 Item27 @79 LAST_NAME1 @99 FIRST_NAME1 @109 MI
@110 SCHDual @112 Item32 @114 Item33 @115 Item34 @116 Item35 @118 Item36 @133 Item38 @134 Item39A @135 Item39B @136 Item39C @137 Item39D @138 Item39E @139 Item39F @140 Item39G;
IF EOF=1 THEN DO;
put @1 'EOF1' @5 _N_;
END;
run;

*;
*proc freq data=Final;
*tables Item39a;
*run;

*proc print data=Final;
*where Item39a="1" and (Item39B ne "" or Item39C ne "" or Item39D ne "" or  Item39E ne "" or  Item39F ne "" or Item39G ne "");
*run;


*Writing out updated CBM001 file to send to the state;
filename output1 "C:\Documents and Settings\axm053100\Desktop\CBM001withEMPLID.txt";
data _NULL_;
FILE OUTPUT1;
IF _N_=1 THEN DO;
RN=_N_;
format RN Z5.;
put @1 "HY2K" @5 "009741" @11 "CBM001" @17 "&termcb" @18 "&year" @22 "C" @23 "0124" @27 "LAWRENCE REDLINGER" @46 "REDLING@UTDALLAS.EDU";
END; 
SET Final END=EOF;
put @1 '1' @2 '009741' @8 NATIONAL_ID1 @17 SEX @18 Level1 @19 BIRTHDATE @27 Item7 @28 RESIDENCY1 @31 Item9 @37 SCHL @39 SCHLoff @41 SCHD1 @44 "&termCB" @45 "&year"
@49 "00" @51 FlexE @52 Item17 @53 Item18 @61 Item19 @63 Item20F @65 SCHNF @67 SCHDevNF @69 "00" @71 SCHFund @73 SCHDevFd @75 Item26 @78 Item27 @79 LAST_NAME1 @99 FIRST_NAME1 @109 MI
@110 SCHDual @112 Item32 @114 Item33 @115 Item34 @116 Item35 @118 Item36 @133 Item38 @134 Item39A @135 Item39B @136 Item39C @137 Item39D @138 Item39E @139 Item39F @140 Item39G @143 EMPLID;
IF EOF=1 THEN DO;
put @1 'EOF1' @5 _N_;
END;
run;
*;
*/

*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------;
*;
/*
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* IT HAS BEEN REQUESTED THAT WE COMPARE FILE(FROM TODD)OF STUDENTS WITH HAZLEWOD EXEMPTION WITH CBM001 TO MAKE SURE THAT WE REPORT THEM CORRECTLY               ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
PROC IMPORT OUT=work.extract 
            DATAFILE= 'E:\Anna\CBM001\Fall 2010\HZLD_Exempt_Todd\HAZELWOOD1_FALL2010.xlsx'  DBMS=EXCEL2007 REPLACE;
GETNAMES=YES;     
            
RUN;

data HAZLW_TD;
set work.extract;
length EMPLID $11.;
keep EMPLID Var_Char1;
EMPLID=ID;
run;
*;
proc sort data=HAZLW_TD;
by EMPLID;
RUN;
*;
data HZLW_MATCH Not_OnCB1;
merge HAZLW_TD(in=x) Final(in=y);
by EMPLID;
if x=1 and y=0 then output Not_OnCB1;
if y=1 then output HZLW_MATCH;
run;
*;
proc print data=Not_OnCB1;
var EMPLID;
run;

proc contents data=final;
run;

data HZLW_MATCH1 HZLW_MISMATCH HZLW_MISMATCH1;
set HZLW_MATCH;
if Var_Char1 ne ""  and Item20F ne "01" then output HZLW_MISMATCH;
IF Var_Char1 ne ""  and Item20F="01" then output HZLW_MATCH1;
IF Var_Char1 eq ""  and Item20F="01" then output HZLW_MISMATCH1;
run;
*;
proc sort data=HZLW_MATCH1 nodupkey;
by emplid;
run;
proc print data=HZLW_MATCH1;*HZLW_MISMATCH;
var emplid Var_Char1 Item20F RESIDENCY1 Item7;
run;
*;
*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------;
*;*/

*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
* PRELIMINARY HEAD COUNT FOR THE STATE'S REQUEST                                                                                                                ;
*---------------------------------------------------------------------------------------------------------------------------------------------------------------;
data Item36BformA;
set Item36Bform;
by EMPLID;
*if last.EMPLID=1 then output;*Need to eliminate duplicates first;
if FlexE IN ("","7") then output;*better way to get rid of Flex entry's. 7 is for things like Katrina;
run;
*;
proc freq data=Item36BformA;
tables sex;
run;
*;
*In state-Out of state;
data Info;
set Item36BformA;
*if COUNTY NE ''  THEN InState="Y";*TX resident;
if RESIDENCY1 LE 299 THEN InState="Y";*TX resident-Dr Redlinger's suggestion;
else InState="N";
run;
*;
proc print data=Info;
where Instate="Y";
var emplid county Instate RESIDENCY1;
run;
*;
proc freq data=Info;
tables InState;
run;
*Ethnicity variation;
data Info1;
set Info;*need to adjust ethnicity data to capture 2 or more ethnicities in one field;
if Item39A="1" AND (Item39B NE "" OR Item39C NE "" OR Item39D NE "" OR Item39G NE  "" ) then do;
Item39A="";
Item39B = "";
Item39C = ""; 
Item39D = "";
Item39G = "";
Multi="1";
end;
*;
if Item39B="2" AND (Item39A NE "" OR Item39C NE "" OR Item39D NE "" OR Item39G NE  "" ) then do;
Item39A="";
Item39B = "";
Item39C = ""; 
Item39D = "";
Item39G = "";
Multi="1";
end;
*;
if Item39C="4" AND (Item39A NE "" OR Item39B NE "" OR Item39D NE "" OR Item39G NE  "" ) then do;
Item39A="";
Item39B = "";
Item39C = ""; 
Item39D = "";
Item39G = "";
Multi="1";
end;
*;
if Item39D="5" AND (Item39A NE "" OR Item39B NE "" OR Item39C NE "" OR Item39G NE  "" ) then do;
Item39A="";
Item39B = "";
Item39C = ""; 
Item39D = "";
Item39G = "";
Multi="1";
end;
*;
if Item39G="8" AND (Item39A NE "" OR Item39B NE "" OR Item39C NE "" OR Item39D NE "" ) then do;
Item39A="";
Item39B = "";
Item39C = ""; 
Item39D = "";
Item39G = "";
Multi="1";
end;
*;
if Item38="1" then Ethnicity="Hispan";
else if Multi="1" then Ethnicity="Multi";
else If Item39A="1" then Ethnicity="White";
else if Item39B="2" then Ethnicity="Black";
else if Item39C="4" then Ethnicity="Asian";
else if Item39D="5" then Ethnicity="AmInd";
else if Item39E="6" then Ethnicity="Intern";
else if Item39F="7" then Ethnicity="Unkn";
else if Item39G="8" then Ethnicity="Hawain";

*else if Item38="1" then Ethnicity="Hispan";
run;
*;


proc print data=Info1;
where Item38="1";
var emplid Item39A Item39B Item39C Item39D Item39E Item39F Item39G Item38 ;*Ethnicity Multi;
run;

proc freq data=Info1;
tables Ethnicity;
run;



*--------------------------------------------------------------------------------------------------------------------------------;
/* no flex entry fix if need to include flex;
*WRITING REPORT OUT with ID's of all undegraduate students reported and their hours reported it Item24;
filename Error1 'C:\Documents and Settings\axm053100\Desktop\Error\AllUndegrad.csv';
data _NULL_;
FILE Error1 DLM=',';
IF _N_=1 THEN DO;
put "List of ALL undegraduate students";
put "EMPLID" "," "SCH-Item 10A" "," "SCH-Item 10B" "," "Item 24" "," "Item 35";
END;
set Item36Bform;
where Level1 in ("1","2","3","4");
PUT  EMPLID SCHL  SCHLoff SCHFund Item35;
run; 
*;
*WRITING REPORT OUT with ID's of all undegraduate students reported and their hours reported it Item24;
filename Error1 'C:\Documents and Settings\axm053100\Desktop\Error\FundUndegrad.csv';
data _NULL_;
FILE Error1 DLM=',';
IF _N_=1 THEN DO;
put "List of funded undegraduate students";
put "EMPLID" "," "SCH";
END;
set Item36Bform;
where Level1 in ("1","2","3","4") and SCHFund NE 0;
PUT  EMPLID SCHFund;
run; 
*;

*WRITING REPORT OUT with ID's of all undegraduate UNFUNDED students reported it Item21;
filename Error1 'C:\Documents and Settings\axm053100\Desktop\Error\NonFund1Undegrad.csv';
data _NULL_;
FILE Error1 DLM=',';
IF _N_=1 THEN DO;
put "List of nonfunded undegraduate students in Item21";
put "EMPLID" "," "SCH";
END;
set Item36Bform;
where Level1 in ("1","2","3","4") and SCHNF NE 0;
PUT  EMPLID SCHNF;
run; 
*;

*WRITING REPORT OUT with ID's of all undegraduate UNFUNDED students reported it Item22;
filename Error1 'C:\Documents and Settings\axm053100\Desktop\Error\Item27Undegrad.csv';
data _NULL_;
FILE Error1 DLM=',';
IF _N_=1 THEN DO;
put "List of nonfunded undegraduate students in Item21";
put "EMPLID" "," "Item27";
END;
set Item36Bform;
where Level1 in ("1","2","3","4") and Item27 NE "";
PUT  EMPLID Item27;
run; 
*;
*/

/*
*printing list of doctoral and aud for Dr Redlinger- no flex entry fix if need them;
filename Error3 'C:\Documents and Settings\axm053100\Desktop\Error\Error3.csv';
data _NULL_;
FILE Error3 DLM=',';
IF _N_=1 THEN DO;
put "Doctoral Students";
put "EMPLID" "," "NATIONAL_ID1" ","  "LAST_NAME1" "," "FIRST_NAME1" "," "Level1" "," "Item18" ;
END;
set Item36Bform;
where Level1 in ("7","8");
PUT EMPLID NATIONAL_ID1 LAST_NAME1 FIRST_NAME1 Level1 Item18;
run; 
*/
**************************************************************;
* Additional                                                 ;
**************************************************************;
/*
*WRITING THIS REPORT OUT FOR Sharon;
filename ErrorA 'C:\Documents and Settings\axm053100\Desktop\Error\Tuition-FERPA.csv';
data _NULL_;
FILE ErrorA DLM=',';
IF _N_=1 THEN DO;
put "Preliminary CBM001- Fall 2009";
put "EMPLID" "," "SSN" "," "Classification" "," "Tuition" "," "FERPA";
END;
set Item36Bform;
PUT  EMPLID NATIONAL_ID1 Level1 Item7 Item34;
run; 
*;
*/
quit;